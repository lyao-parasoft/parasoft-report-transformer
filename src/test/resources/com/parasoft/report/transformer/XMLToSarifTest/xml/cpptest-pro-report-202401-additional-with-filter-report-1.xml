<?xml version='1.0' encoding='UTF-8'?><ResultsSession buildId="Default Project-2024-07-10" climode="true" endTime="2024-07-10T10:57:29+08:00" execEnv="linux_x86_64" hasViols="true" id="1720999702363" lang="en" machine="MACHINE-NAME" prjModule="flowanalysiscpp" project="" tag="cpptest_settings" time="2024-07-10T10:56:00+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2024.1.0" user="user">
   <TestConfig machine="MACHINE-NAME" name="cpptest_settings" pseudoUrl="/mnt/d/bitbucket/flowanalysiscpp/conf/pro/cpptest_settings.properties" user="user"/>
   <Authors>
      <Author id="dev1" name="user"/>
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.7.0.20240508"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.desktop.files.in.scope" name="Helper Scope Analyzer for C/C++test Professional" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.7.0.20240424B4736"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.7.0.20240522B2384"/>
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.7.0.20240522B2384"/>
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1"/>
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1"/>
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1"/>
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Metrics>
      <Metric avg="0.6" disp="true" id="METRIC.CBO" max="1" min="0" name="Coupling Between Objects" noi="5" stddev="0.49">
         <Info avg="0.6" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.CC" max="3" min="1" name="McCabe Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="0.11" disp="true" id="METRIC.CLLOCRIF" max="0.25" min="0" name="Comment/Logical Lines in Files" noi="6" stddev="0.114">
         <Info avg="0.11" disp="true" elem="flowanalysiscpp" max="0.25" min="0" noi="6" stddev="0.114"/>
      </Metric>
      <Metric avg="0.142" disp="true" id="METRIC.CLLOCRIM" max="1" min="0" name="Comment/Logical Lines in Methods" noi="17" stddev="0.318">
         <Info avg="0.142" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="17" stddev="0.318"/>
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.CLLOCRIT" max="0" min="0" name="Comment/Logical Lines in Types" noi="4" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="4" stddev="0"/>
      </Metric>
      <Metric avg="0.136" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="22" stddev="0.343">
         <Info avg="0.136" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="22" stddev="0.343"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.ECC" max="1" min="1" name="Essential Cyclomatic Complexity" noi="22" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="22" stddev="0"/>
      </Metric>
      <Metric avg="0.6" disp="true" id="METRIC.FO" max="1" min="0" name="Fan Out" noi="5" stddev="0.49">
         <Info avg="0.6" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="4.479" disp="true" id="METRIC.HDIFM" max="16.333" min="1.25" name="Halstead Difficulty" noi="22" stddev="3.924">
         <Info avg="4.479" disp="true" elem="flowanalysiscpp" max="16.333" min="1.25" noi="22" stddev="3.924"/>
      </Metric>
      <Metric avg="738.759" disp="true" id="METRIC.HEFM" max="4452.883" min="23.265" name="Halstead Effort" noi="22" stddev="1202.865">
         <Info avg="738.759" disp="true" elem="flowanalysiscpp" max="4452.883" min="23.265" noi="22" stddev="1202.865"/>
      </Metric>
      <Metric avg="20.665" disp="true" id="METRIC.HICM" max="57.125" min="9.047" name="Halstead Intelligent Content" noi="22" stddev="12.999">
         <Info avg="20.665" disp="true" elem="flowanalysiscpp" max="57.125" min="9.047" noi="22" stddev="12.999"/>
      </Metric>
      <Metric avg="23.182" disp="true" id="METRIC.HLENM" max="62" min="6" name="Halstead Program Length" noi="22" stddev="18.06">
         <Info avg="23.182" disp="true" elem="flowanalysiscpp" max="62" min="6" noi="22" stddev="18.06"/>
      </Metric>
      <Metric avg="0.378" disp="true" id="METRIC.HLEVM" max="0.8" min="0.061" name="Halstead Program Level" noi="22" stddev="0.214">
         <Info avg="0.378" disp="true" elem="flowanalysiscpp" max="0.8" min="0.061" noi="22" stddev="0.214"/>
      </Metric>
      <Metric avg="0.021" disp="true" id="METRIC.HNOBM" max="0.09" min="0.003" name="Halstead Number of Bugs" noi="22" stddev="0.025">
         <Info avg="0.021" disp="true" elem="flowanalysiscpp" max="0.09" min="0.003" noi="22" stddev="0.025"/>
      </Metric>
      <Metric avg="41.042" disp="true" id="METRIC.HTTPM" max="247.382" min="1.292" name="Halstead Time to Program" noi="22" stddev="66.826">
         <Info avg="41.042" disp="true" elem="flowanalysiscpp" max="247.382" min="1.292" noi="22" stddev="66.826"/>
      </Metric>
      <Metric avg="13.636" disp="true" id="METRIC.HVOCM" max="37" min="6" name="Halstead Program Vocabulary" noi="22" stddev="8.621">
         <Info avg="13.636" disp="true" elem="flowanalysiscpp" max="37" min="6" noi="22" stddev="8.621"/>
      </Metric>
      <Metric avg="95.765" disp="true" id="METRIC.HVOLM" max="307.16" min="15.51" name="Halstead Program Volume" noi="22" stddev="94.078">
         <Info avg="95.765" disp="true" elem="flowanalysiscpp" max="307.16" min="15.51" noi="22" stddev="94.078"/>
      </Metric>
      <Metric avg="0.4" disp="true" id="METRIC.IDOC" max="1" min="0" name="Inheritance Depth of Class" noi="5" stddev="0.49">
         <Info avg="0.4" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="5" stddev="0.49"/>
      </Metric>
      <Metric avg="0.033" disp="true" id="METRIC.LCOM" max="0.167" min="0" name="Lack of Cohesion" noi="5" stddev="0.067">
         <Info avg="0.033" disp="true" elem="flowanalysiscpp" max="0.167" min="0" noi="5" stddev="0.067"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.MCC" max="3" min="1" name="Modified Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="149.546" disp="true" id="METRIC.MI" max="171" min="128.663" name="Maintainability Index" noi="5" stddev="14.46">
         <Info avg="149.546" disp="true" elem="flowanalysiscpp" max="171" min="128.663" noi="5" stddev="14.46"/>
      </Metric>
      <Metric avg="0.364" disp="true" id="METRIC.NBD" max="2" min="0" name="Nested Blocks Depth" noi="22" stddev="0.71">
         <Info avg="0.364" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="7.667" disp="true" id="METRIC.NOBLIF" max="31" min="1" name="Blank Lines in Files" noi="6" stddev="10.515">
         <Info avg="7.667" disp="true" elem="flowanalysiscpp" max="31" min="1" noi="6" stddev="10.515"/>
      </Metric>
      <Metric avg="0.091" disp="true" id="METRIC.NOBLIM" max="1" min="0" name="Blank Lines in Methods" noi="22" stddev="0.287">
         <Info avg="0.091" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="22" stddev="0.287"/>
      </Metric>
      <Metric avg="0.4" disp="true" id="METRIC.NOBLIT" max="2" min="0" name="Blank Lines in Types" noi="5" stddev="0.8">
         <Info avg="0.4" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="5" stddev="0.8"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOC" max="1" min="1" name="Number of Classes" noi="5" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="1.5" disp="true" id="METRIC.NOCLIF" max="7" min="0" name="Comment Lines in Files" noi="6" stddev="2.5">
         <Info avg="1.5" disp="true" elem="flowanalysiscpp" max="7" min="0" noi="6" stddev="2.5"/>
      </Metric>
      <Metric avg="0.318" disp="true" id="METRIC.NOCLIM" max="2" min="0" name="Comment Lines in Methods" noi="22" stddev="0.555">
         <Info avg="0.318" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="22" stddev="0.555"/>
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOCLIT" max="0" min="0" name="Comment Lines in Types" noi="5" stddev="0">
         <Info avg="0" disp="true" elem="flowanalysiscpp" max="0" min="0" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="6" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="6" stddev="0"/>
      </Metric>
      <Metric avg="10.833" disp="true" id="METRIC.NOLLOCIF" max="44" min="1" name="Logical Lines in Files" noi="6" stddev="14.938">
         <Info avg="10.833" disp="true" elem="flowanalysiscpp" max="44" min="1" noi="6" stddev="14.938"/>
      </Metric>
      <Metric avg="2.955" disp="true" id="METRIC.NOLLOCIM" max="12" min="0" name="Logical Lines in Methods" noi="22" stddev="3.723">
         <Info avg="2.955" disp="true" elem="flowanalysiscpp" max="12" min="0" noi="22" stddev="3.723"/>
      </Metric>
      <Metric avg="2" disp="true" id="METRIC.NOLLOCIT" max="4" min="1" name="Logical Lines in Types" noi="4" stddev="1.225">
         <Info avg="2" disp="true" elem="flowanalysiscpp" max="4" min="1" noi="4" stddev="1.225"/>
      </Metric>
      <Metric avg="1.545" disp="true" id="METRIC.NOMCIM" max="10" min="0" name="Method Calls In Methods" noi="22" stddev="2.606">
         <Info avg="1.545" disp="true" elem="flowanalysiscpp" max="10" min="0" noi="22" stddev="2.606"/>
      </Metric>
      <Metric avg="2.4" disp="true" id="METRIC.NOMIT" max="4" min="0" name="Number of Methods in Types" noi="5" stddev="1.356">
         <Info avg="2.4" disp="true" elem="flowanalysiscpp" max="4" min="0" noi="5" stddev="1.356"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="23" stddev="0.78">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="23" stddev="0.78"/>
      </Metric>
      <Metric avg="40.833" disp="true" id="METRIC.NOPLIF" max="152" min="6" name="Physical Lines in Files" noi="6" stddev="50.449">
         <Info avg="40.833" disp="true" elem="flowanalysiscpp" max="152" min="6" noi="6" stddev="50.449"/>
      </Metric>
      <Metric avg="5.545" disp="true" id="METRIC.NOPLIM" max="17" min="1" name="Physical Lines in Methods" noi="22" stddev="4.707">
         <Info avg="5.545" disp="true" elem="flowanalysiscpp" max="17" min="1" noi="22" stddev="4.707"/>
      </Metric>
      <Metric avg="9" disp="true" id="METRIC.NOPLIT" max="20" min="1" name="Physical Lines in Types" noi="5" stddev="6.261">
         <Info avg="9" disp="true" elem="flowanalysiscpp" max="20" min="1" noi="5" stddev="6.261"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPRIVMIT" max="2" min="0" name="Private Members of Types" noi="5" stddev="0.632">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="2" min="0" noi="5" stddev="0.632"/>
      </Metric>
      <Metric avg="0.2" disp="true" id="METRIC.NOPROTMIT" max="1" min="0" name="Protected Members of Types" noi="5" stddev="0.4">
         <Info avg="0.2" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="5" stddev="0.4"/>
      </Metric>
      <Metric avg="2.2" disp="true" id="METRIC.NOPUBMIT" max="4" min="0" name="Public Members of Types" noi="5" stddev="1.327">
         <Info avg="2.2" disp="true" elem="flowanalysiscpp" max="4" min="0" noi="5" stddev="1.327"/>
      </Metric>
      <Metric avg="0.545" disp="true" id="METRIC.NORET" max="1" min="0" name="Number of Returns in Methods" noi="22" stddev="0.498">
         <Info avg="0.545" disp="true" elem="flowanalysiscpp" max="1" min="0" noi="22" stddev="0.498"/>
      </Metric>
      <Metric avg="32" disp="true" id="METRIC.NOSLIF" max="114" min="5" name="Source Lines in Files" noi="6" stddev="37.399">
         <Info avg="32" disp="true" elem="flowanalysiscpp" max="114" min="5" noi="6" stddev="37.399"/>
      </Metric>
      <Metric avg="5.136" disp="true" id="METRIC.NOSLIM" max="16" min="1" name="Source Lines in Methods" noi="22" stddev="4.31">
         <Info avg="5.136" disp="true" elem="flowanalysiscpp" max="16" min="1" noi="22" stddev="4.31"/>
      </Metric>
      <Metric avg="8.6" disp="true" id="METRIC.NOSLIT" max="18" min="1" name="Source Lines in Types" noi="5" stddev="5.571">
         <Info avg="8.6" disp="true" elem="flowanalysiscpp" max="18" min="1" noi="5" stddev="5.571"/>
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOT" max="1" min="1" name="Number of Types" noi="5" stddev="0">
         <Info avg="1" disp="true" elem="flowanalysiscpp" max="1" min="1" noi="5" stddev="0"/>
      </Metric>
      <Metric avg="2.6" disp="true" id="METRIC.RFC" max="4" min="0" name="Response for Class" noi="5" stddev="1.497">
         <Info avg="2.6" disp="true" elem="flowanalysiscpp" max="4" min="0" noi="5" stddev="1.497"/>
      </Metric>
      <Metric avg="1.364" disp="true" id="METRIC.SCC" max="3" min="1" name="Strict Cyclomatic Complexity" noi="22" stddev="0.71">
         <Info avg="1.364" disp="true" elem="flowanalysiscpp" max="3" min="1" noi="22" stddev="0.71"/>
      </Metric>
      <Metric avg="2.2" disp="true" id="METRIC.WMC" max="4" min="0" name="Weighted Methods of Class" noi="5" stddev="1.327">
         <Info avg="2.2" disp="true" elem="flowanalysiscpp" max="4" min="0" noi="5" stddev="1.327"/>
      </Metric>
   </Metrics>
   <Scope>
      <Repositories/>
      <Locations>
         <Loc accLns="9" auth="user" hash="1742277963" locRef="1" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/DeadLock.cpp" totLns="152" uri="file:/mnt/d/bitbucket/flowanalysiscpp/DeadLock.cpp"/>
         <Loc auth="user" hash="-1665970746" locRef="2" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/DivisionByZero.cpp" totLns="6" uri="file:/mnt/d/bitbucket/flowanalysiscpp/DivisionByZero.cpp"/>
         <Loc auth="user" hash="1013754779" locRef="3" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/MemoryLeak.cpp" totLns="15" uri="file:/mnt/d/bitbucket/flowanalysiscpp/MemoryLeak.cpp"/>
         <Loc auth="user" hash="-1257393797" locRef="4" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/NullPointer.cpp" totLns="14" uri="file:/mnt/d/bitbucket/flowanalysiscpp/NullPointer.cpp"/>
         <Loc auth="user" hash="1950870755" locRef="5" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/Point.hpp" totLns="25" uri="file:/mnt/d/bitbucket/flowanalysiscpp/Point.hpp"/>
         <Loc auth="user" hash="1537905639" locRef="6" projId="flowanalysiscpp" projPath="/flowanalysiscpp" project="flowanalysiscpp" resProjPath="flowanalysiscpp/Shapes.hpp" totLns="33" uri="file:/mnt/d/bitbucket/flowanalysiscpp/Shapes.hpp"/>
      </Locations>
   </Scope>
   
  <SetupProblems/>

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:01:11">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="6" checkedLns="102" id="flowanalysiscpp" name="flowanalysiscpp" qfixErrs="0" suppErrs="0" totErrs="1538" totFiles="6" totLns="245"/>
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="139" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="2"/>
               <Category authTot="5;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="4" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="12" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="1"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="568" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0"/>
               <Category authTot="51;" authUrg="0;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="51"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="3"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="3" total="0"/>
               <Category authTot="13;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="13"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0"/>
               <Category authTot="10;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="2" total="10"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="9" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0"/>
               <Category authTot="6;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="6"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="3"/>
               <Category authTot="9;" authUrg="8;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="9"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="2"/>
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="5" total="4"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="4" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="136" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="7" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="73" total="4"/>
               <Category authTot="1;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="20" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="21" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Code Duplication Detection" name="CDD" rules="4" total="0"/>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="369" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="9" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="16" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="3"/>
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="3"/>
               <Category authTot="5;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="1" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="2" total="2"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0"/>
               <Category authTot="4;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0"/>
               <Category authTot="4;" authUrg="4;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="4"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0"/>
            </Category>
            <Category authTot="60;" authUrg="0;" desc="Coding Conventions" name="CODSTA" rules="555" total="60">
               <Category authTot="42;" authUrg="4;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="135" total="42"/>
               <Category authTot="32;" authUrg="8;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="82" total="32"/>
            </Category>
            <Category authTot="88;" authUrg="5;" desc="Comments" name="COMMENT" rules="17" total="88"/>
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="98" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="2"/>
               <Category authTot="1;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="1" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Susergth" name="CWE-326" rules="1" total="0"/>
            </Category>
            <Category authTot="2;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="27" total="2"/>
            <Category authTot="111;" authUrg="0;" desc="Formatting" name="FORMAT" rules="52" total="111"/>
            <Category authTot="9;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="30" total="9"/>
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="239" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0"/>
               <Category authTot="34;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="34"/>
               <Category authTot="9;" authUrg="8;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="9"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0"/>
               <Category authTot="13;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="13"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0"/>
               <Category authTot="16;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="16"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0"/>
               <Category authTot="30;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="30"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0"/>
               <Category authTot="10;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="10"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="2" total="1"/>
               <Category authTot="8;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="9" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="1"/>
               <Category authTot="1;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0"/>
            </Category>
            <Category authTot="4;" authUrg="4;" desc="Initialization" name="INIT" rules="25" total="4"/>
            <Category authTot="230;" authUrg="8;" desc="Joint Strike Fighter" name="JSF" rules="279" total="230"/>
            <Category authTot="0;" authUrg="0;" desc="Metric" name="METRIC" rules="50" total="0"/>
            <Category authTot="50;" authUrg="1;" desc="Metrics" name="METRICS" rules="44" total="50"/>
            <Category authTot="21;" authUrg="0;" desc="MISRA C 1998" name="MISRA" rules="62" total="21"/>
            <Category authTot="35;" authUrg="0;" desc="MISRA C 2004" name="MISRA2004" rules="223" total="35"/>
            <Category authTot="92;" authUrg="0;" desc="MISRA C++ 2008" name="MISRA2008" rules="344" total="92"/>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="381" total="0">
               <Category authTot="34;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="331" total="34"/>
               <Category authTot="22;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="50" total="22"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2023 (MISRA C 2012)" name="MISRAC2012" rules="381" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A conversion shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be declared at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A conversion shall not remove any const, volatile or _Atomic qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0"/>
               <Category authTot="10;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="10"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="1"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to expressions of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic or thread-local storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length arrays shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Required) The standard header file &lt;fenv.h> shall not be used" name="MISRAC2012-RULE_21_12" rules="2" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders and shall be independent from thread interleaving" name="MISRAC2012-RULE_13_2" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0"/>
               <Category authTot="5;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="5"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="8" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.2 (Required) A project shall not contain dead code" name="MISRAC2012-RULE_2_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.7 (Advisory) A function should not contain unused parameters" name="MISRAC2012-RULE_2_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0"/>
               <Category authTot="8;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="1" total="8"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="0"/>
               <Category authTot="16;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="16"/>
               <Category authTot="2;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="12" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0"/>
               <Category authTot="3;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="3"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="5" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0"/>
               <Category authTot="1;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="1"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="2" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0"/>
            </Category>
            <Category authTot="21;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="67" total="21"/>
            <Category authTot="90;" authUrg="0;" desc="Naming Conventions" name="NAMING" rules="103" total="90">
               <Category authTot="35;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="35"/>
            </Category>
            <Category authTot="9;" authUrg="0;" desc="Object Oriented" name="OOP" rules="63" total="9"/>
            <Category authTot="12;" authUrg="0;" desc="Optimization" name="OPT" rules="52" total="12"/>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0"/>
               <Category authTot="2;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="2"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0"/>
               <Category authTot="6;" authUrg="0;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="6"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0"/>
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0"/>
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Parser diagnostics" name="PARSER" rules="2" total="0"/>
            <Category authTot="4;" authUrg="0;" desc="Possible Bugs" name="PB" rules="90" total="4"/>
            <Category authTot="7;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="11" total="7"/>
            <Category authTot="9;" authUrg="0;" desc="Portability" name="PORT" rules="41" total="9"/>
            <Category authTot="7;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="33" total="7"/>
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0"/>
            <Category authTot="12;" authUrg="0;" desc="Security" name="SECURITY" rules="56" total="12"/>
            <Category authTot="1;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="1"/>
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="20" total="0"/>
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid wraparounds when performing arithmetic integer operations" id="APSC_DV-002590-e" origId="BD-PB-INTWRAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid potential integer overflow/underflow on tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="APSC_DV-003235" desc="The value returned by a POSIX library function that may return an error should be used" id="APSC_DV-003235-a" origId="CODSTA-227" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Empty 'catch' blocks should not be used" id="APSC_DV-003235-b" origId="EXCEPT-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="If a class declares a copy or move operation, or a destructor, either via '=default', '=delete', or via a user-provided declaration, then all others of these five special member functions shall be declared as well" id="AUTOSAR-A12_0_1-a" origId="CODSTA-MCPP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" id="AUTOSAR-A12_1_2-a" origId="INIT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="User-provided copy assignment operators shall handle self-assignment" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="The 'setlocale' function should not be used" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function should be used to forward forwarding references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="Identifiers that define objects with external linkage shall be unique" id="AUTOSAR-A2_10_5-a" origId="GLOBAL-REUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="Identifiers that define functions with external linkage shall be unique" id="AUTOSAR-A2_10_5-b" origId="GLOBAL-REUSEDEXTFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in the ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="26"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array with external linkage is declared, its size should be explicitly specified" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="The 'NULL' identifier should not be used" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-111" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="8;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts should not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="AUTOSAR-A5_2_6-a" origId="CODSTA-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="'Do' statements should not be used except in a function-like macro" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A7_3_1-a" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="The 'asm' declaration should not be used" id="AUTOSAR-A7_4_1-a" origId="CODSTA-234" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Do not use recursion" id="AUTOSAR-A7_5_2-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="A parameter of a type that is not 'cheap to copy' should be passed by reference" id="AUTOSAR-A8_4_3-a" origId="CODSTA-CPP-109" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="A parameter of const reference to a 'cheap to copy' type should be passed by value" id="AUTOSAR-A8_4_7-a" origId="CODSTA-CPP-108" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Types of bit-fields should have defined sizes" id="AUTOSAR-A9_6_1-a" origId="CODSTA-233" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The facilities provided by &lt;setjmp.h> should not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have no more then one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Non-const objects with internal linkage should be defined at function scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="OPT-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="The 'NULL' identifier should not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" id="AUTOSAR-M5_2_10-a" origId="CODSTA-232" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="Avoid incorrect shift operations" id="AUTOSAR-M5_8_1-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid unsafe use of a value obtained from arithmetic operations on tainted value" id="BD-SECURITY-INTOVERF" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Do not acquire locks in different order" id="CERT_C-CON35-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL06" desc="Use meaningful symbolic constants to represent literal values" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="The lowercase form of 'L' shall not be used as the first character in a literal suffix" id="CERT_C-DCL16-a" origId="PORT-01_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR02" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions 'rewind', 'setbuf' and 'ctime' should not be used" id="CERT_C-ERR07-b" origId="CODSTA-235" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a standard library function that may return an error should be used" id="CERT_C-ERR33-a" origId="CODSTA-226_a" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR34" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with the 'TRUE' identifier using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not modify objects with temporary lifetime" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="Do not cast pointers into more strictly aligned pointer types" id="CERT_C-EXP36-a" origId="CODSTA-230" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CERT_C-EXP37-a" origId="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CERT_C-EXP37-b" origId="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing assignments, increment or decrement operators" id="CERT_C-FIO41-a" origId="CODSTA-228_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Do not call 'getc()', 'putc()', 'getwc()', or 'putwc()' with a stream argument containing function calls or function-like macro calls" id="CERT_C-FIO41-b" origId="CODSTA-228_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid potential integer overflow/underflow on tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid data loss when converting between integer types" id="CERT_C-INT08-a" origId="BD-PB-INTDL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT10" desc="The operands of the remainder operator '%' should be of unsigned integer types" id="CERT_C-INT10-a" origId="CODSTA-229" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Operands of bitwise and complement operators shall have an unsigned type" id="CERT_C-INT13-a" origId="CODSTA-307" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid wraparounds when performing arithmetic integer operations" id="CERT_C-INT30-a" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid data loss when converting between integer types" id="CERT_C-INT31-o" origId="BD-PB-INTDL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid signed integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="The result of the memory allocation function should be cast immediately" id="CERT_C-MEM02-a" origId="MRM-58_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="The result of the memory allocation function should be cast immediately into a pointer to the allocated type" id="CERT_C-MEM02-b" origId="MRM-58_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in the ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The 'pthread_kill', 'pthread_sigqueue' and 'tgkill' functions should not be used to send signals to threads" id="CERT_C-POS44-a" origId="SECURITY-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a POSIX library function that may return an error should be used" id="CERT_C-POS54-a" origId="CODSTA-227" sev="1" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="The One Definition Rule shall not be violated" id="CERT_CPP-DCL60-a" origId="GLOBAL-ONEDEFRULE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The facilities provided by &lt;setjmp.h> should not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Empty 'catch' blocks should not be used" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Do not slice derived objects" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="User-provided copy assignment operators shall handle self-assignment" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables shall not have static storage duration" id="CODSTA-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The features provided by &lt;fenv.h> should not be used" id="CODSTA-109" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="CODSTA-110" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length arrays should not be used" id="CODSTA-112" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast should not remove any 'const' qualification from the type of a pointer or reference" id="CODSTA-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not modify objects with temporary lifetime" id="CODSTA-196" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use meaningful symbolic constants to represent literal values" id="CODSTA-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with the 'TRUE' identifier using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer 'while' statements over 'do' statements" id="CODSTA-18" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts should not be used" id="CODSTA-CPP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The 'NULL' identifier should not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Global variables and static data members should not be used" id="CODSTA-CPP-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="6"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function should be used to forward forwarding references" id="CODSTA-MCPP-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="8;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="5;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="26;" authUrg="0;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="26"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="25;" authUrg="0;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="25"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid wraparounds when performing arithmetic integer operations" id="CWE-190-a" origId="BD-PB-INTWRAP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-20" desc="Avoid potential integer overflow/underflow on tainted data" id="CWE-20-b" origId="BD-SECURITY-TDINTOVERF" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Empty 'catch' blocks should not be used" id="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="11"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="34;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="34"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have no more then one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Ensure that a derived class has at most one base class which is not an interface class" id="HICPP-10_3_1-a" origId="OOP-07_c" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="30"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="HICPP-13_1_1-a" origId="OOP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function should be used to forward forwarding references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="34;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="34"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="8;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid wraparounds when performing arithmetic integer operations" id="HICPP-4_2_2-e" origId="BD-PB-INTWRAP" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="C-style casts should not be used" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type (with exceptions)" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A potentially virtual pointer to member function shall only be compared with nullptr" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="Every switch branch should be unconditionally terminated" id="HICPP-6_1_3-a" origId="CODSTA-64_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="HICPP-7_1_6" desc="The names of the standard signed integer types and standard unsigned integer types should not be used" id="HICPP-7_1_6-b" origId="CODSTA-223_c" sev="3" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="A variable initialized by a constant expression of a standard integer type should not be defined with the 'auto' specifier" id="HICPP-7_1_6-c" origId="CODSTA-MCPP-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="The 'asm' declaration should not be used" id="HICPP-7_5_1-a" origId="CODSTA-234" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" origId="CODSTA-CPP-108_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define =delete functions with parameters of type rvalue reference to const" id="HICPP-8_3_4-a" origId="CODSTA-MCPP-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The data members initialized with the same constant values across all constructors should be initialized using NSDMI" id="INIT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="4;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="10"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="17"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="34;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="34"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="4;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="14"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.metrics" authTot="0;" authUrg="0;" cat="METRIC" desc="Physical Lines in Files" id="METRIC.NOPLIF" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="1;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="15"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in the ISO C standard" id="MISRA-005" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="18"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'setlocale' function should not be used" id="MISRA-121_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRA2004-14_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRA2004-20_10" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRA2004-20_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRA2004-20_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRA2004-20_8" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2004-8_12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="1;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="OPT-45" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Declare local variable as const whenever possible" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="GLOBAL-REUSEDEXTVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="GLOBAL-REUSEDEXTFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="18"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with arithmetic operators in an expression" id="MISRA2008-5_2_10" origId="CODSTA-232" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="BD-PB-RECFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRA2012-RULE-11_8" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid incorrect shift operations" id="MISRA2012-RULE-12_2" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length arrays should not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;time.h> shall not be used" id="MISRA2012-RULE-21_10" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features provided by &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall be a unique identifier" id="MISRA2012-RULE-5_7_a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRA2012-RULE-12_1_a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid wraparounds when performing arithmetic integer operations" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTWRAP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid potential integer overflow/underflow on tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-TDINTOVERF" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="16"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A conversion shall not remove any 'const', 'volatile' or '_Atomic' qualification from the type accessed via a pointer or by reference" id="MISRAC2012-RULE_11_8-a" origId="CODSTA-301" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses to indicate the precedence of operators in expressions" id="MISRAC2012-RULE_12_1-a" origId="FORMAT-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="Avoid incorrect shift operations" id="MISRAC2012-RULE_12_2-a" origId="BD-PB-BADSHIFT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length arrays should not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="The standard header files &lt;time.h> or &lt;ctime> shall not be used" id="MISRAC2012-RULE_21_10-a" origId="MISRA2004-20_12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The features provided by &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The facilities provided by &lt;setjmp.h> should not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header files &lt;setjmp.h> or &lt;csetjmp> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header files &lt;signal.h> or &lt;csignal> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_6" desc="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', 'goto', 'throw' statements, and after calls to functions with the 'noreturn' attribute" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="A typedef name shall be a unique identifier" id="MISRAC2012-RULE_5_6-a" origId="GLOBAL-UNIQUETYPEDEFC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall be a unique identifier" id="MISRAC2012-RULE_5_7-a" origId="GLOBAL-UNIQUETYPEC" sev="2" total="8"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="GLOBAL-REUSEDEXTVAR" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define objects with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-a" origId="GLOBAL-REUSEDSTATVAR" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="Identifiers that define functions with internal linkage shall be unique" id="MISRAC2012-RULE_5_9-b" origId="GLOBAL-REUSEDSTATFUN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have no more then one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="11"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="20;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="20"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="13"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="User-provided copy assignment operators shall handle self-assignment" id="OOP-34" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="5"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="4"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless 'case' and 'default' clauses should not be used" id="OPT-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Empty 'catch' blocks should not be used" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Empty 'catch' blocks should not be used" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Empty 'catch' blocks should not be used" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not slice derived objects" id="PB-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object of array type with a specified size should not decay to a pointer when it is passed as a function argument" id="PB-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object of array type should not decay to a pointer when it is passed as a function argument" id="PB-41_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="A header file shall not contain definitions of functions or objects that are non-inline and have external linkage" id="PFO-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="9;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="9"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="3"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="PREPROC-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'data()' function from the 'string' class of the standard library" id="SECURITY-09" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="2"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="7"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'asctime()' and 'asctime_r()' functions should not be used" id="SECURITY-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The random number generator functions 'rand()' and 'srand()' should not be used" id="SECURITY-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library should not be used" id="SECURITY-48_b" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="1"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0"/>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0"/>
         </RulesList>
         <SeverityList>
            <Severity authTot="38;" authUrg="0;" id="1" total="38"/>
            <Severity authTot="402;" authUrg="12;" id="2" total="402"/>
            <Severity authTot="804;" authUrg="18;" id="3" total="804"/>
            <Severity authTot="178;" authUrg="20;" id="4" total="178"/>
            <Severity authTot="116;" authUrg="0;" id="5" total="116"/>
         </SeverityList>
      </Rules>
      
  <Supps/>

      
  <StdViols>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="OWASP2019-API9-e" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="ac9b14e0-898f-3709-bf9c-af3cd673572a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a349c3de-9049-3335-9074-21c77ed2b8ce" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="AUTOSAR-A3_3_1-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="988a1e7c-dc81-3dc4-9db6-bfa5968b8304" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f228f4e-6ae1-3428-8e82-0590d3f7af04" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="JSF-137" lnHash="-106623271" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-106623271" unbViolId="ff5fd906-a3fc-3f89-af47-f93c8847a02f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cd043f5-6ae9-3492-8880-57f35ddcaa35" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="MISRA-023" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="9c6237be-4f26-315b-96c2-6d480c0b7266" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="beb570b0-8548-3150-b8c2-c692c8fa0f9d" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="MISRA2008-3_3_1" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="844cc221-df1f-3d19-b82a-9fd27f710084" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dfef27b-0472-35e1-83f7-b4bc31a39897" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="CERT_C-DCL15-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="a868f4f4-3773-3c7f-ba4e-0921fdbee58d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91add2d3-7a42-39da-aecc-7dabdf8bc4d0" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="MISRA2004-8_10" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="95b7aa0e-91a1-395b-bbb6-25ae6340f519" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21c80b8d-0635-344a-985b-5305111bea97" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="JSF-051" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="2d375160-be99-33ec-b840-d1d12e60968e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29eacf39-3310-39b1-8b4b-c1ad52e9b25e" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="NAMING-44" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="7ed483bc-6670-386e-8d7e-86ac2a4ff1ff" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6af54528-66cd-32a3-84e2-4bc8f0164bbc" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="JSF-098" lnHash="-106623271" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-106623271" unbViolId="6012624f-c6b0-3822-af7e-72077056e4bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3a2887c-9b7c-3a2f-a9c1-acab9b4619f4" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="AUTOSAR-M7_3_1-a" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="e6b2dcf1-2356-371a-bf64-fa0907f6e024" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e53c19d0-a813-3cbb-8e93-720363ba46b8" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-36" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="15d5143e-c70b-3825-9c2b-c1bc735ead05" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a0ed4f1-f022-3bf7-b2a6-ce3c18851225" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Do not declare the 'runGameThreads' function in the global namespace" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="MISRA2008-7_3_1" lnHash="-106623271" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-106623271" unbViolId="fb917454-4e30-3dbe-97e9-e7ce54d83823" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4b6d5b7-5b60-39bf-bbad-bc71eb28995c" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="COMMENT-14" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="7f2fd686-adfd-3aee-ae06-9a7bd5a29f47" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb2d6acf-f2f4-3cc0-88da-be565d8400b5" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="d929210d-5d49-3935-807a-5f5b790ba579" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dea3901f-2d27-34ec-9921-879ea41e3fbc" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be declared 'noexcept'" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="AUTOSAR-A15_4_4-a" lnHash="-106623271" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-106623271" unbViolId="13af1e12-9426-3bfd-8673-43173b4eef64" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9bc7d65-4ead-3e1f-b165-6a92e2e02d16" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function should be declared 'noexcept'" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="CODSTA-MCPP-09" lnHash="-106623271" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-106623271" unbViolId="963e154d-115a-384f-86a8-fed3b5df816d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d628cd7-5378-398c-985f-06871632bb1f" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'runGameThreads'" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="FORMAT-28" lnHash="-106623271" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-106623271" unbViolId="8e9ea149-3f42-3c02-adfc-d74475ff98a5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d2f7339-9a8e-3941-9d5e-961f5f1b9e92" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has Cyclomatic Complexity value: 1" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="5" auth="user" locRef="1" rule="METRICS-29" lnHash="-106623271" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-106623271" unbViolId="f3a330cd-c3e8-358d-978f-94df46d72791" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e14a8cc-dce2-3e47-a47a-e17b6f1eaa37" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Function 'runGameThreads' has Essential Complexity value: 1" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="5" auth="user" locRef="1" rule="METRICS-33" lnHash="-106623271" rule.header="Report Essential Complexity" tool="c++test" lineHash="-106623271" unbViolId="3c5d168c-5a4c-385e-a18d-32e70cdc3763" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73c9a437-35a4-3702-8385-c647ca4b250c" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Naming convention not followed: runGameThreads" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="NAMING-17" lnHash="-106623271" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-106623271" unbViolId="89fc2059-c424-32f2-9913-74658717a0d9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61292e9b-36ec-3425-a0b9-5b0f1f11d5ff" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="3" auth="user" locRef="1" rule="GLOBAL-UNUSEDFUNC" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="21f62b22-0a3f-3605-9e2d-55e372aa7966" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f0c7e98f-6bd5-30c6-bef7-0726768a0407" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="4" auth="user" locRef="1" rule="AUTOSAR-M0_1_10-a" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="8d213b97-1a86-3d08-87bf-c4e2696ce908" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c51041f1-1b27-332d-bc76-a5f686bc1bb9" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="134" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_10_b" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-106623271" unbViolId="7a7064b8-6021-3c66-85ec-3ad9fdfa7d30" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="590e8d90-d5bf-3d38-bdf7-667f3aa35383" locEndPos="6" locType="sr" hash="1742277963" locEndLn="134" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="135" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="135" sev="3" auth="user" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="f6b70fad-9d25-369c-a6e7-2178af9fd40d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="551702de-fea1-3d09-ad56-1d9329391690" locEndPos="1" locType="sr" urgent="true" hash="1742277963" locEndLn="135" goals="1,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="bd8f39ed-f3ce-391b-8441-dfa1150d4cab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b1e0b92-d0c3-3a24-8219-980362e8b748" locEndPos="1" locType="sr" hash="1742277963" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="ef13ec27-b04c-34fe-9297-96222d4b90d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d65b22bf-8153-3b73-a78c-a443d640b89a" locEndPos="1" locType="sr" hash="1742277963" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="1b5aa1de-2ed4-35ff-ae81-0cb1a97ff049" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a1f6946-4813-3e5c-a7fd-cccb139b8a97" locEndPos="1" locType="sr" hash="1742277963" locEndLn="136" goals="0,"/>
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads'" ln="136" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="136" sev="3" auth="user" locRef="1" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="c4dd58bd-7d34-3115-bb09-76feb4c6b03d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7e3804c-4335-35e7-a948-e9cfd8e35409" locEndPos="2" locType="sr" hash="1742277963" locEndLn="136" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="8cd6a678-939b-3b3a-b648-2cb259244909" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6401be6b-fef0-386b-a80a-24566105a4ed" locEndPos="1" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="2f1f5737-c572-39eb-9904-c279be746847" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8ccbc22-f1b2-3f67-9e37-ee4f356900eb" locEndPos="1" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="4a2843bc-95b2-364e-a2a9-7658a9a8b693" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1fb8c2a-7bbc-3574-8f76-0330308ede2d" locEndPos="1" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable &quot;thread1&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-142_b" lnHash="-1123182240" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1123182240" unbViolId="c2f4c029-e1ef-3018-84b6-bacd954b7e19" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d6a7210-a133-3db5-8c70-0a7fdb5446d9" locEndPos="12" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable &quot;thread1&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="INIT-03" lnHash="-1123182240" rule.header="Initialize all variables" tool="c++test" lineHash="-1123182240" unbViolId="75c68ddd-374f-3dda-8ac9-502d62778c9c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="367fb662-d1d6-33c7-a63d-12bef10926a6" locEndPos="12" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="89d554c6-202a-312a-9ac9-211cc06704e5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f890728-699c-31a2-be07-f2eb9760f6fa" locEndPos="12" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="5211c740-75f7-3339-ab5e-06ac49792b05" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbc481ff-0b87-3f9e-8cf8-783178f1223d" locEndPos="12" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="17249040-672a-336d-bd6e-14cc87eb3d43" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0b9df373-c3f5-356d-b771-00bb455f5e4e" locEndPos="12" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6afded98-b6dd-33ed-88c0-e48f8a3cebb4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="220f4560-5cd5-3346-bd7c-b45240c757be" locEndPos="12" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="f92fc1db-e383-3e92-b5ba-4a0cb8e56fa3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1633adab-2eea-3d38-a67b-d35dd54ae15e" locEndPos="12" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a33dbd23-4222-359a-b614-06be40607487" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5e5ca463-351a-3e31-a1c5-9a4ee7c38d4e" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="4058e6ee-41b2-3930-b6e2-7f1c8e5cd22a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="696467fc-db8d-3d50-b06b-92d1247ab937" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="36f8f0ef-cefb-3c9e-85e4-812ad70f287c" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="817fe6cc-0dd3-3cde-99fa-dbe29b0906e7" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable &quot;thread2&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-142_b" lnHash="-1123182240" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1123182240" unbViolId="eff7077b-7f25-330a-b977-b208a99509da" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ace853da-d546-3295-967d-fc9a1d598cfc" locEndPos="21" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable &quot;thread2&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="INIT-03" lnHash="-1123182240" rule.header="Initialize all variables" tool="c++test" lineHash="-1123182240" unbViolId="346c5fe9-b3d7-3e4c-babf-86d14f315619" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56a40a3b-bf2d-37d3-96be-f2d6eef18c51" locEndPos="21" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="ecafaf52-243b-323a-8595-ee0de69503b8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dc4a792-5ad2-3742-bfdf-b009c6cbc367" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c88b689e-b97d-38e3-8cb6-7c43e7c67d2f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3eeb86c-a583-3c23-956d-79dc05365355" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="059945a9-7c97-39d5-be5c-38e4904265fb" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ecd27a8-3fe2-35b0-ab6f-ad06fa8a9166" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="3d355462-cd9d-33cf-a012-2238486ce932" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa2fbb0-1b46-3439-a110-1054d5f2d427" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="27eb51d3-8549-3727-a248-4cdd58ef76c3" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99c150c8-0074-3398-8af3-fd63a31f264e" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a23eaced-a1b7-3eb7-80c3-0f3c210fd054" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c42c2e34-1131-3f89-8ae4-947cdd2ee4bc" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="cf95d8f5-f823-3857-9286-22b12f47d1f2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59d78d8c-5dd7-349a-8fc3-25a3a0be4c92" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c771bc21-bc77-36bd-bba8-f312ac8a7f43" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="156c4fd0-c695-3b99-8606-c93f61dce3f8" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="96cfac7e-fadb-3195-a22c-859e5a9cf091" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64e6cc97-e9d3-346f-b62c-1bfba2d22fa3" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="311b8343-9ec7-3752-85ed-19473f4909a8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="036d5339-3f1e-326c-a83f-cd3c5b2c2a67" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="0bf6dbb5-acc6-3197-8bfa-0ddc30bbdcd7" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3aa7719-387a-3ee8-9e15-27ad2644b576" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="bf25040d-47c2-3b4d-abca-c2b791617ca4" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="527f2576-f22b-3b8d-96c5-9f192c9b30cb" locEndPos="21" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable &quot;thread3&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-142_b" lnHash="-1123182240" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1123182240" unbViolId="da264851-1048-3e7f-af80-492a2359d96e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fc2951c-28c8-3dd5-b8be-7ee30d74df39" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable &quot;thread3&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="INIT-03" lnHash="-1123182240" rule.header="Initialize all variables" tool="c++test" lineHash="-1123182240" unbViolId="181e549f-0fc4-30fe-a438-e4784d02ff19" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8dd881a-acee-3fcd-9234-fb9492ef6b40" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="b3ef5a21-313e-3b17-a0b9-3353dfae45e4" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c85d347c-f1d4-3279-b520-1d8b345defb2" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="784f0faf-69c1-3458-a5da-44e9f964b4b9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e8e5fe5-18df-3080-9567-9bfbac370e7f" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9a897672-faa2-3a2a-b70d-c390ccc2b963" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78edbc45-23d3-3d1f-8944-a4a03b59160e" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="0b2e03ee-420c-332a-b4b7-788dd0e8875e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a292a699-49e9-3fb9-ba3b-5b398ec5c8cc" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2c88f0ce-5721-3bb5-aef1-f6c264633d24" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87611e22-6c12-3292-a111-8e0c6f888dd3" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="b2fb3ac7-ad71-3a9c-a1d6-032ac72ef435" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fead13d1-8589-3282-96ea-465124f1af46" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="bbe76150-5832-34b4-913c-158d15c76492" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8016ca3b-b347-3266-844a-49488426a683" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c195e63b-2be1-32de-ab21-6cdeaa21e81b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b82c871f-1cdb-3b8a-b402-7a420add1a6a" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="c27aebf5-0cda-3d29-a9cf-17d00e6ca864" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ef3803a-0aeb-3e3f-821d-6effa33f9f12" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="d1546a06-2381-3a59-9a7a-ea41122a4c84" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e63506b-9a25-30ac-a091-16f1259b4bc9" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="4b998c51-d78e-30ef-b07b-bf99c2533a21" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e506729-afb9-3f9d-bc14-0cc6254ac351" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="e9be04ca-b7e0-3132-9bf8-4e51834b1216" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14b3e717-afba-3319-9b48-f51d754dc325" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="a1da4ccf-32be-3913-871b-84e37e3292b8" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1fb4480f-35b1-363b-92c4-e5282de1810e" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="83b1f568-6b15-35fc-b645-1a0a3202b48d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="32608c30-812e-33ed-ab59-767fd9f41e71" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="f35a6da0-284d-35ea-8760-46f8a88e09c4" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7bd39368-4fef-378c-b51a-9384caddfc2d" locEndPos="30" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="d06a7265-d407-33ab-b7f8-e3cc4a6e34f4" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="57cb1bec-b09d-3cdf-986e-9dd801fda743" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="e9d4501a-5e0a-3e41-bc48-6066aea797c1" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="2434e097-49ca-3820-9d5d-b549899f835a" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="4966829b-a896-357e-be98-0963c4e87673" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1ce12329-bd9e-3cf5-bdd9-414b8160b8e1" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The variable &quot;thread4&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-142_b" lnHash="-1123182240" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1123182240" unbViolId="49a736d8-b0cc-3a6c-984f-33353817cfe2" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a73fbb1-dc54-33c3-b988-4ab670290bdd" locEndPos="39" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="The variable &quot;thread4&quot; was not initialized when declared" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="INIT-03" lnHash="-1123182240" rule.header="Initialize all variables" tool="c++test" lineHash="-1123182240" unbViolId="3b5c79d4-ca40-37cf-ba82-013aa2d0cc66" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a83f7c83-b40a-3809-95f5-b8565de00fd5" locEndPos="39" locType="sr" urgent="true" hash="1742277963" locEndLn="137" goals="1,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="69dd1a41-97c4-3bb6-a12a-8c68876c233f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e8c2fe8-ec00-3035-9277-762ebbf6b442" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="9477d24c-8301-3bde-b443-60ea901f7fdf" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2147b950-0230-3167-9def-6d09f0ba877d" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="a498f1e1-653e-36d8-9e3d-eeb9f4c67c2b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cf9a327-07ab-30f7-bb29-723ff392fac2" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="25cb916e-29ae-3d9a-8b68-2407afbe83d9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04b13e3f-9c61-330f-8a40-05c6cc7d32ed" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="8f46d0c1-0a5c-3bed-9e20-ab041a046cf0" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="255f09ca-2451-394b-9a93-7a83127dedfa" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="bac8652a-9de1-39e2-9dea-103b04f39060" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3e0f413-c0be-3b3c-a8af-f42ecab77db8" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="dd3fdbba-5bee-3c83-a650-213d08197fe9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7daf71cf-0454-39f4-93a2-6e7a2a04afb1" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="d88ac0f6-cdc8-3dbd-9706-68601ad97850" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cdae778-c114-322a-8bf5-c5c9049fce54" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="2" auth="user" locRef="1" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="4161b071-cf50-32fb-a7b7-9e26b4b82d83" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ce76059-0b14-37a4-814c-109b88f7bd34" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6dfc6424-c13a-3361-bc11-ce31ac828034" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac6a3315-540e-3a3a-bb50-5c35d5d95501" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="14a392a4-2978-3f64-b14a-b74d2978fef6" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f18a59c1-ea3f-32b7-9311-d7c82e04d83e" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="137" sev="3" auth="user" locRef="1" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="3ef19b77-f296-35f5-a629-3337f2c08c0d" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb17886d-d691-3ebd-b494-87edeab8178f" locEndPos="39" locType="sr" hash="1742277963" locEndLn="137" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="afebec73-531a-329b-8758-eef9aa24e196" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c22aec96-04d7-3fd7-9815-e2400d792f78" locEndPos="1" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="a7d9bbe3-b56c-3a03-a50c-ca1730aa34e7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba4e766b-95b7-3dfb-9c8d-71229b9bfa36" locEndPos="1" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="05bfa543-5bb2-3862-89b2-eca2ba8fea05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e859b3ac-7771-360d-9eea-e38303023728" locEndPos="1" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="APSC_DV-003235-a" lnHash="-2033288726" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-2033288726" unbViolId="ac38e292-479a-3b7f-a1cc-ed7ce70e5339" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="430cb602-3865-3ca3-9acc-78b64d3d7715" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="1" auth="user" locRef="1" rule="CERT_C-POS54-a" lnHash="-2033288726" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-2033288726" unbViolId="bbdab139-8322-31f8-8f2b-cf9ca4c8a61b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c93d68c-33c8-3b1b-9409-516684662d4a" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="5" auth="user" locRef="1" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="010d698e-0989-382b-a5bc-a85153dced39" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c032d6d4-3db7-3dc2-a91f-70eee939781e" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="AUTOSAR-A0_1_2-a" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="75514b98-349f-3248-a94e-e4f36333b66b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24aa5ef4-fe41-3d0c-8a04-8a5c95c48fb9" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-58" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="1b763ec6-5390-3a8d-af1c-0d2ee2c3adbc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eca5f359-fd8d-3e84-b11b-9bf02c917d13" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_7" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="6de761a0-a8ed-3e6b-b2cb-bbee84c346fe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bce0861-b779-3f5e-832c-7f097287fa6e" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="JSF-115_a" lnHash="-2033288726" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="ff09f0cf-6f13-31c2-9e25-918016e2e6fa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc09b7d9-ab2c-3462-bad4-67ba88de89b7" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CODSTA-122_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="9a6d07bc-9247-3fe1-92d5-dc9b2f56cab2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bb40290-269d-3bdc-b841-b695c99359f1" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="b31c71cf-e614-31cf-816f-fa5cb6f7de62" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af9dae6e-7192-37e9-9b5d-407f95baf9fb" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CERT_C-EXP12-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="937b155a-29a8-3393-a21f-fe213a205568" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d49da9b6-96cc-3b5d-acd0-85b526f11496" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="52014743-38ca-3123-94c6-b67464f81843" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e04f457-a454-3fae-b144-788e97dc6e68" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="MISRA2004-16_10" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="932917c9-021c-3078-84ad-24f703e3a454" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d6532e9-0076-3171-bd5e-825e8047c477" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="30abf958-37cf-3829-8f92-222ec7a51739" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60cad1e4-0e55-3fbf-b31d-11bef4994be2" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRA2008-0_3_2" lnHash="-2033288726" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="2fa3cd4e-09dc-3c16-80d1-b1aa62759cc4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a384200-4586-34f7-8f34-a6668b15e2eb" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="JSF-115" lnHash="-2033288726" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2033288726" unbViolId="d941eddd-ffa2-38fc-9828-843c5b70ff15" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2a682bc-abbc-3caf-b8d5-24eacb88c5f1" locEndPos="2" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="8217391c-97d7-3ccd-8007-12c6f4d877a8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2b01ad7-f9f5-3b55-88cd-1dade91c5372" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="4972c2e6-a574-3e8e-99ba-8cafd3874be0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8355898-1ca8-353c-8497-c8ab7a9ecb69" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="7cc4503e-0c52-30e7-b1c7-40f115f1c770" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f691253a-602a-3aef-9d7c-bf92802d9b5b" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="2aa5eb5e-7dec-3363-80b9-61cc00c872ae" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77c925c3-084e-30f4-94a4-70e8b624b3ac" locEndPos="27" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="5e712883-d5a0-3e06-a221-11526ab80ccc" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c9f759a-aa19-37bc-8e74-69ea7e886266" locEndPos="27" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="b4cbe5b5-0d81-38fd-8f69-c793eaf1ec74" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82e4323e-cee6-3304-b169-c28880182b82" locEndPos="27" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="c62fe1fe-23c6-3ee9-b1a4-db477ab892db" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f99af93-3b28-37dd-94da-8139111b1d9e" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="6f3c1aa2-3038-3ea3-b516-36ec43d5d854" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a25da016-7ae9-3d1d-b295-3e6f8fed061c" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="326b858e-242e-3f3c-9f54-475f5608484d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80c7ff8b-2751-3647-8051-3d968c090289" locEndPos="43" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="aeed5681-1795-39d4-a5a2-f59dbcc27f68" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed435a50-fc87-397f-9315-f2f45247569c" locEndPos="43" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="fb9b97e3-030e-3943-baf8-859c009c3db0" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20a84b86-912d-33ee-b12f-720329bf1158" locEndPos="43" locType="sr" urgent="true" hash="1742277963" locEndLn="138" goals="1,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="cd262c49-620c-3ccc-b394-796e279fb3eb" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9e63fe6-2c32-3691-a042-e71e50964682" locEndPos="43" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="c9448973-dc62-387c-92a6-707c08b2933d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddf5111a-0b0d-3a8d-9763-ab4c30d0fcb1" locEndPos="43" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="138" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="f194d360-be25-38d6-a23f-4a08cb3174fb" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb722a58-f9ef-3d60-8576-7eba30d74f7c" locEndPos="43" locType="sr" hash="1742277963" locEndLn="138" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="c9b17d42-049e-3711-a3ea-a92b5523a82a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="424fa016-bea5-3180-87c9-63b03983bc86" locEndPos="1" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="cfc8a67d-961e-396b-9148-9276179c9ca7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1f41cd7-5e3c-3e71-bf0f-02a41bc62119" locEndPos="1" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="f57fd63b-535f-3c9a-ac57-d0f17c580605" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e1d4d26-975e-30f0-925d-9d133851d64e" locEndPos="1" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="APSC_DV-003235-a" lnHash="-1824414877" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1824414877" unbViolId="0229c88b-9985-3e2e-965f-863a387ed018" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="785b8642-39ce-3bf2-bab2-5b545c136549" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="1" auth="user" locRef="1" rule="CERT_C-POS54-a" lnHash="-1824414877" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1824414877" unbViolId="7c6fd77f-bd01-3b4e-82e7-1ecd63048634" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7cec3cb-ca07-36fc-bc56-a9c4fc114a47" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="5" auth="user" locRef="1" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="a43ad3c8-29b8-345b-8898-8965fc968849" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9ad3529-5430-3f24-8315-d97836e4b0ad" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="AUTOSAR-A0_1_2-a" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="ddd65476-e61b-323a-95a3-ae85c75cbb2d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90b72a8c-c3c5-37cd-9970-682da7b55e7e" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-58" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="f2e29f28-5998-3d3c-a645-42dea66487ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1d6b14e-6eb9-3ff4-bfbd-94645dfd7069" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_7" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="cbaf614c-a68d-3e5c-84d1-32004da7d9ee" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be6fc1eb-b1ce-3560-8abf-41fd0aff0e32" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="JSF-115_a" lnHash="-1824414877" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="45f50bb3-ce68-3e40-be35-a1cc8d5e8d47" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d7d94c4-72ad-323c-957b-81135e7f7a53" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CODSTA-122_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="f06ccdc3-761b-3a52-b120-285952fcd3ce" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cec79f03-69c1-3207-ae81-adfa5d19f833" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="11b6097b-1a7a-35b5-8d30-931f5c3323f4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f2214c2-abcd-37d1-b4f7-2c51b4e5c130" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CERT_C-EXP12-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="11c256ce-1f82-30a2-a293-ae0b8513eadf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8db1aa0-adf7-3cad-a90a-688a5034a2b4" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="a5a0e4a3-2550-39ee-bf87-285002bc1683" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31a8fa9a-7daa-3697-817b-3adead3990c8" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="MISRA2004-16_10" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="944ed155-b938-33d1-9655-7bc4ce3ee5d8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0700327-1548-3153-aa7a-3e72aa71017c" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="17a509b3-dcee-3a60-9538-fd36a317f073" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ca18dc7-122c-36fb-99c1-b51d941beee9" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRA2008-0_3_2" lnHash="-1824414877" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="befe1eba-8023-3d2c-b2a2-05481ebf6ca2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abc39cbe-a3d8-3df4-a819-01ec39d02ba1" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="JSF-115" lnHash="-1824414877" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1824414877" unbViolId="0a0dab25-a59e-3016-9fc5-73d555c03f03" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f70b1e1-2294-3605-8e44-c93e9d1c77d2" locEndPos="2" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="b0affa0b-2496-3054-82e7-60341d85f420" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab024659-571a-3f3b-86d8-91f9bf70073e" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="0c00a3a7-9dd7-3430-872e-c4760bdcc94e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8ba3543-d974-36e6-9df2-3b0ed7c41f07" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="4bed7bf4-a65e-393f-a6fd-493e5f646fc3" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de201c95-5934-326f-bb28-5a2d6b2cd5aa" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="d751440d-c706-3bb5-9bbf-a410993e678e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dddba3cc-f85d-3c2a-987e-175121bd4c83" locEndPos="27" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="18ffc7bc-77e4-3bb4-9ae1-92406d8d6888" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f82133e-50db-3261-b01c-d6ef06d1bc98" locEndPos="27" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="0ba8b7c0-f82f-367b-b04f-33b111fffe80" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec97b91a-2788-3a12-9242-9d23a57faa1c" locEndPos="27" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="d399310d-bcc2-30c6-84d0-994583f4e37b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04f91785-936a-3eee-93ac-3296e5d2e301" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="54416a47-97f4-3175-867a-6be2c3852ae9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1608d55a-4137-36d0-996a-e865d105167c" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="f98ba81e-465e-3928-8a2e-444de058a6fd" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ac775fa-a932-3db9-bca0-2ae2c81a5093" locEndPos="44" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="0d3b46d5-de33-3044-b2c7-10d4a4c60c2b" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5da43d47-9192-3c3c-838c-3770088345ec" locEndPos="44" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="33c241db-8069-366c-acb3-04f504272cdf" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4fe3019-da58-3893-a57b-0f275d4a616e" locEndPos="44" locType="sr" urgent="true" hash="1742277963" locEndLn="139" goals="1,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="dceaa3e4-09c5-3f17-b264-006e24d3a303" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="278cb079-9c30-3f27-9228-cb49529fc0a9" locEndPos="44" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="d592ee6c-d564-37b8-9d9e-b4e5416a6c84" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80ee8e1d-bf0f-39d0-99ca-759144a3f030" locEndPos="44" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="139" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="286c372b-f737-3513-a793-d80d75100736" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deb6384c-1759-3832-8eb4-896a2c91ec4a" locEndPos="44" locType="sr" hash="1742277963" locEndLn="139" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="b120cead-4b54-3a6b-8bf4-e8bb17ad3fd1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2da06cba-007d-317d-9301-bfadb356c077" locEndPos="1" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="c0050c38-777e-3c69-af47-a818d4a6d7f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52441f5a-1345-3443-8a1c-e7cf7c42c705" locEndPos="1" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="4a960bb0-e83d-307f-b578-04c5a6f0f362" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9176a36-6911-334d-bc91-fc2cc21e38cb" locEndPos="1" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="APSC_DV-003235-a" lnHash="-1305984162" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1305984162" unbViolId="0157011d-2b61-3369-aff8-0badac6c4a40" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="257f0005-0d33-3987-a6f1-b6f5d21b6448" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="1" auth="user" locRef="1" rule="CERT_C-POS54-a" lnHash="-1305984162" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1305984162" unbViolId="a7ac7919-a507-32a9-9a15-67e547ea8f7b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c134bfc0-d30e-36ff-8845-268fd883c4e8" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="5" auth="user" locRef="1" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="381a4c65-27b3-355c-a323-3f3aaf7c6a62" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2742fe65-db55-3f8a-9d5f-fe1285268465" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="AUTOSAR-A0_1_2-a" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="19cf5523-f344-3935-a55c-514842da3b4a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a767210d-7fc5-3048-ab84-b2fec485c2bb" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-58" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="b420385d-5c55-3e84-8a02-9658da4bc491" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94b39f71-43a3-36f1-8888-c96e2aa372aa" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_7" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="b213bdac-04d5-3f85-b802-87840d19245a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9029a54c-4785-33b7-a405-87a4926b0a25" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="JSF-115_a" lnHash="-1305984162" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="e3dd824d-1e35-3f05-8589-fe0266298748" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6221f966-6d9a-3136-963d-350d5e8b609e" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CODSTA-122_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="e388f65c-66e2-33d1-a75d-b44a5aec617b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aea12b00-5258-3853-b7d0-cca7d56cd3eb" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="3387278b-d1c2-3ff3-926d-104986b5bcb6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a0e5859-eed7-3e50-8f5d-c50a2495f852" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CERT_C-EXP12-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="d2026a2b-6d00-3a71-8bbd-f66a242c2e3b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbf5ea7d-0d90-308f-921a-38eea23049f9" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="25d058a4-df42-37da-be24-90e8ca25e063" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da86f9b-3d3f-3a07-994e-11ab397032f6" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="MISRA2004-16_10" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="5399323e-8935-3a16-ad8f-83821bbf86d6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cc2301d-30f7-3c43-a7fa-eb32a68510d3" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="362474c1-cbe6-39f9-b022-a2ad0814cada" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd0464f9-6135-3e54-93c7-3a28423d7288" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRA2008-0_3_2" lnHash="-1305984162" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="7340c32a-6381-30fc-a363-6e5965cb5ca2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da13e93-297a-39d4-9ce0-bc74c019c294" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="JSF-115" lnHash="-1305984162" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1305984162" unbViolId="bc6194f7-1d47-3d78-a546-cab654816f3f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d6cdc62-244b-3eb2-b4f6-26c6dde112c9" locEndPos="2" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="d40e6319-c192-31ec-8362-d01f9dc79c04" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2011fc6b-8746-369a-9e87-c9c6a8204c69" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="dc1e87ce-49b0-3ab4-916f-fef7463b4482" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4cb9dc1-7c99-3373-b53e-1440fee578b4" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="917a4d8d-b043-3051-a527-ba7e391304f5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ab06796-344b-32a3-b104-1f63e90dc64a" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="bad85971-4d24-3cb6-8fad-1c1c74888e5f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e192ce4-369a-346a-bfde-cc2cb5d1a0d6" locEndPos="27" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="63df94d7-a275-3f56-8a2d-dcb5eb0c7034" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f54c1fff-45f7-3879-9437-594946b99c21" locEndPos="27" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="e8348c25-d868-3e78-9a03-f9d5096d7c29" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b29529c5-b39d-3044-96dd-453f1747f72a" locEndPos="27" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="e1a945bb-b62e-35fd-9db0-4a0683fbcf25" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3190853c-aa2e-331a-b166-069f431711fd" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="2db02c54-008f-3717-9ebe-28b4995761c8" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a930c1c2-b5e8-3c21-b3dc-a354960a3862" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="1855cf1c-260c-36f5-9e08-0117ca453244" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ad5b228-77d9-382f-b180-4339c10edab4" locEndPos="50" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="f9cbaa03-f0f4-312a-a5db-7b61abe60884" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7fe98b0-6fc0-30a3-aa0a-46936168944f" locEndPos="50" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="0bfc1c79-399c-35bc-83a4-55b1858210a7" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11a8d806-3fbb-35c7-b4d0-c41631a03f9f" locEndPos="50" locType="sr" urgent="true" hash="1742277963" locEndLn="140" goals="1,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="c160fa78-bca5-3772-8854-110a81dfc235" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d34c7c5e-c538-36cd-ad68-c5f35a8833c6" locEndPos="50" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="4dff33f1-fca0-30e7-ac64-93fce8656663" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6feb605-9aff-328d-b3a4-2b200672f1f1" locEndPos="50" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="140" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="b549e513-6ee7-374e-94a3-096b5a29e6f0" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93655205-48c8-3471-b36e-082f4e5240fc" locEndPos="50" locType="sr" hash="1742277963" locEndLn="140" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="603fc4af-32e0-3a23-abe1-c442f07c1606" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62a32bd1-5bc6-3a3f-b8a3-45d782541acc" locEndPos="1" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="5" auth="user" locRef="1" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="e953f967-8778-347a-b340-901d369ec48e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b59a2be-d6fa-3a9a-9c8b-31f3e0d3a11d" locEndPos="1" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="5" auth="user" locRef="1" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="86ce3aa2-0255-389b-9f0c-383c061718b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad13b28b-820b-3eec-9b89-95aaf704bcbe" locEndPos="1" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="APSC_DV-003235-a" lnHash="-604051279" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-604051279" unbViolId="fce87290-e509-30e0-92b8-70042c53e081" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2be6935-ec60-3250-8f04-6912a3630d29" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'pthread_create' should be used" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="1" auth="user" locRef="1" rule="CERT_C-POS54-a" lnHash="-604051279" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-604051279" unbViolId="45ccbc75-e1ca-3511-8cb4-6182853b9370" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="827eb5c1-67a0-3c34-ae9a-7d91b3e3eaaf" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="5" auth="user" locRef="1" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="d42ee731-e17b-36dd-879b-de06bb57fc6a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7616732-327f-3a61-b1ad-fdd0ad73164f" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="AUTOSAR-A0_1_2-a" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="fb574c37-dea1-33fb-83df-bc919a88973f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="274e9d9f-58d7-3bfa-a4d7-6d55b3f0ca10" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-58" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="0e9710d1-f8e7-333d-813f-c681565a7771" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdf469a8-a912-3221-a270-fb35fe2853af" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRA2008-0_1_7" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="a1cdf8a4-0448-3c04-9f63-67140671f9c8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c98013-7e7b-37da-bd87-9ad7a5529aac" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="JSF-115_a" lnHash="-604051279" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="6be2bc74-40da-3adc-b19f-e85ee482aeb4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1eadd426-dbc4-3413-a526-666234fd7c7b" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CODSTA-122_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="07afe359-2f69-3548-9e55-fd10bfc38702" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69af67ef-2b58-3e19-82e5-329b7a3cb160" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_17_7-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="d85de0e8-74ae-314e-9798-1dc81dfd446f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5ae933c-2c1e-315a-afe8-7228949814ef" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CERT_C-EXP12-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="63bc17e2-ba29-32f0-aa63-5bfcb1cb84e4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6839f33-9397-3e5f-a9ea-14cd3161c472" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-17_7_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="fc91361f-776e-3097-85db-62160b8b0a30" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04780c9b-e5b2-35ff-a926-7467a477f18d" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="MISRA2004-16_10" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="71853900-bb70-3a44-a2da-6ea451ebe7e8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="606c22bb-c4e2-30e1-92da-b56e28ede6ea" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="AUTOSAR-M0_3_2-a" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="94f9bca3-90fb-3f59-b23b-b3afd6dbb250" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61df0a02-2fae-34f4-8fd5-87070fa06cb1" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRA2008-0_3_2" lnHash="-604051279" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="02b574d9-c786-3c56-be03-5f7c0885ba32" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f40c8f60-5d3a-39df-8a11-7fe6b3b11d25" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="JSF-115" lnHash="-604051279" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-604051279" unbViolId="f76706c3-a617-31e4-a467-1496e12a84c0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfff86e1-87cc-3a90-a786-af4c0254a9be" locEndPos="2" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="eace244a-d4c8-3644-bd81-79f4ec1c3285" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5869f18d-c298-3021-907f-0b1bf0660bb8" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="593d655b-06b0-3f1e-9370-693fd0e44d53" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f65ed5a-05af-3230-b2ba-af6ae5f50930" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="0002c75e-1892-378a-9f2d-291361b7e934" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21385a4d-7dd5-32f4-987f-77cbef415df8" locEndPos="27" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="7853ad8d-bdcb-30d9-b3a7-1c21787cc750" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a266872-edfe-3408-b4a8-68332c6c8cf5" locEndPos="27" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="7208661a-d7c6-3517-a0cc-a01c8a2c3b90" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="258ef2f3-e0d7-3be4-b039-0565814fddf8" locEndPos="27" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="e3fcfe64-41f6-3c50-925d-2e4747966f08" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68dac431-4acb-3a7f-9440-63ee7a77182a" locEndPos="27" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="5741eceb-b727-3540-bb01-605b70ea7513" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab905960-a565-39eb-9f47-693e8dc47b7b" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="cbefcf14-f68a-3ffa-849d-b978f140c2a6" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9519d314-133a-31e6-b60b-cbc45ffa7698" locEndPos="30" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="e32dbed6-64d3-3f09-9002-dafa613c4d9d" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="baee15b9-20e6-32d9-bc40-4f093ef87ba6" locEndPos="48" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="17f41c0a-1449-31e4-ba02-769825f19663" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c978449-19e9-3849-a32f-ce473b540154" locEndPos="48" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="4" auth="user" locRef="1" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="d2bba5c7-207b-3830-8256-6b838b61aeed" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e882bc1b-30d0-3a4d-998f-89f499f05390" locEndPos="48" locType="sr" urgent="true" hash="1742277963" locEndLn="141" goals="1,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="3" auth="user" locRef="1" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="02a1e47f-a83e-3e29-8474-590f6edf0c09" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d094f847-9d7b-30aa-9b45-bcf243fb9605" locEndPos="48" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="93aadea5-b55a-3d6b-956a-c3570ddebbfc" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a112c769-d48e-3424-bf99-71ae50241e41" locEndPos="48" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locStartln="141" sev="2" auth="user" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="17f15970-f48d-3c3d-a230-72e72a280dc4" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f937a74-e186-36b7-8622-c865c266e0b4" locEndPos="48" locType="sr" hash="1742277963" locEndLn="141" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="4389a96e-bebb-3e40-b80d-9cadf8eb9b61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dcf3c66-4d1c-35cf-b2f5-044578233c54" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'DivisionByZero.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="4dcceeb8-6240-3dde-b42d-124c13e1d5bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ba01c31-6266-371c-893b-06fb2b3b9a22" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="0cd260ac-8ab9-3afc-9356-1fd097fb9233" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a12b505-0b3e-3baa-8c8f-e2b7abade10d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="5" auth="user" locRef="2" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="c3c7a340-e21e-3d71-bd6e-b7b43a57294c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a3e3cde-af79-3f81-96e0-0f76ebf441f2" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="6062dae8-69e5-30ed-983a-fb0262405c3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c25d8b99-bc80-3eff-9cfd-0eda73d4dcda" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="4c857923-b6b3-3f55-b5d3-3654eb43cbed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98e34552-1304-3b1d-b51a-3441320c6b1b" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="b862ba79-82a6-3287-9ce5-c071a4019f59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61f6ede8-73fd-3252-84e9-c3ad08eb3a1e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="65dd9edd-9290-3538-bfb2-c161385745fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c0424d1-bc5d-34b7-931d-dc30ddf01b57" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="d8b25daf-2fe9-3553-ab08-d969448b7c0d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="509c09e9-8c63-397a-ba06-dad23c920eec" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="3" auth="user" locRef="2" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="94fb5bb0-4897-37a3-b7d1-68a078bc409b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b45d56c-8768-35a7-ba5b-997b61115828" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="user" locRef="2" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="2c0779e5-29be-3dcf-bbcd-a3714bd77550" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d593e17-b946-3b53-8013-82a0ab95dd9e" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="1" sev="2" auth="user" locRef="2" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="00ad9acf-89bd-3eab-8e9a-68420b756d77" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f0e8cf1-833f-3f20-8e2f-bb9a8643d410" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1572071035" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1572071035" unbViolId="fa61d402-70b1-3c9b-940f-7439140fbcc0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca63eacb-bb3a-34c0-9856-144203dc2ed4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="MISRA-013" lnHash="-1572071035" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1572071035" unbViolId="3df23102-edfb-3587-afe4-21487142738d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a9c5b5d-eb00-3d29-921e-92a3132fa0ee" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="4aebd34b-3f18-3e81-a8eb-e1c940fe0948" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d69eb04-07b4-302e-b1fb-e8d346b5e214" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="JSF-209_b" lnHash="-1572071035" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="0f8f1a4f-7747-3309-8c1d-2f62a45bc434" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84f5e9a2-502d-3fb2-9104-2e6eb41462a0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="a81de149-9f76-391a-be5e-94d9e9e12013" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20b70ab4-f006-3e47-8428-91a5d8e486eb" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="88f8d724-20c6-303b-b53d-15c8378d1d8c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6db4d996-5c3f-3486-b8f4-d0d0af2bafa3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="1a7bfd23-f68f-375a-aa62-970f61fffd39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c571fd13-092b-3cec-9187-37f1d3047be3" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-938638073" lang="cpp" violId="b5856bd3-2a18-3150-8c86-1a1ae7ccecd4" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="c005736f-945a-373b-8bd3-1b1b54c75480" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1776184541" lang="cpp" violId="036b97a9-813f-350b-9a89-18c9e8d1ece4" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="7ec0f1ce-295b-3570-8dcb-8f81b4eed17f" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1613810146" lang="cpp" violId="cceade1f-a59b-3e1f-918b-0be74dbe3300" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="1dd0cca9-1a4a-3b57-b56c-234601519a26" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1042079686" lang="cpp" violId="37ba0350-518b-36f9-b0a6-23f67903e751" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="417e091a-4fc6-35a2-9cec-fcf8fb06e930" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="-1572071035" ln="3" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="3" srcRngEndLn="4" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="GLOBAL-UNUSEDFUNC" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="e80d788a-a12d-34e4-92ea-20618368f29a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6d0c9126-fb4d-322e-bbfd-67f919ab8064" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="AUTOSAR-M0_1_10-a" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="6037a5a1-0221-351b-be1a-4cb8c54f55f0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="05fd361b-dd06-341f-a593-96b814d9a2a9" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="MISRA2008-0_1_10_b" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1572071035" unbViolId="71f0946f-06c8-3d42-a109-b729a2aea07f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1591e1cc-f2f6-3354-b8b1-92791e02fd94" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The return type of the 'getShapeRatio' function should be declared as 'auto'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="CODSTA-MCPP-08_b" lnHash="-1572071035" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1572071035" unbViolId="4d0cd277-f7d9-31af-8645-87bd6b30d79a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96286c56-f4ed-3098-868d-f7992f68ed69" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="COMMENT-04" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="fd6658c9-2af6-37df-8fc4-b4de64dc2e71" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d343382-041f-3f75-9968-18bea83137ef" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="JSF-134" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="bc87d3d2-8853-3aae-8651-1c786ffa3625" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8ec10d-fcc9-3201-b74b-b7535fa6043b" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="OWASP2019-API9-e" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="91772726-a258-36e5-a7c3-f1cded0f7e8d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a32c487-2746-3310-8aef-04eafc5869b9" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="13868235-dc96-3624-96b9-228f892add5d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d5f3cec-a278-3654-b9e1-733a33e6b4ff" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="JSF-137" lnHash="-1572071035" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1572071035" unbViolId="d3a8df2a-6c7d-327c-a67d-8c5dfa988802" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa7dcfc0-9c77-391e-b290-1b7194ccfec8" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA-023" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="460821a1-99f8-3cf9-aac4-6e53af27589b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a9d9c12-68f5-3b76-92b9-93e3230fa81d" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="e3308a86-cbf8-307a-98b2-51a41b7f1464" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dcd6d4c-edb2-3327-a3a0-c886fe30c103" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="33606cf8-40e2-327d-b18b-f1349161e783" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a453c307-e8a5-3903-942d-dc0c6793bbe6" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA2004-8_10" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="10193ce4-a82d-3766-8f0a-950176c5ac9a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c212552-bfb5-31a6-8a6c-20f8d7cf7eb8" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="JSF-051" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="9c80253c-0b40-3bf3-b5d9-5284cf5f2d01" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19981753-17e4-384d-b8d6-03f58873c80e" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="NAMING-44" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="e39ebdca-8cf5-3389-89de-0dbab78a1ff1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a58e3d0-ad1e-3cc5-b77b-c4cba23cbb38" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="JSF-098" lnHash="-1572071035" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1572071035" unbViolId="59c28462-74e5-3321-aa5f-8ae5450344b5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92635271-1ac5-3692-bf58-de08f1f5bcde" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-M7_3_1-a" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="5df132a4-0a22-347f-897a-af1e70cd5d6d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e69a18-eca2-3dcd-95bf-f5550b4f4685" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-CPP-36" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="71165d46-f695-303c-8d2e-1ba9da80319b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61eace08-e6cb-3e06-9cb7-8d097f72e445" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'getShapeRatio' function in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="MISRA2008-7_3_1" lnHash="-1572071035" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1572071035" unbViolId="b5458b56-26be-3217-ad42-07245679be48" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e912b04-7a7e-329a-b22a-963754a45c8e" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="COMMENT-14" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="21c65eff-a8da-3f45-bcaf-2b1e5b4b6605" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ddd3f2b-0d1e-3a51-a4a3-40c4311609d3" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="36776cff-830b-34a9-94af-2d31dbcc4dd7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7badd83-6336-3a9d-a49b-8cb63d87aa7a" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="ca932219-7d67-35d9-b69f-ba22c475d6f2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af7a57af-09b4-38c6-a2df-7f914eb68087" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="882c70e9-bd58-32f4-8d2f-7da7ead4aac3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8550965-9f96-3216-9bc3-e5569a9e3f87" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="ce1dd504-15c7-363e-ba13-5244fe2afe90" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22c0debc-ecd9-3e26-860e-93a4388669bd" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="a30fda64-8cab-330d-bbdc-e7c8e984b045" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43a1e324-2cb7-3509-8eb1-9174ce0076b1" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="eea47370-10fd-3e8f-bb64-60734c265d7a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a800fbf9-8ef0-3d78-a8ba-ad2b8fe0668d" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="b5144806-9175-3b5b-8995-4fe936d89a69" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64db9280-9e65-3366-bfb8-e0f2ea9370da" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getShapeRatio'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="FORMAT-28" lnHash="-1572071035" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1572071035" unbViolId="4016ac96-e5eb-3e11-9525-b747564f395a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75cb9492-8da5-3cfe-921f-76d61a6aa7ec" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has Cyclomatic Complexity value: 1" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="user" locRef="2" rule="METRICS-29" lnHash="-1572071035" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1572071035" unbViolId="d50ddaff-d9ad-31f6-a39a-778726f98d94" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="655ffc7d-ac20-3a43-b874-26dd41f4f3a0" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Function 'getShapeRatio' has Essential Complexity value: 1" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="5" auth="user" locRef="2" rule="METRICS-33" lnHash="-1572071035" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1572071035" unbViolId="8f477b91-74ea-388c-a344-e7c3ee8cff46" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5108f0c-8350-3be7-b894-a8f35e6be980" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Naming convention not followed: getShapeRatio" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="NAMING-17" lnHash="-1572071035" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1572071035" unbViolId="e6df6e5a-afe2-3e96-9cbc-452bd9608b51" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38860a67-5a86-3a10-9c2e-b64a39ef474c" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: shape1" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="0bbbf25e-6a3a-3ba2-b9b5-3c37bb21232c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65b01eab-84e0-3822-9852-1f1eb863362f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: shape1" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="030bd45d-f4dc-3a7c-98c4-ad7e5fbec9b1" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bd41101-a6ee-3907-8f7c-8a1222eb94c7" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="4f1b223f-317f-3e62-857e-6620fa2a166c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="662d351c-f5d0-3f2e-964d-a115af559f77" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="d6b1fe40-d40e-31a8-ba01-ccb8f448c2ae" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7b2a2ed-1462-3b09-aac3-1ec95a2a6d02" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="67046a09-d190-34e8-92a5-8599909d18c0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ba8194d-98f0-39a1-8568-59cc8d625da9" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="6b0fb80c-03fa-38cf-ad62-af42a268f632" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a883a5c-3167-3726-9d2b-ea8331110604" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="4aaf4a51-52a7-31a1-be3b-53c5b27b61ae" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e385a04c-52c5-3654-84d3-06ed67bed617" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="2d51b64b-7de0-380a-9e05-6d682e4f70e0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d18c577-bedf-36cd-b03e-b2df4f63da53" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="59ecd009-ff9a-346a-84fc-39d8251ce0f8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5376b264-c83d-3d42-a725-d2b3e9620e6f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="00b4e47d-2fff-3b3b-941e-ffc985d41112" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="533bd6e4-57f1-37b9-9a5f-b258fad91d05" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="6b634cd2-1a0b-3874-a6d9-e55f139890ca" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bda76d7e-f87d-3396-9f2e-d190e2ac4f21" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape1' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="550f2cf0-d09c-314f-844c-1b0e2f8bfd6e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f8359ca-cf7c-391c-80c1-6d2cf4d310b1" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: shape2" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="3992d453-4ee6-3b88-b56f-ea421df8f02c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24e78496-aa31-3a4f-9e78-c58ae906af2a" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: shape2" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="04399b28-0d83-343c-80f1-0a41be697e97" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61fc7073-5a3d-3401-80e7-47f8c9a6bccf" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="4e4701cf-79e1-3030-b5ee-7edb01ebad3d" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24c950e4-0fa0-377a-b145-af68eb4662fb" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="f4695202-8f0e-39e3-a733-3892fb630beb" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f9d827f-fa5b-3526-b65a-6782d3939c6f" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="adbcbeb0-8669-348a-af5d-cf0f966d1bfe" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf19f60d-7e06-3bfe-a542-78efb53cc088" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="30324587-9f8f-35ac-99e8-2b1434c75d5d" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f6cd1e5-3d2b-38b1-9e2e-e492f796b457" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="59602def-91cb-33b5-a18b-e56c07169784" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91c1dc25-9974-3b14-81bf-a67d1ac86697" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="503425d2-e866-3b2e-a4a9-a20102941ef1" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="961d84d7-3c41-333b-adc1-ed65b30bff36" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="3cb67e23-49d2-33e7-9290-1f7f0f20ceb8" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="416b1310-f54a-33ae-b074-3ceeab93039a" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="4" auth="user" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="e2591f72-bea2-3903-ae34-809ee8e8697c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="485f40c8-9d22-3dde-a875-2a8014b2f8cb" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="2" auth="user" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="5c4efb23-7e13-352b-96f5-3b7261b3de5e" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="076d8f8a-60cd-34c2-a8c3-18def1c1e698" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'shape2' identifier should have the 'p' prefix" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="3" sev="3" auth="user" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="244ecf4b-324a-3ae0-b2cf-9142cbe8bf08" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4099c506-5d3e-38a3-a139-ca7405880052" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="4" sev="3" auth="user" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="5c473ab7-b425-3078-8f52-c1918cd08907" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d3cbb37-04a3-3e15-86af-de543d2d8269" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="4" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="4" auth="user" locRef="2" rule="JSF-043" lnHash="2070090220" rule.header="Tabs should be avoided" tool="c++test" lineHash="2070090220" unbViolId="fb4af0e0-8449-3faf-8c52-8c1798647c6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="081a9f3f-4380-3594-89c8-f3d6ca7c1d35" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="user" locRef="2" rule="FORMAT-01" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="52aa823a-7e97-3cf3-b7d8-fe3e52727a87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d8666de-fbfe-34bb-8203-b801fae31b59" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="user" locRef="2" rule="HICPP-2_1_1-a" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="a2826261-f10f-3187-b550-8fa5e90a20de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1bf1016-b0cf-35cf-8889-cdc268b436a6" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="AUTOSAR-A5_6_1-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1887152637" lang="cpp" violId="b854d6a5-27e6-3d89-af61-8f46a820c399" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="26195182-8dd0-3fd4-86ca-dc006c79a35e" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="AUTOSAR-M0_3_1-e" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-643759501" lang="cpp" violId="0d879959-9c63-3966-91b9-c135f4d93949" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="0b90681b-6662-3efe-a121-779d62a5f3de" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="BD-PB-ZERO" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2097929330" lang="cpp" violId="4818f969-c4db-34f2-8864-aafd13f5a928" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="1" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="d15dc7dd-1061-32bc-a6f9-54ef335bfa99" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="CERT_C-FLP03-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966890730" lang="cpp" violId="b9a72f1e-2e59-3271-a418-2c5e3adf4d79" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="3" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="87e22cb2-4e3f-3e28-900c-c7be19510fa0" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="CERT_C-INT33-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-395738124" lang="cpp" violId="b208a9f0-8813-3b7a-b967-7b9cd269c2b7" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="c0041754-3e2f-369b-995c-7513d5fb8ea2" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="HICPP-5_5_1-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="566822700" lang="cpp" violId="04776484-d081-382f-93f5-b9e0a3e79d9a" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="1" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="d01c9009-1fdf-3a18-9be9-5e56bb9445cc" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRA2008-0_3_1_c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-56152077" lang="cpp" violId="0bb455d8-e9d0-3438-a1b9-15d64e0117a9" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="5" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="1ce368b9-2cc8-3fca-bf02-19dfb609f2d0" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRA2012-DIR-4_1_c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1579886536" lang="cpp" violId="8f000ab8-6a13-323e-a3b5-34ce86d94841" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="f3cbc908-6d4c-3461-a7a8-ba81e27054fe" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRA2012-RULE-1_3_a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1579699948" lang="cpp" violId="931e1e0a-6ea2-30cd-b29c-9fee061bd900" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="ba7fe45d-0e4e-38c5-9d42-de5f671231c6" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRAC2012-DIR_4_1-c" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2109829747" lang="cpp" violId="45f13fa4-062f-371d-9938-81176b7dba74" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="f93c89bb-930f-3e30-8044-3faa97b67fba" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Division by &quot;shape2.getArea()&quot; which may possibly be zero" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" ruleSAFMsg="Point of division by zero" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRAC2012-RULE_1_3-a" FirstElSrcRngStartPos="0" lnHash="2070090220" ruleSCSCMsg="Start of the path" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" rule.header="Avoid division by zero" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1793694323" lang="cpp" violId="12a06075-ce2f-357e-a686-4d9d26047cb9" locEndPos="0" locEndLn="6" goals="0," locStartln="5" sev="2" locRef="2" tool="c++test" lineHash="2070090220" unbViolId="b511c1c4-5b7a-38dd-923f-63c6607f03ad" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props/>
      <ElDescList>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <ElDescList>
            <ElDesc lineHash="-392957557" ln="19" srcRngStartPos="0" srcRngEndPos="0" locRef="6" locType="sr" srcRnghash="1537905639" srcRngStartln="19" srcRngEndLn="20" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" desc="double getArea() const { return 0; }" ElType="!" rngLn="19"/>
          </ElDescList>
          <Anns>
            <Ann msg="Start of the path" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="2" locType="sr" srcRnghash="-1665970746" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" desc="return shape1->getArea()/shape2->getArea();" ElType=".P" rngLn="5">
          <Anns>
            <Ann msg="Point of division by zero" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="user" locRef="2" rule="FORMAT-25_b" lnHash="2070090220" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="2070090220" unbViolId="ef284a30-c392-3088-9b22-1320bf0bf92f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a376c70-5fe3-3323-babd-fb6115e2bc22" locEndPos="2" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="5" auth="user" locRef="2" rule="MISRA2008-0_4_2" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="80c3702b-e43e-32a7-999c-bda2cdd9a1c8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c0d5c14-79d2-3f5f-ad94-9f9d9d1e7d3d" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="user" locRef="2" rule="OWASP2019-API9-d" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="1ed851f9-5ff4-3b12-9bdd-ce54ae6053d2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf90f1cf-cace-39f6-b8c4-089378b1026e" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="2" auth="user" locRef="2" rule="AUTOSAR-M0_4_2-a" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="1825dfa3-9dfd-3b79-82dd-a271eed6a9f8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9e316e3-999c-34bc-b086-3467a6a850a6" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locStartln="5" sev="3" auth="user" locRef="2" rule="COMMENT-10" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="300ea0a8-bdb8-313f-83bb-20720596ec91" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8758f3c5-2bec-3d32-a546-ae1d1708eaab" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="72cb2ce2-de96-399c-b134-7b83becb1e73" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac75b13a-ab9e-362d-8c9e-c353370d4ecf" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="bd7f9ff8-7dc6-36b6-8eac-4d63f198e882" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53f217ba-57fd-353c-b12c-969632cf8f28" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="METRICS-31" lnHash="1233725276" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="1233725276" unbViolId="1e30c7a1-643a-309e-94bf-2fa2f4ed44de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73230c2c-52da-34c5-8628-c0d733ced076" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'MemoryLeak.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="NAMING-03" lnHash="1233725276" rule.header="Use lowercase for file names" tool="c++test" lineHash="1233725276" unbViolId="43cd8cc1-d3da-320e-8b17-6e582406899a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7ac2047-9c53-32da-9019-882d968b6cd0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="NAMING-38" lnHash="1233725276" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="1233725276" unbViolId="c94ce8fa-657c-36b2-b7ae-d89f2732f6a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bfde5be-a5d1-3254-ba8f-f8bce271c6b4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="5" auth="user" locRef="3" rule="PFO-04" lnHash="1233725276" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="1233725276" unbViolId="ee76778f-347b-37a2-958b-89f9f87bdcf4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a59e84c7-c7e8-3b7e-8be2-27076b71f0c5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="MISRA2008-18_0_1" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="012527dd-2d59-31f8-ac55-8b5b6c8289ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96b809c4-88c8-35ee-a285-d7d2251e5788" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="HICPP-1_3_3-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="0407df1c-b843-3579-921c-0e30e9b09b96" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af700c16-26c7-3976-b6c1-655ee655702b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="AUTOSAR-A18_0_1-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="a42b8122-27cd-3c92-a009-1ddca8c091b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="508c1a6e-9b3c-3976-8f38-1f306c76356b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="CODSTA-CPP-59" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="f0ec1487-75cd-36b8-b1a9-28395ff56f62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bf11324-7a4b-3e98-b5e5-d02f7006017b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="AUTOSAR-A1_1_1-d" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="48e35fe2-a84e-3b2d-a47e-198c956d032f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe00fe28-a1cd-3bc9-bf50-a11a155058a2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="COMMENT-02" lnHash="1233725276" rule.header="Provide copyright information" tool="c++test" lineHash="1233725276" unbViolId="c1480074-2c5a-35d8-8347-bf3e70570c23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04ac4825-419c-3bf4-b3fe-68463632411d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="JSF-133_b" lnHash="1233725276" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="1233725276" unbViolId="6ce577ef-128a-329b-9c9b-69af38dfc818" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e63b277e-bf03-3748-987b-6557ffa472a9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="COMMENT-03" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="2d50e480-a876-3bb2-b67f-bc0c6364b0ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26922113-5eb4-3e61-9a7a-f49e1d56e20e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="JSF-133_a" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="e07dd84c-70f6-3b65-9911-4619f7b151f5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19151946-dacb-308b-b975-d97e77087420" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Ensure that C Standard Library is securely used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="4" auth="user" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="70345903-2bbc-3d4d-9421-3a242533c56d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db294511-8eb5-3d6a-8e29-1264ae23c801" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="70ab9859-fcfb-3397-81f8-a02a88ead327" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4165da2-7f10-3720-a5e9-d322be11fe78" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="2" auth="user" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="ef71b308-df09-3e7a-9915-c0b377203945" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f75e3d7-b4f7-3dac-93a2-9a5715c482ea" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="1" sev="3" auth="user" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="4c07567a-97ec-3172-ab67-46e3f8fb1293" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad566d19-d2d1-3f3e-91e5-746d040b5063" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="user" locRef="3" rule="JSF-098" lnHash="-738024550" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-738024550" unbViolId="791f3a36-4aad-3725-9d31-09e08e19af10" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b43dfd52-62b7-38b3-9ad1-e600c06b7325" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="user" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="04594719-0629-301c-96db-59c85a14ef54" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7f86baf-811c-34a1-9206-d0f9427b310c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="CODSTA-CPP-36" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="45d81079-7f28-3ed7-98de-d6f68c2d1099" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd2a7828-e512-32d5-97d5-7b40ed15d932" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Do not declare the 'IOException' type in the global namespace" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="user" locRef="3" rule="MISRA2008-7_3_1" lnHash="-738024550" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-738024550" unbViolId="c2691463-ef38-3dd4-80d3-e4e671d0f5c6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6219f794-8994-3a67-86fb-e6ac136eeac5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="COMMENT-14" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="28378970-4eee-3e6d-a47a-49ca6ea210a8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0357cc5-220b-3495-8681-ea56c4fab004" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="user" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="59308d75-418d-3ec0-8e43-64fd041b9446" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85086ef5-9173-3127-b4a3-0e2a4a89fdad" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' does not define any constructors" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="2" auth="user" locRef="3" rule="CODSTA-CPP-19" lnHash="-738024550" rule.header="Declare at least one constructor to prevent the compiler from doing so" tool="c++test" lineHash="-738024550" unbViolId="e168748c-ec75-3457-976e-0dc9464702b1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3366de3-89da-3b66-94c2-1722d47d9220" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="4" auth="user" locRef="3" rule="AUTOSAR-A12_4_2-a" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="67a2e78d-eba0-36c4-9cfb-6497ea621edb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00ceb054-8281-3598-ab3c-36cc1b3128b8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="CODSTA-MCPP-23" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="faee3a8d-ad19-39b3-b0f8-493f620e57ab" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f012013-7b27-378e-be98-9406da9ea2a7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="d3049906-d666-373a-b73b-97733e93222f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3c669da-c669-341c-a2e4-847bc8ceb28d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="3bba5785-75ed-398a-98ab-cfcf4e210131" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07a08ce2-c221-33a9-8646-a2b90d0d2c7a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="ebfbfbf8-f439-3e6e-ac4f-70c1a4bccd25" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff5e04bb-d697-3510-874c-8da00583ffd0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="f419cde7-db3b-3985-942b-b3101034cf22" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81a19d8e-cca6-3808-af26-7b55a1339a33" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="b6965c4e-d29a-38bf-ac86-20262f385a8f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef83b4dc-0a07-3ff4-821e-a37c5829c2ea" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'IOException'" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="73df5539-9d83-327a-b51e-85d02df36f55" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="953596e7-88bb-3919-83d9-cb08323b848c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' missing assignment operator or special comment" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="MRM-04" lnHash="-738024550" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="630ca55e-9439-3c29-be35-16f19421e608" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2831c6e-15f3-3562-887f-97e72efca666" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="Class 'IOException' missing copy constructor or special comment" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="MRM-05" lnHash="-738024550" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="e1a42f28-16b2-3471-bdf3-956b7e649eca" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e444f79-1297-39c9-b8c0-33aed157ec53" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="All letters beside the first one in name 'IOException' should be lowercase" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="NAMING-40" lnHash="-738024550" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-738024550" unbViolId="a221dd9a-1c18-37ea-a866-0de055eae92b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="715ae393-88d8-3c18-ae69-196cefb3852d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The 'IOException' identifier should have the 'C' prefix" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="3" sev="3" auth="user" locRef="3" rule="NAMING-HN-19" lnHash="-738024550" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-738024550" unbViolId="3eaee734-9bae-3092-b10a-f1c28c10058e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d52b79c0-3dcc-35e4-95fa-05c619729d75" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="3335da05-9ae2-334d-aac9-043313a3a23e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea7fedf2-7f0f-3132-acd1-b68a0bfcaa08" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="02bdc106-aa38-3dbe-8ae9-f739e0b6b567" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1763cd10-cb79-3f6f-965b-0d46da03174a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="6435d0a2-9cc8-36eb-bd87-a572650f18bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa18f1ee-c80b-31d5-a6f1-f484dc7b92ca" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="41c7cbee-a0b8-34af-ad7e-caad6127e435" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de282dd6-d66e-30b7-84d6-f9ed54d339bc" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1086168919" unbViolId="6eddf022-b112-30c1-8b0a-12460f1e0c2b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d66d3567-5b69-3888-8ed8-54502a93e643" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="b0ea8fd0-4c1b-38b6-8801-e49b82008e5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a716755c-1c91-3464-acb7-6a8b72b464ff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="3feb5036-ed7d-3047-9730-2c1dd144aabf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="479c63c6-5edd-3dbe-8660-3dec5abf53c0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="13bef3ce-1036-3001-a977-283755ce5360" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfe8682-d5bb-303e-b318-3cd9eeed46ee" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="c3febf87-3f7a-33a2-a530-676f3d090800" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4f951b0-de83-35d0-bab9-8823e59ef4cf" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="d7e069fe-e187-3c70-9145-18663a03e688" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07057bdd-bfde-34e0-9fac-e946a30a8915" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="COMMENT-04" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="c994a6db-9c34-37f6-910f-118089855a78" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23622ab7-da6e-3c23-9250-1a0743de0675" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="JSF-134" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="5af00930-b39f-3f25-a9c6-a8aedc0fca05" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0ae3ac5-5e9b-3582-a997-38c2addc4d7d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="OWASP2019-API9-e" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="be1db83e-019b-34e4-b450-6ed426338ae5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="462b1151-73b5-3a77-adff-b74810255c4c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="d858cab3-ccd3-3656-af6a-b399155aa744" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dfb6d8e-f2f0-323a-b5c1-b65d9d3e8912" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="JSF-137" lnHash="-1086168919" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1086168919" unbViolId="3078772c-ccf0-3055-8eca-3a78c49075fa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95a43554-0bca-3116-a429-dfb1008cccdb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA-023" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="934bf194-5766-3c5a-8a4e-bb65a461e752" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de52e501-8f64-33aa-826b-eb8ea38319ec" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="MISRA2008-3_3_1" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="b408f530-c545-37fe-87d1-fe47effffec0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="166e063b-8b5b-3674-99e0-b7d52734c35e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CERT_C-DCL15-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="3ba77954-de55-38c2-b221-85265c384102" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73afc356-f713-32c8-a07d-af967e9f7f66" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2004-8_10" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="26942992-dc23-3775-9e2a-37fa9c32e825" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f06be93-d637-38d3-9e25-6781a40550de" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="JSF-051" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="35fe8cd2-48fb-3aef-b5e0-4c24b1e96c00" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="426c083c-210f-3c53-856e-53188a81cf3e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-44" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="4e0e74c0-beb4-3bc0-89a2-41d0ef5d8f5e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b7c0b68-471c-39c6-bb7b-3b59273f658f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="JSF-098" lnHash="-1086168919" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1086168919" unbViolId="70c21715-0e34-32fa-aefe-cbbb890b9cf8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3abbf20a-208e-32c8-9cbc-fff4a98a241d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="74d2d65e-4e2a-3213-9922-3e60d230015f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65d37852-3726-3aa8-8829-ca4cc45614c5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-CPP-36" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="26b7a918-ed33-38a9-8e6a-4120606c1f23" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30a205f0-8da9-3ec2-a8b7-e4110dfe2e62" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not declare the 'readIntegerArray' function in the global namespace" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="MISRA2008-7_3_1" lnHash="-1086168919" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1086168919" unbViolId="8a833445-2eb6-3fa0-91d2-fc0b30ad7292" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="312f887d-2f79-3066-9279-1d79902b02c3" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="eb926f47-1677-3759-a2bc-bc4097bd3285" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ead810db-1ce6-336d-bd35-e23193fa2920" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="5b7c0898-9d93-32a2-a75c-cdec47e21aaa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fed8909e-ae0c-3bef-81af-73c944eb5a3d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="COMMENT-14" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="aae483fd-6ba7-3860-abc3-afcdd08a63f7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1a48638-fb75-3ece-a511-762fce1cc34d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="c2709afd-6715-3297-9876-5bed70633d80" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e5fd3ad-984d-3a9d-b8c5-bdf1dc76cf03" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="08391ef0-7cd9-3a6f-ad30-160617698f36" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91d80804-474c-3b44-b611-280b0e2fed3c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="c4a70309-5478-337b-b853-9f5876d79ae5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eab125c-b107-3262-beff-7ced28b24fbe" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="dfc39a5f-f37a-30b4-8e4d-fb2ec87bc6df" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ba3d1f3-7914-3f64-9f9b-d6bfaaf1f6bd" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="674c5d56-3cd0-32a1-a8d5-90fe5b48112e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e43f1f2-bcb8-3fa5-836f-9b6555e6a85c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="dedca02e-93c8-3e14-9eac-a58c436fb787" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c2f12b-fdb3-3354-9f9d-1b565e9a55be" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="b913489d-646c-35ae-a8b5-f1fbbdde8cc3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="827a9a7d-c813-3330-b86e-b6e1127b660f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'readIntegerArray'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="FORMAT-28" lnHash="-1086168919" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1086168919" unbViolId="799e5da6-e4de-3665-8bd1-20c18507c7c6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9236189-dac0-3bff-bfa0-0f0eae80918c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has Cyclomatic Complexity value: 3" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="user" locRef="3" rule="METRICS-29" lnHash="-1086168919" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1086168919" unbViolId="d739ae0d-6686-3cf9-92f0-fc4bfa807044" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b649b407-14d7-364e-a16c-dce1442be8b0" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'readIntegerArray' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="5" auth="user" locRef="3" rule="METRICS-33" lnHash="-1086168919" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1086168919" unbViolId="27b3dbb5-e131-38b6-9be2-0c25b05bd076" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb981fac-dce9-3e74-9d7d-62d4d30827fb" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: readIntegerArray" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-17" lnHash="-1086168919" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1086168919" unbViolId="780ac900-6710-3513-8d93-9969dc683a3e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5095b75-2f3a-3dad-9e18-efbcc02da142" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="GLOBAL-UNUSEDFUNC" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="4915eea2-3c4b-32ab-86d9-ce3649197fb7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8d7512c9-a018-37f9-bd47-2f3fb9643c7c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="AUTOSAR-M0_1_10-a" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="4339592d-da9c-3ec7-8de7-f62116186f66" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="342327cb-1421-38f2-9cd3-b2c52a99f04a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="MISRA2008-0_1_10_b" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1086168919" unbViolId="23c928da-b8dd-34b8-8a28-e961c6da350c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e2b8599f-ce75-3d7a-a684-93e92d1748b4" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The return type of the 'readIntegerArray' function should be declared as 'auto'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="CODSTA-MCPP-08_b" lnHash="-1086168919" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1086168919" unbViolId="da68116f-6114-32d2-888e-444693a2d88f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="406998a3-0911-393d-9302-ef577b88ac4f" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE.h'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-45" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="c04c6c5e-101a-37f0-a159-e2ea7326e027" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ae6d06c-09ae-31f3-acf2-06c751d86103" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'FILE.h'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="JSF-048" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="c3232543-0d4c-3a9f-8d56-55c7c95606cc" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af0afc65-7549-3256-9673-4301f2263917" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: file" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="b338741e-e5fe-303a-9510-4ad2f40ec6d8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f4e1500-4f93-3f2e-80ca-7f8516d35261" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: file" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="c90588ac-b053-34e5-900a-3a01533d6fcf" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b35fe6d-9a20-33e9-9fbf-9591b5bc9609" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="MISRA2008-2_10_1" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="e6526b12-6472-3634-83c3-5b208482347e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39241f2b-1978-3d55-90c1-c1c1a289622d" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="HICPP-2_4_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="8b4dc9ed-a51b-3cb9-9d74-bab7fe9b225c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3779a4e8-2c2a-3662-bc51-671297b04fe1" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-M2_10_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="8288c72b-e473-337f-ac32-0d405761b28a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fab1ae86-dc41-36d0-ae4a-db0bcdc130db" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-47" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="7d193d85-3072-3f69-8c18-9946de0fcddf" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92d19fe8-45e4-3fc0-a303-b1eb5c7b3890" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="9ad3318b-7336-36ce-950f-07cdcd7be1a2" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2207dcf5-92d5-366a-a57c-0881302da838" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="26b05836-02ed-3965-836e-6209466e6b3b" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="838cbec5-f076-3ae3-8133-f287af4a7df8" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'file' identifier should have the 'p' prefix" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-HN-34" lnHash="-1086168919" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1086168919" unbViolId="fdee8c62-ee8c-3187-9079-abdd78fcd3a7" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8a25789-438b-3415-bf71-682d337b6047" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="97c06ade-e749-3da0-8b5a-770a5609d4a4" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d9c2ac7-b548-3361-a858-1268a55ea633" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="243e6e7a-2be9-3982-a19a-d4e01500608d" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49437096-0244-30b3-8b2a-9d52b9fe37f0" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="c254100c-2e13-3ff8-a1d6-7194bc0a6dab" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e121eec3-606e-3e93-9cd4-363fd8c7c8a4" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="1c28737d-38a5-3466-b06f-e78479024ae2" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78a2e11b-318e-3e06-82fb-683f2bba226b" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-1086168919" unbViolId="6259623b-4569-3590-8ce6-9b8ded10c4de" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a64e3b2-1857-384e-811b-1aa949209f70" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="d2610d7a-d070-3a98-8dea-dcfe19b729b1" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e54e365-414f-3835-99b4-7f49f320686a" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="cbe362f5-035f-3a92-8f44-e28c6b522ad2" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41cc465f-809f-3c3c-bebf-c8da92b9fcab" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="c7a69b2f-0a64-3f5c-804b-d39efc7ad35f" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3228885c-bbaa-3b86-a36e-19f71730f9ea" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="effc4cff-ec22-3d68-b39f-0132bb3b7811" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="198fd472-c752-3f19-b427-34b0018299aa" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="77da1f97-87ae-3e6c-8d55-675c819dd682" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edf2d398-dd42-3a25-a2e1-f840594e3ddb" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: pSize" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="b8f489fd-3d9e-3db3-93b0-389194a8bc7b" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e149aa63-bf95-3d97-9a48-4af027ab0d79" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: pSize" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="46c7d5ce-0df7-3b9f-aae8-bc7d8e9a6ffc" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd59edd5-7a6a-3e16-b423-26c2a5962681" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="523ae292-fa17-3aab-975b-23fdbb1facac" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ac5698d-f823-3938-9069-476f00e24ce0" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="6cbaf8e4-33da-3eb6-8c3c-dc58d5779d22" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5192d321-848b-3ea4-91fd-5889b6ad311a" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="AUTOSAR-M7_1_2-b" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="b4039f8d-9b2b-36dc-a8b3-33f873587d40" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dac6194c-4215-3ac0-992a-ee2e5915d158" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRAC2012-RULE_8_13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="4701b2f2-1d32-3724-ae5f-657987f8cb69" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cff0152b-1596-3b4d-9ad2-730d3ab53fb0" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="CERT_C-DCL13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="7e2b722c-f8b2-3ad7-a11d-fa231ba2c9e4" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f23b2f4-f3e1-3136-80e0-9ae3ab2b672c" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="MISRA2004-16_7" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="74f07a29-ddc2-353f-8639-75b4d93f4166" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dd068b0-b268-38ce-9dd0-6382fe8f8443" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="d039359c-4bac-36cc-8000-5c4707eb2a7e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="406f00a2-c74b-3c38-bc6b-4de96737f4a8" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="4" auth="user" locRef="3" rule="JSF-118" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="4ec993c2-cd5f-358b-9ba6-c8c601bc4d91" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7de046b-78f5-3bf3-901f-f16eb1f8514d" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="2" auth="user" locRef="3" rule="MISRA2008-7_1_2_a" lnHash="-1086168919" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1086168919" unbViolId="32bb1538-759c-3ed7-8dc6-6cee1af9f753" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ca52fc6-1a99-3000-b5c4-102273ff98bf" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-HN-23" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="6d16562a-913c-310e-b7d8-6c9dcc9f7c03" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0b95b7a-7595-3ef2-a3c4-ad8a2cb074f7" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-HN-31" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="5a0f3bbf-0eb3-31c7-a6d8-30e974da0f0b" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cc72630-e255-3322-be4c-1b596b24e6e0" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="5" sev="3" auth="user" locRef="3" rule="NAMING-HN-44" lnHash="-1086168919" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="498d5d6d-8eb1-3fa0-bf5c-1db23e59e7e8" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcf3dbe0-2895-3176-837b-5ea6ac4dbf43" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="6" sev="3" auth="user" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="249d9278-0b1e-3717-af8c-68fef35a2ef9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74094a53-cd9d-3562-904b-22ac3fa2f8af" locEndPos="1" locType="sr" hash="1013754779" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="-1844934654" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1844934654" unbViolId="c7c9cb3a-6548-350e-8f44-f50b598e55a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d769274-572f-3b4b-ba70-92ad622c40a4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="5d4d205f-3d4e-3a0b-8b61-6650a87bd0b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="968e012a-c473-3438-bac6-ce98e72dc93e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="e2f1e5ec-e417-3d41-a96b-4720fe82e965" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2240a176-44b7-3a20-93da-55520f4e9737" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Value returned from method &quot;fscanf&quot; should be checked" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="CERT_C-ERR33-d" lnHash="-1844934654" rule.header="Always check the returned value of non-void function" tool="c++test" lineHash="-1844934654" unbViolId="dc1cb414-c37c-3b85-b0cb-ef5080ba5a5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" lang="cpp" violId="18cda19e-ee10-3e15-90e6-6ed0d711b874" locEndPos="0" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The value returned by the standard library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1844934654" rule.header="The value returned by a standard library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="c69c58bd-27ab-3c2a-8cc9-3500c55f3010" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ee24a9b-d90b-37ec-8ce0-e362acc3a542" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="APSC_DV-003235-a" lnHash="-1844934654" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="624fd7e3-901e-3955-b8e4-ac6b0a7f4185" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06384b67-641a-3b5b-b137-b4dd5a94950e" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The value returned by the POSIX library function 'fscanf' should be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="CERT_C-POS54-a" lnHash="-1844934654" rule.header="The value returned by a POSIX library function that may return an error should be used" tool="c++test" lineHash="-1844934654" unbViolId="84364b37-ee1f-3a74-8039-8c9ba66cc93e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90c7c29e-1005-3269-9e41-124d30d7de33" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="AUTOSAR-A0_1_2-a" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="ccc09619-ead4-31f3-8147-260f64be5c48" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2679ebb3-83a9-38f3-9086-787a422b8313" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CODSTA-CPP-58" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="75aea3a6-cb47-33f7-b7b5-b1871e6faa47" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49829caa-e90a-3900-a49f-b577d5fe9c09" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRA2008-0_1_7" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="26bd283c-d37a-316f-8573-603fd35ba2b7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7472543a-8e16-3e32-9176-2ccd49ef986b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="4" auth="user" locRef="3" rule="JSF-115_a" lnHash="-1844934654" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="e95aad97-f7d8-3245-a68e-4aba9a8643d0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f406ed35-64c1-3362-af8a-736465aeded5" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CODSTA-122_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="5fae575e-a60c-3970-b00b-40f1c1e3e1c6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a46efd0e-14a2-32cd-b0d9-c8010cd696b2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="a975bd60-1898-3e3a-adf1-fc5993c848eb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="826c912b-d8d1-39a3-84b3-23be73cc4695" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="87e8953a-8339-3870-801c-6b46dbc6ca0b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33a96136-2fd5-3611-8512-74ec35e12eda" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="fa5e3796-d14a-345f-abb3-991e86cd40f2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea91fe77-4ace-3d51-ab41-c0e7feff6ba6" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="MISRA2004-16_10" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="36e5deef-4ef7-3f13-90a7-2b7e406ad607" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13b73f8a-86a0-3025-a3b2-1c7b32096d46" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="113eebfe-2340-3c0d-9fea-854cb6686bad" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1746c33-f347-3246-95ad-fb94f127197a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1844934654" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="6bc62d96-b5c0-3ea6-84b2-685e0c614467" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f39a6f95-ce68-304a-b311-a1c5e1955900" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="JSF-115" lnHash="-1844934654" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1844934654" unbViolId="d877a0c2-ddc4-3195-809c-fc8cca9605ab" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66cdc37e-d32e-39b2-b7f4-196b8e3bc9ad" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="APSC_DV-002390-c" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="2f72d1a2-ce56-3428-b7a5-461bfc6007c6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15c0446f-4b1f-3d16-ad68-6a9badfd90ae" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="SECURITY-14" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="e174d06b-e561-338f-bc8b-65559f551a9a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="171a96bd-a939-3a17-bb28-b69ea45016c5" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer iostream.h to stdio.h" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="user" locRef="3" rule="CODSTA-CPP-01" lnHash="-1844934654" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="-1844934654" unbViolId="36d5c800-f7ad-3ec2-bf9c-41a943d7d582" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7327aac4-8eda-327b-b3de-44ed58ff8f7b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="CERT_C-STR07-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="24767e7d-e924-341d-9922-1042f0f397de" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6efa9d03-d1bb-3116-b469-9e2303edba23" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="c2acbcb2-0b4f-3eba-b8b1-ebe4630e883e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad1a579-c3a9-3da7-9567-08e3d021eca0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CERT_C-INT05-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="da967002-b462-3356-87d2-8f0f809fd424" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0f84f90-b386-3ba5-acec-06cdae46d384" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="SECURITY-13" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="3c1da146-bc9f-31cb-8020-e320cddde86f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09248566-0eb9-31ed-83ec-adf9714e11f7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="4334dab2-56c3-3890-aa5d-df6b81a22619" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6c749a4-fe33-3dcd-9f6e-32851c496825" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="6fb1a852-59e1-379b-854f-b053dd2c963c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5593da7-4151-3220-9490-00ee10847b89" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CERT_C-ERR02-a" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="b38dcd98-546c-3361-8b19-9f6b7ba91ac2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d41402e5-f147-38c7-8d18-595cfa450663" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="CODSTA-110" lnHash="-1844934654" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="-1844934654" unbViolId="3dc5d77d-e446-3b03-9afc-e771ab388e7a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5a4db4a-b4c3-30e0-84fa-ea0100d993b5" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="user" locRef="3" rule="CWE-798-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="025cbd91-ab33-3585-811a-4d9353ff5676" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a1f4c0d-51e5-3f7b-92dd-c94b1b4bed57" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="5" auth="user" locRef="3" rule="CODSTA-203" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="b2892a53-a2dc-3afa-9229-16a1fe87337e" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d778b9bb-c1ab-375d-9424-edb8f073954c" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="APSC_DV-003110-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="8813261b-f7d2-31cf-887b-2a7e4e59bb09" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98d3e557-11f5-3271-9515-dad1ea70e7df" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="1" auth="user" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="414ec16a-42cf-3efc-a1f1-6b304f9432e4" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a745053-6003-3df5-91a7-1ccb9eaa47a0" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="2" auth="user" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="8667d133-ebc6-322f-aa94-1fd5029da841" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e733b548-48a1-3e49-86f6-71aad06d3e04" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="7" sev="3" auth="user" locRef="3" rule="PB-76" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="c25512d3-9572-3c48-a2a8-a746f23bacf3" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d27ef5c5-33cf-3397-ab98-fc77d75a15e8" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="1773312110" rule.header="Tabs should be avoided" tool="c++test" lineHash="1773312110" unbViolId="68bad1b6-f334-3797-9e5b-6b29726121c4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87b1a9fd-1807-37e7-9eec-5b2ad5f284d1" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="95bc16d3-90ea-31cb-9486-60f86969eaed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d36262fa-36ee-3a40-ba74-5e0b51a4411d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="08ff75eb-2b60-35d3-8b32-59ed67a0bf69" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed2e44b1-9191-34c1-bfc6-0b39c1287144" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDALLOC" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862528737" lang="cpp" violId="6990902d-f9de-3f98-a926-8b7fae60b0ea" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="d2a63bf1-f581-31ff-98ad-af26f40b8c12" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="CWE-770-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1466367756" lang="cpp" violId="a5a9821f-dcb0-3a85-b639-be5ccb00d019" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="a2aa8c37-c3c0-38a4-8d00-ce9419973547" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="OWASP2019-API4-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1519224323" lang="cpp" violId="1d254fa4-7e27-3b47-93a8-eb44b991d6f4" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="7c897b2b-5287-3fd5-9ead-2b9914778808" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="c8805dc6-77b5-3b47-8747-61e16a8c8449" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33a5b71c-e8c3-37f2-8008-cc938b1be36a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="f56ddb4f-2de5-3623-9a57-a50c18aa1b5a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53c90e59-4e54-351d-92c1-c476137511a9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="428a1948-e3fd-3895-ae65-661a9cb91187" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b59e3c41-6e1f-3eb2-95fa-719161e649e5" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="301dd7d6-4a51-3137-9045-e2a53f6a610e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2c103fd-4f55-392d-9711-372d15c4a736" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1773312110" unbViolId="08d096cf-92ef-38d1-ba6d-c1700f2b1a6e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b28a893-81e9-33bc-9334-94ffc592b437" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="2bdcca6d-20ed-321a-b37d-4895bd02e8bc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="671bf36d-7952-3af7-82e3-97e273a364c1" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="e4bbae44-d138-3c1b-8ba9-75e7506588da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb039780-517c-3bbe-b26c-87eb66ccaae2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="bff48475-57bc-32f0-b75e-d7fc351a9c2d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee156217-926c-3d29-9565-8f438738f23c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="972698be-2c7f-36a7-8460-4a1eacd0fa10" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5e17c59-5945-3949-b350-4daceab534bc" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="75bf1478-c52f-3a60-b16a-4b8a422cf6a4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567aafe2-6e48-3816-826a-64527efee906" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be declared with the 'auto' type specifier" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="CODSTA-MCPP-08_a" lnHash="1773312110" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="1773312110" unbViolId="353ccf7b-900f-37f7-a544-e152059da07b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0156dc1-3386-3922-9cae-a0595c3d974e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: data" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-94" lnHash="1773312110" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1773312110" unbViolId="b77d4b92-73da-30c9-aff1-acf684aab61a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c63d60b-c062-3e64-ba9d-2b3dd5bcd8ad" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: data" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-95" lnHash="1773312110" rule.header="Do not declare pointer type" tool="c++test" lineHash="1773312110" unbViolId="fddd3ce4-018f-3a96-b930-40bb6398d07e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1229feff-f9cb-36db-825e-6a3c2f37e9fd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CERT_C-DCL00-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="556e9446-877f-38ef-8353-0aad44b1b1c7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b28065bd-a3e1-3968-9d0a-c7b6fccfc817" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="6ec946e1-662a-39ee-9ebd-1df4060669d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ede38279-2c1f-311f-b67d-6d488881c118" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRA2008-7_1_1" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="39eb1774-639b-3a3c-81dd-d800b75e4dd4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd7861ec-f518-3a39-b7db-2b5f82f61157" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-CPP-53" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="4f7e0a7a-ca48-3f3d-b68b-9b149c1b0b85" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c98f8695-594f-3d88-a8af-b4c506e77dcc" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="HICPP-7_1_2-a" lnHash="1773312110" rule.header="Declare local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="d7c27968-15c8-3f71-ae73-c1f4b81474cb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3080db80-2950-3da9-8542-7d4d9843c9ba" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="JSF-132_a" lnHash="1773312110" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1773312110" unbViolId="5df43693-999e-342e-8d0c-2fc5ee9423b4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64d86b9f-b695-39ea-923a-cf46f330bc12" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="COMMENT-05" lnHash="1773312110" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1773312110" unbViolId="6a622cf1-e9c8-32a4-9aa2-1b2dea2d8f97" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="702f698f-07d4-361a-ad50-2e9b2e533798" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MRM-34" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="2154e01a-2d32-315f-8b9c-841f01097216" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b44d0a43-073b-3466-af8a-78d11ec7f97f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="1" auth="user" locRef="3" rule="CERT_CPP-MEM52-a" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="5b005b1d-5626-3f55-9b42-56fd630fb995" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="612e8bcf-fb53-3627-8029-337d8c279053" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Naming convention not followed: data" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-22" lnHash="1773312110" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1773312110" unbViolId="c6f76f5b-d705-3600-81cd-5adc78eb26fd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7735318-fa72-3517-a0cd-92a1685092e0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'prg' prefix" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-HN-16" lnHash="1773312110" rule.header="Hungarian notation for dynamically allocated array" tool="c++test" lineHash="1773312110" unbViolId="bb1c5384-3382-34fb-ae7d-56ca443f356f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e022c6b4-eb66-3c01-8f0b-668a39d44dfa" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-HN-23" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="8ce9458b-6e7e-3458-acc5-ed6340908b2b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="371ceb6d-bd70-3c3e-9636-59ac137f023f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-HN-31" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="006c1a08-ff16-32bb-aa69-ade160b1f074" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae95474e-5d23-3c01-9ffc-531f5c3db1b0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'p' prefix" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-HN-34" lnHash="1773312110" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1773312110" unbViolId="8c8441db-8be3-3bc6-b58b-0e5ca0bc3521" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57d8d2a5-53c6-3357-a834-e47834995f59" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="NAMING-HN-44" lnHash="1773312110" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="b0ed3849-2715-38d2-8de8-4a644d743ba3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="746dcfe9-d51f-3839-a3ec-c14226f69a05" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="1d02e6fc-31f4-3672-b95b-3a0f673c2b3a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="266927c5-accd-390b-a3d1-c34f86f93ad6" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-MCPP-38" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="dd32f450-7d81-3bfb-9d67-3b1ecfd9159f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dfc8e02-7ffc-3ff9-b9a3-742a677ce393" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="1773312110" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="7c253c57-47f4-3fbf-88d5-c2b6a360b917" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba67ea1-5768-3ce9-b644-cc935c229dbf" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRA2008-18_4_1" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="10bad79d-fb10-3ec8-9e29-766a3c0cdf24" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2f1f2a7-9cd5-3b8e-8c3d-4f68f1681628" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="057b60cc-7617-3b21-a441-105db7cd2043" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b219c6d8-fd8a-3df0-8d7c-e2dc40d6377b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="625032da-75f6-3dac-a553-e3f3bb643d70" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="022d0260-4769-398f-87a0-cd4464a598a0" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="JSF-206" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="2a3eaca0-dcf6-3ec9-bded-5cfe76ee8047" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccdebcc8-ba77-39bc-982d-55165ffebbe0" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="1773312110" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1773312110" unbViolId="91e02688-3c11-3a05-a301-e5ec424a8b43" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33790432-7e7c-349b-bd23-d2ee57ccdd3e" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MISRA2004-20_4" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="a484fd5e-5a07-37b0-8a39-121b0689a1b8" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d084d565-6978-3793-8b02-fd866b95906b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="a44898a1-9068-323c-a710-02a9886e7eec" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b37ba042-996a-35ef-9cfe-031b974c263b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use vector or string instead of dynamically allocated array" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="STL-10" lnHash="1773312110" rule.header="Prefer vector and string to dynamically allocated arrays" tool="c++test" lineHash="1773312110" unbViolId="d87452c2-dc67-35f6-a9de-32fed90e2c0d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c498510-9e84-3a60-ba3a-c9ac4c10fa01" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="83f74243-3ee2-399c-b792-d425c2e51822" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ddb846d9-577e-3837-ba60-405a1acd0651" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="e78d6a64-ca18-3ffc-b166-e8601dd82f77" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b356dd77-2b26-3d28-ab01-252d26747862" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="8becdfe2-799c-39b1-b0d1-2d4fb6d90302" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b39ba9fc-466b-3529-b2b9-faae637b8995" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="0c38ae71-3e74-3487-a233-f4fce3391fb8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02bcf574-a0d0-3e3a-9b71-54a3b3ff2d1a" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="1773312110" unbViolId="ea99c154-97dc-3778-a269-a41ef60093d6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7bf8355-38bb-3827-9c61-b15821f04844" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="db09e844-1f98-321a-b61a-427ddc396721" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="998907d8-0f99-3e24-9aa8-6bc91382d34b" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="2" auth="user" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="9de797b1-9c4e-3105-a75e-3edf2abb11d4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61817670-eeb9-3eed-a6df-78e63433adc7" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="865696ec-5341-39fd-97b2-65f04fb4d44e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c505f599-2a7f-318b-a3ff-8c2694a9b5c3" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="4" auth="user" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="0820bf40-40ab-30dc-acb3-e671669fd152" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27366349-47ba-3d2d-91ce-7b594dbb44bc" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="8" sev="3" auth="user" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="ef429860-117e-3ce3-bc1f-a9388bf5f015" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d1671f5-30de-3ad1-ab6b-b5c4c45ac0da" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="JSF-061" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="c8aee152-cca1-332b-8921-6d8ba328ce4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="252267b4-0cdc-3649-8fc3-55e912c357b7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="FORMAT-42" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="47819d6c-5e5c-3b5f-a7f0-a401b85f8d42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cde3dacb-76bd-35e2-b418-3ad2c2886ee0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="JSF-060_a" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="4d484832-f39c-366c-8fe8-9fc8057a609f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a72a1a5c-3781-3707-a87a-efe026b90bb7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="FORMAT-43" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="7dcd7017-8f78-368c-b6e5-7203c2feef1b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26837d79-f8af-39a2-a759-d32d405d8624" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="JSF-060_b" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="d3a1ee12-ef6e-3ae2-9dec-09675e7563a8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d03ef97-c542-35e0-b0e3-f2df49f7f270" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="616861252" rule.header="Tabs should be avoided" tool="c++test" lineHash="616861252" unbViolId="448f4844-3ed2-301e-8b5c-7868c2e27815" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aac488c-36f9-36fb-90ed-8870317aeba9" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="64e07923-6931-3287-8d3b-b409fea1316c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78b47d8a-2753-33e0-aa16-af37fe20156a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="f7dbdddc-06f7-3805-9f43-85f03a86c6f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dbcc0a98-3d2a-3707-9129-f3703da45718" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="FORMAT-02" lnHash="616861252" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="616861252" unbViolId="6b5b27d9-9187-3dd1-b17f-de01ce439b90" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38fd8995-192c-3b3b-9b7e-d0a8055271f3" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used in a loop condition" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="616861252" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2054996746" lang="cpp" violId="bf2ef13c-60b1-3034-b3b0-9368fa991b5d" locEndPos="0" locEndLn="10" goals="0," locStartln="9" sev="1" locRef="3" tool="c++test" lineHash="616861252" unbViolId="fdbe62f2-7587-3f43-b100-24db27e393ea" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Props>
            <Prop key="Tracked variables" val="pSize[]"/>
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause"/>
            <Ann msg="Tainted data: pSize[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType="!" rngLn="8"/>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType=".P" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="pSize[0]"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: pSize[0]" kind="var"/>
            <Ann msg="Tainted data use in a loop condition" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="CODSTA-83" lnHash="616861252" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="616861252" unbViolId="657d866c-a4a0-3f89-bb7e-83867f064964" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f3d1544-863d-3090-975c-2e1f9f606258" locEndPos="2" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="user" locRef="3" rule="MISRA2008-3_9_2" lnHash="616861252" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="1b618b35-e8e6-3e1c-b0a9-558625361014" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="991e8268-928c-3f54-baf1-ac805fb16dd8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="MISRA-013" lnHash="616861252" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="616861252" unbViolId="e3a5cc23-7e87-3113-bb44-c1ca78a4d2aa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97dc94ac-5eee-39e0-b833-e21e847b9021" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="CODSTA-223" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="fec799a8-7874-3050-acc1-4441e6062f7e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b703d286-8c5b-390f-ad02-72f5504919b7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="cb15dd51-1bba-3ba8-a93b-2bea34788b39" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62197266-1c4e-3ebb-abef-04e7e14db5da" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="HICPP-7_1_6-b" lnHash="616861252" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="616861252" unbViolId="de674751-940b-3714-8f5f-b576be29e2bd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0ff6c7f-402c-3895-83aa-1fb1bbe3d463" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="user" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="ccd76f8c-cf76-32d9-82bc-200890eb9ed5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe0ba66e-e674-355a-a5c6-2432d1e8746f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="JSF-209_b" lnHash="616861252" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="4e978fd2-ade4-3c5b-9695-4c9529beab7f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="824eb465-3648-3d68-98e0-bcc4cb59f52d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="MISRA2004-6_3_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="ac84c6e4-3255-3440-91f3-3a2f38ac3e05" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46cd592a-4627-3675-90cb-1a56702a3658" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="4" auth="user" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="7fdf457f-fec5-36f1-9aa1-deec80e7367a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ec53948-2a15-3f75-b1a3-eb88c5e33604" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="HICPP-3_5_1-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="b31b666d-7f25-3d5e-9912-35bfa828bbcb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bd8d570-282d-3480-8462-9adace25ab31" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="PORT-13" lnHash="616861252" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="616861252" unbViolId="e346a7f5-5f94-3e87-81fb-eb159f2e0f5b" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af79ba3-8920-35be-b4f5-d0ffccfb9205" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="JSF-132_a" lnHash="616861252" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="616861252" unbViolId="c500281f-4034-3a5a-925f-d6cb1ea50969" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d1c0655-c6ce-35ac-bbbb-318c947e35cc" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="COMMENT-05" lnHash="616861252" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="616861252" unbViolId="00dab5c6-7019-38af-a310-b99e6d50594a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e55693dc-8a13-3a94-8da2-a03f13aa9ec6" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="0673a277-1ed8-31b8-ad21-bb259fd421a2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11bafbdd-8aa1-3a63-94c6-283a83d0a7e0" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="CODSTA-MCPP-38" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="3c82e1f9-c4d3-3ced-8432-66c6f3e48a68" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05e34e0-32c3-334f-a6ae-fddfd2dfb324" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="user" locRef="3" rule="APSC_DV-002560-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="465acab0-6136-3271-bb7e-0b2011ed574a" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="741fdfce-29d7-35c3-b14b-e98c2ea97bae" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="1" auth="user" locRef="3" rule="APSC_DV-002550-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="8d33b60f-3814-3b6b-a53d-66c35ec89497" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94e322cc-d0b9-3158-aaa4-91fff4b49791" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="APSC_DV-001290-b" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="1688df94-1a73-35ef-a021-84a072116766" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db8c4166-8953-3ad6-aff2-62bba78c0d34" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="SECURITY-38" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="e3f52001-f4f0-3865-8229-c82e3e03a490" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26db1e42-5eaa-3af9-8f16-d972846eebfe" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="CWE-20-j" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="e08fb7d8-9a86-3901-8f45-9f49271b4edc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6549b1f6-d4a3-3c84-9e70-b11718cd0a09" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="APSC_DV-002530-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="ddc05e84-67af-325f-9b91-6cbf3a96ed01" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e49ef74e-ac6d-30ec-842e-04152d774725" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="2" auth="user" locRef="3" rule="APSC_DV-002520-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="0591e211-7faa-3556-9cf1-038046459c74" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aae87803-3dcd-3237-acbf-8f57b39a6f60" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="9" sev="3" auth="user" locRef="3" rule="OPT-04" lnHash="616861252" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="616861252" unbViolId="2c5383ee-99bd-3ab6-8f0a-7be8c1d42235" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55185477-34a5-335c-bac7-a5d4cb347d8f" locEndPos="30" locType="sr" hash="1013754779" locEndLn="9" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="JSF-061" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="5f8b373c-3fa9-3fa6-be7c-da50d6c50cd8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7d69e7b-731c-3229-98c8-1ca67393f4ff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="FORMAT-42" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="7941b4d5-67b3-333b-a7c1-30c5150f1991" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a756843-3146-3e11-91e3-725546019933" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="JSF-060_a" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="e3df1c62-f801-3e06-bf90-06cf6a0bdb94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08aaa660-3eb4-3e8a-bf74-4aa00b925a8e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="FORMAT-43" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="67462a2e-bc8d-31a7-80c5-fb63dd886a2e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cead9c8-c6af-37be-b402-7bf7e16d7791" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="JSF-060_b" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="99ab1e1d-ffb0-372e-a9c8-e0b6496090be" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95cc87a3-6e2d-37b1-8677-61293093d9af" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="fff763cc-d736-3675-b3fb-db95e53b6d65" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22df396b-9620-3417-9d9c-8687c7e041f6" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="38a6ea4f-cc7a-371b-bd49-ab2a8d34edc6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="349e5d6b-382d-31cb-af79-b19bf8315089" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="425dab85-158b-35bc-bfa3-569d5be3001b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc76e246-9482-3244-9bf0-76662fc345ad" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="FORMAT-02" lnHash="700522989" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="700522989" unbViolId="8fddb422-c045-3019-a5e0-8a16cd559e0a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b24ef7f7-9552-3696-a4c6-9e434b339db7" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="27db80cc-2da1-308b-98be-d17902995585" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4024f2d5-20c5-3a3b-a0f2-deaa2049b5f9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="6d3d990a-6d17-35a5-a79a-0694cec96e06" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bddf2f50-8d1e-396e-8e02-a99ef22ca0e3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="7a84636c-e97a-3266-b1c5-e4e43f52545e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fc042a0-6628-3e78-9468-eb8214add0b2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="CODSTA-23" lnHash="700522989" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="700522989" unbViolId="2838647a-0570-34ec-bd04-2ccb94247d42" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c834a0fb-e41a-303e-8df9-4184085f086d" locEndPos="3" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="APSC_DV-002390-c" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="013c44c4-25cb-38b5-94a2-78cdd2aeeeb0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1555c770-8cee-3e4b-b56a-133f5252cf30" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="SECURITY-14" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="85cac63c-ee15-32db-a6d5-d6e65d01384b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3be3d30-3257-388b-80d1-2c2c649ca0f8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Prefer iostream.h to stdio.h" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="CODSTA-CPP-01" lnHash="700522989" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="700522989" unbViolId="e4ed2e24-5633-399a-a300-d355e2e4ff57" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bbbf659-4842-3aa7-bce0-5462845c717c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="user" locRef="3" rule="CERT_C-STR07-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="a133ebe7-fb57-3740-b0fc-466b941fa32f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef3d503c-f01a-3a2e-865e-f0593ce4e289" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="d67b6733-4491-321d-ae6a-4d6fffa023d6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f294dd4-1f1f-3f83-8d6d-cff3188c95fa" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="CERT_C-INT05-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="24c1b228-1189-3958-ad1f-7c9aaa4f20ab" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="055ccfc8-e20b-379b-92e6-e27d792f20f2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="SECURITY-13" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="b4690e84-0db6-3f16-97ec-7fb5788d6271" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15a114f0-2e33-382c-b02e-179f63b9ebc9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="993becd0-0833-31e4-a9dd-09c52370114a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abe9347e-f8c9-3fa7-9136-7ef9dfba770c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="bf628ee6-988b-3c8a-a062-84137717f23b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28e8f5cc-97b2-3047-8463-dcccb106b078" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="CERT_C-ERR02-a" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="cd63d2d3-719d-3e6b-abfb-f9300c2f89b2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f43de2b3-3297-30a7-bd18-fb32fc9e6248" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'fscanf' library function should not be used" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="CODSTA-110" lnHash="700522989" rule.header="The input/output functions from the 'cstdio' and 'cwchar' libraries should not be used" tool="c++test" lineHash="700522989" unbViolId="a5fa6bcd-5a6f-3d4a-aae6-e76192e698eb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6770d4b-8d14-31d2-80d1-4b82fdf5af55" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="CWE-798-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="f59f208d-3546-3ee2-92da-5e6dc96a269c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a9df644-9587-39d2-9ef8-5da23c5d7a66" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="5" auth="user" locRef="3" rule="CODSTA-203" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="805db63c-b66d-3769-a244-df3ad11de9f3" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ab65732-b141-388c-bc81-cf82b6fb41dd" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="user" locRef="3" rule="APSC_DV-003110-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="9463152a-d54c-3507-ab55-bae0c7f34206" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4122fc6f-8c21-3217-8d86-0750c4451eed" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="1" auth="user" locRef="3" rule="CERT_C-MSC41-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="73136fa9-16d0-3d4e-8a85-820f44c6b10a" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1410f37-b6ef-3a01-9847-2d97d6bd6dd8" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="ba5d9926-a772-321b-9911-1fa84d613e6a" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="256100ad-4e04-3195-8eba-303c31ffc0dd" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="PB-76" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="c9e1811c-aa83-3e57-9fa5-cb48a4bd558e" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73eb4372-adf7-36ab-8af7-ec1e46407b05" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="3" auth="user" locRef="3" rule="MISRA2004-17_4" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="46f6aa5b-4fc4-3691-b6a8-c95586217c95" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa18ccd4-0595-320e-be23-0eaa22737b2b" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="MISRA2008-5_0_15" lnHash="700522989" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="87774edd-8868-3df5-beca-bdd5f867e922" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb599fa6-5713-3a97-8bfd-a19b05f34672" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="10" sev="2" auth="user" locRef="3" rule="AUTOSAR-M5_0_15-a" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="786a8902-115b-3218-901c-279a1ef2004f" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="347d3916-77ed-349e-af8b-618c0584edf3" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="becda0d5-8bf3-3d5a-b2a9-47ec74aba1de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de3745ff-17ba-37f6-840a-f7cf3d046546" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="deed7623-3a5f-391f-b75f-d4b4f3de625a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="634ade89-e6ab-3b8b-ae80-058d25a7c0c2" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="98c058ba-84ce-3da4-882e-36170836b714" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a0ff2df-9f57-3cd5-a2d7-30e0a586c0ed" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="8c986e60-8080-3036-8863-3703639b7d84" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11474386-c970-3923-9796-186125b07ea2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="c9dd72c6-c7e0-3e6b-bd0b-aa86bed43e77" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0f23a40-9aa4-3e3f-bef5-1f1a6a4edde9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="9b781750-2529-3104-be6d-b05a86efa03c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c69899e-dd5e-324d-9544-1502ec9f4698" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="50d57036-6a6f-32a5-bb85-28958231e9e9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ecc0b24-cf78-3791-b4c6-f57c82dc4bc9" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="c38c515e-9ee2-3088-9755-dadf9c9370b8" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a02875a-d586-3913-90c5-6b4503d489ff" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="50e6893d-f5a7-321f-9858-0818367dc777" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4841966-8b60-3a43-ab85-0d948e9c4b51" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="user" locRef="3" rule="JSF-208" lnHash="-541829676" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="-541829676" unbViolId="844eec0d-0044-38e9-8f70-697efb917777" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1948caa6-af5a-327c-b9b7-d8341e3db19a" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="11" sev="2" auth="user" locRef="3" rule="EXCEPT-05" lnHash="-541829676" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="-541829676" unbViolId="ef17c755-ea53-3081-99a6-fa82dc9989c4" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92ae3e83-2468-30f9-b6c0-16dadf58338e" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="45957a8f-0931-343a-8381-34683326245d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="668b5fb0-4834-3267-8ca4-c5093866b83b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="45bfdf09-b4e7-3ce2-a2fa-c53377dd52b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3c6734c-36ed-30d3-b984-3e4ebb58fd54" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="f548347e-25d8-3951-b606-a2892afcfe95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="535894ec-cf59-3f6f-bcc3-f99d6da4283f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="4c93b9c4-3c90-3dc2-8545-ee2fa0bbed84" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ca2693a-e08c-3c69-9a14-2503be352645" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="e5eca777-cb86-30ca-83ef-f5dd951532f9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a3f8b23-b863-3cf8-a72f-b36b9dd85df3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="12" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="ef806d6f-6aef-3e69-9c3c-c42eb5e3d6d7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc357930-5b5a-3df7-9710-e5b0bdf022e7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="e3382abc-cb17-3c83-b94d-6fd3c97936ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cce3d7d-465b-3f72-83a8-63e0021abd22" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="c13c9897-50d0-31d3-a5d5-beca45bce1f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f30d38f-c168-38fb-9c98-4458ff4a71df" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="13" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="34986ddd-0548-3f50-8833-01f0a53d81e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26c2c40c-332b-3ee5-bb49-a75388d1501a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="4" auth="user" locRef="3" rule="JSF-043" lnHash="1006431594" rule.header="Tabs should be avoided" tool="c++test" lineHash="1006431594" unbViolId="d3e7af92-9a11-32c7-8ce5-63dcea25e424" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="032833f0-bb7d-3f4a-9f23-2112227d33ca" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="user" locRef="3" rule="FORMAT-01" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="c44914bd-6c24-34a1-9427-04a1a61865d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c80233bd-f09e-3a2a-ab02-f3b6bb15ec87" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="5" auth="user" locRef="3" rule="HICPP-2_1_1-a" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="8d91a6fd-8198-3db5-a949-03cdecb7c151" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8575ca5-a712-373c-ab18-8a928116af67" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="14" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locStartln="14" sev="3" auth="user" locRef="3" rule="FORMAT-25_b" lnHash="1006431594" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1006431594" unbViolId="655be76f-fb1c-39ab-bcee-c1a1bc51f238" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="198bb10a-4e32-338a-8a1d-becafbb55f77" locEndPos="2" locType="sr" hash="1013754779" locEndLn="14" goals="0,"/>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="APSC_DV-002000-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1842545282" lang="cpp" violId="b89ae0d2-6b10-3402-a10c-3c052b9580d3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="8b3f9919-dc5c-33ba-8453-af75d55b06e4" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_0_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1331699030" lang="cpp" violId="9b024d0b-7c57-3bc2-bbeb-4079ba0c8e81" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="c34f1f65-40a9-3346-9d1b-408647e1179d" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_1_4-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1332641371" lang="cpp" violId="c20836f4-7a69-3c88-9023-0a7e91a66238" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="aaa818cc-3d39-3700-a395-d1c06c68d3da" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1151239445" lang="cpp" violId="52b26176-1c52-3622-b4ad-38b4a454c2eb" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="5cc0bf3c-eee8-3d76-9424-7b06927143d0" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-CON30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="103891581" lang="cpp" violId="10f98aee-3dc3-3b64-9141-ac436c5b9e1a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="c9ae289c-cbcb-3b9f-9231-dad9f828d5bc" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-FIO22-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112344312" lang="cpp" violId="acfa849e-785b-3bbf-9d8c-202b7c1692fe" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="62790c3f-2265-3399-881e-893a28ce5b33" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-FIO42-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112174134" lang="cpp" violId="f889897c-c088-3b1d-a210-cc95767e2ec3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="52e5b546-c732-3b86-8f73-672cc275bd5a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-MEM00-e" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116382779" lang="cpp" violId="da62bb76-4bbb-373d-8fef-cc0c562ecc20" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="843a4837-1f2b-3d6c-a0de-8265c390e17f" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-MEM12-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116285462" lang="cpp" violId="b53fbb4f-cb81-31bc-b0c3-e7fdc3b4838d" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="99feffd4-8599-3009-b641-5ac979ae3c7e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-MEM31-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="114391825" lang="cpp" violId="50cbed52-df0b-31d5-ab01-52319042ae67" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="1ae2b5ad-aa63-34ea-b791-9a7e97768ff6" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_C-WIN30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1055995355" lang="cpp" violId="ba6e964d-e810-3d8c-8077-415d86a14279" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="8d8aa12a-e309-3c47-ab20-08430b845f84" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_CPP-ERR57-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1542295099" lang="cpp" violId="102672c0-f1a5-3897-9ed5-ea1061a063c8" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="d51bd892-3c21-350f-87a5-72baf9d963dd" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CERT_CPP-FIO51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119006820" lang="cpp" violId="3e573a31-93a3-3795-9698-119f6f3a8fc3" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="c13a35df-503f-34fe-9ad1-8ea8aee88c52" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="CWE-772-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2027493177" lang="cpp" violId="2ae74639-5651-31c2-a949-4c9e8b5b8050" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="bf5f163a-a5cb-32bf-a38d-8c559c442a59" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="MISRA2012-DIR-4_13_a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1431710396" lang="cpp" violId="6b2f0657-e7aa-39b0-832e-96d551353b9d" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="d890f876-feeb-3369-a83d-793c35d72abf" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="MISRA2012-RULE-22_1" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1251621320" lang="cpp" violId="b4478816-203f-3250-b9f7-7031b647ef9a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="c182bba6-a8d3-387b-89bd-67914fe35b94" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="MISRAC2012-DIR_4_13-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2127420791" lang="cpp" violId="30d042b3-0234-3518-ba59-f8dad96d82e2" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="288eb50d-2a74-3657-842b-caa3adf0cca4" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="MISRAC2012-RULE_22_1-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1043097931" lang="cpp" violId="fc0b4a40-010e-3379-b586-67c46bab7717" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="0cc35f38-cc68-354d-ab3f-ec332778027c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="9" rule="OWASP2019-API4-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966237325" lang="cpp" violId="ba167848-5d5e-3d47-a9fa-9fb4b70fca9d" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="b4a2c8b8-c0d2-3b9b-aaaa-86751d0d0600" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7"/>
        <ElDesc lineHash="1773312110" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause"/>
            <Ann msg="Allocated memory: data" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval"/>
            <Ann msg="Entering the loop" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" ln="15" srcRngStartPos="0" srcRngEndPos="0" locRef="3" locType="sr" srcRnghash="1013754779" srcRngStartln="15" srcRngEndLn="16" srcRngFile="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data"/>
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var"/>
            <Ann msg="Point where allocated memory is lost" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="METRICS-31" lnHash="-1179647073" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-1179647073" unbViolId="dee2a589-d49b-3172-868a-0c56f70715a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09a3cdd9-522a-3788-b6b4-f4a9244cb463" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'NullPointer.cpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="NAMING-03" lnHash="-1179647073" rule.header="Use lowercase for file names" tool="c++test" lineHash="-1179647073" unbViolId="26190c72-fe48-3f64-90c5-51fa3a19703b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1703ccf-44de-328f-9c14-9f5da5830a91" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'NullPointer.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="NAMING-38" lnHash="-1179647073" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="-1179647073" unbViolId="c05fe132-1147-3b54-b360-166c0e65f8dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aea70f33-1810-3774-b99a-bdd8a651ab9c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="5" auth="user" locRef="4" rule="PFO-04" lnHash="-1179647073" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="-1179647073" unbViolId="54743972-e1c5-3285-9275-dfe8cc42ed70" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d832db6d-953e-387e-a6f4-49d7a619871f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="COMMENT-02" lnHash="-1179647073" rule.header="Provide copyright information" tool="c++test" lineHash="-1179647073" unbViolId="6edcd06b-6bd5-3686-9d38-4635ad18bb45" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c29e6ea-fc1c-3428-ad2d-1d775940a8d4" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="JSF-133_b" lnHash="-1179647073" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-1179647073" unbViolId="5945ab15-2869-3eb9-9718-bdfdf4a5cc01" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9d51cd6-4744-3a1c-9233-5ab1ec5ebaef" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="COMMENT-03" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="56da4978-0f80-3370-9753-e31593f8afe8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="405aa378-f4c2-38e9-b45f-a00d37ec0f4c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="JSF-133_a" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="6e806823-717a-3070-a152-f8fa2cd5727f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76744a7a-8264-38e2-a199-112123f8fb86" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="005a3f3d-9d74-3c16-94d0-10ea1eeacae9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6bb3352-7cc2-379f-b5f5-2c6dda788a7a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="3" auth="user" locRef="4" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="b95dadea-9a32-36ab-adc5-46d289025391" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c6ec08a-3e9c-3d0c-bcee-1fbdf457aa21" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="2" auth="user" locRef="4" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="53180478-723d-3f7e-b80a-753c7d078ac2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d6a3084-fdf1-39a9-9d4a-cb92d7ae8213" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="1" sev="2" auth="user" locRef="4" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="7bc6cb43-356c-33ab-b9c9-374b67b1c7c1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8075494-d32e-336b-adb1-a69768cb5096" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="user" locRef="4" rule="MISRA2008-18_0_1" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="ce1c3e7b-1656-3432-9891-c9a6c6fb9bfe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d459602-3a7d-3e8c-9723-8756380ac369" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="3" auth="user" locRef="4" rule="HICPP-1_3_3-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="92ca40ec-04a7-3e35-8098-1b7670733613" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00cc6c7f-3c8b-3864-8260-8c6b9e9eca94" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="user" locRef="4" rule="AUTOSAR-A18_0_1-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="8b8a139d-ff4c-311a-b657-b675409eb9a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cad9fbb7-fc09-3909-87df-2372f7aa79d6" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="3" auth="user" locRef="4" rule="CODSTA-CPP-59" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="b5682d09-8f45-3e13-bc09-8f21d8715393" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89f88068-f628-3298-97b4-72c5f7f171db" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="2" auth="user" locRef="4" rule="AUTOSAR-A1_1_1-d" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="b2b354ed-7320-3d83-bebc-0e83d90950c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da54f32c-275a-3329-a8a0-84837d6c0d63" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="Ensure that C Standard Library is securely used" ln="3" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="3" sev="4" auth="user" locRef="4" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="6e0de748-69c0-38c8-893d-94605e1d8672" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e6eba5d-c5a9-3213-8f30-805dd8ef8313" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0,"/>
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="COMMENT-04" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="2cdd0ddc-cd4d-3481-b789-1be6f92f0c3f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27b4350d-3683-3f24-ade0-61999f5eaf38" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="user" locRef="4" rule="JSF-134" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="605d90a0-2e78-3cbb-9c34-98bb835a693b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61730f9c-f9a3-3c54-85ef-5e1f26d97ca8" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="COMMENT-14" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="9b144fed-2fab-3334-be8b-a103513f2545" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19a8832c-2d04-3320-9c55-45f0b0cf3169" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="a539d7fd-8f9c-3554-a02a-e7eb9d295b1e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da4382bc-41e7-312f-8980-c55564469b6d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="92b83f18-bb69-3bc9-87d7-88f51bea88c3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ebad30c-efb6-38b6-bd91-e1b1e10737f4" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="fa51bd3b-659e-3ead-a5f4-0ba00e05826d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e92a4348-0f17-3f9a-bbe4-d994a77c2a1f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="e1b2e3d8-1016-3892-870a-b9f99fdfe0b7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9e9ac10-4a08-3339-b309-7ad057044cbf" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="40d6afc4-c24a-3586-bd40-0ccc84e54a30" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10e5ffe1-b42b-34db-90be-d6495ada3c7f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="06dd972e-f749-3a1a-b5e7-0cec7b670629" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa070b17-50cc-36ef-baba-5e9418fb8459" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="c600a550-88c2-3fdc-b033-b93623c2ff5a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c64bc677-8875-360f-8e47-a8e2d62141c2" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="e22d24a6-a7b8-3587-9cd3-6054d922ad0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="828bb619-46e1-324c-8b97-302df9d7eba3" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="CERT_CPP-ERR50-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="8ca0dfe6-f61f-3d8a-9b96-bcd6814556be" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c998ae4d-3253-39e1-82ed-38ee8a226780" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A15_3_3-a" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="33d2831e-1372-3da7-9680-230a9f52226a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5379f699-fb90-305a-bcc2-98712cc87fde" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="HICPP-15_3_2-b" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="ca20118b-4e87-365d-b76f-437eebafd563" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4161697-9e6e-38b2-9d34-bf80fc7c2436" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="user" locRef="4" rule="MISRA2008-15_3_2" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="79235a1f-60f4-3021-9fcd-92923575dff9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="963b8d8b-8492-3f5a-accb-f2b31b99929d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="AUTOSAR-A15_5_3-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="af7aceed-aac4-3671-ad04-0b07a13ea140" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="675850ad-c7f9-3da6-b800-3cfc28849880" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="EXCEPT-06" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="1c1e6f03-f11d-34de-ae8c-c5e47957912a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f68b9d3d-1ef5-31d4-8ed9-0cbb95269403" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="MISRA2008-15_5_3_d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="d369c94e-4c63-38a3-b94d-6133b373d5cf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef24aee-8f4e-3c6c-8792-7d4b6d52db9f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'main'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="FORMAT-28" lnHash="-332596053" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-332596053" unbViolId="ef98ecf5-95f9-33b8-b7d8-c472b2f28151" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb43ab4e-e8ff-3b30-bf02-0c28c5ff0132" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 2" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="5" auth="user" locRef="4" rule="METRICS-29" lnHash="-332596053" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-332596053" unbViolId="1f9d2aa0-34f0-3a5f-9513-68f4942e7757" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58ae33c1-1bbc-3edb-8dee-33dc527d9f87" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="5" auth="user" locRef="4" rule="METRICS-33" lnHash="-332596053" rule.header="Report Essential Complexity" tool="c++test" lineHash="-332596053" unbViolId="10b6e4ec-0ba7-393f-ac4c-68057c783f3b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44dd3bbc-2545-3bf4-bda0-3acdccbda1b4" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="user" locRef="4" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="f75be9c0-3cb6-3f14-a445-1163ae29511b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6e4d16b-8052-3e9a-975a-b47670c5ecc4" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="c3d182c1-0627-38ef-a9d1-6f7bbe50c241" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82fc90b7-3a5a-39dc-8132-d932500a048e" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="'argc' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="483e55fa-4f56-3ad7-8cf4-6597fd50098d" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a01ab7f-4546-35b0-bfac-f5f9f09d63a4" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="NAMING-HN-22" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="af6459c9-6584-385b-9110-7f67d54e7ddc" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8be8ab3-cec4-36e4-974c-d820bc787845" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="NAMING-HN-30" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="cdd96d3e-cf0b-3beb-b4a1-d479779ef636" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8ac60ad-4744-316c-9706-3d7cec45e16a" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="NAMING-HN-43" lnHash="-332596053" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-332596053" unbViolId="67360468-2b83-3b55-9014-848b146d4803" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="522f3a86-0361-3536-bc8c-9d9a070ee03a" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="4" auth="user" locRef="4" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="aca797d9-f0cc-3f43-bf08-7bc0a2c64d0d" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21aa1211-fb04-377f-b12d-69b0027657a7" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="b5d4b879-30a3-3bc7-b7a9-eb689f710796" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b28b0b47-7030-34c7-9803-4ba3badf542e" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer or array type is declared: argv" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="CODSTA-94" lnHash="-332596053" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-332596053" unbViolId="69349221-bd56-3446-9913-077454ced502" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04ddb307-05ed-3fa0-a5ce-1b930a30bdf7" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="The parameter of pointer type is declared: argv" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="CODSTA-95" lnHash="-332596053" rule.header="Do not declare pointer type" tool="c++test" lineHash="-332596053" unbViolId="4a1ecb8f-9362-34fa-b50c-1e1b54e35706" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbb617a2-7825-3f6a-acbc-1d1fb6667545" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="JSF-097_c" lnHash="-332596053" rule.header="Arrays shall not be used in global functions" tool="c++test" lineHash="-332596053" unbViolId="2dab15c0-f02e-3d3a-85dd-598bf0a359da" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b643cc7-87cc-311f-bd64-1f6de60b7ccf" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="2" auth="user" locRef="4" rule="CODSTA-142" lnHash="-332596053" rule.header="Global functions shall not declare parameters with array type" tool="c++test" lineHash="-332596053" unbViolId="3a4afbe6-5687-3788-a940-1b2065eadc12" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e5abb8c-7060-38e0-b679-6a37e57631b8" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="CERT_C-API00-a" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="77d34f76-aa94-3e39-ba0b-003c5d8feba4" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="804d05cb-95fb-3144-a23f-7bc878721979" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="5" sev="3" auth="user" locRef="4" rule="CODSTA-86" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="daea1b6c-1bcb-3e1f-8009-3925d9b324cc" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f39a2136-f346-3762-89d6-3b2ba2529c02" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="6" sev="3" auth="user" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="7ad6f144-6009-30ae-8161-2f10f0dec05d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c4b71ab-7b19-3880-9925-533e1f99a18c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="264435611" rule.header="Tabs should be avoided" tool="c++test" lineHash="264435611" unbViolId="6fb65cf8-46e5-34e4-9dac-0e02871b2cd7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fe03bcf-0012-34bd-a78e-a5de49315c9b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="aba60dea-eb72-30cb-a28f-d55d81a9bb6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="263875f0-e475-32f2-9c9c-ffe56c655e1e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="a927d7a4-40ef-3320-9952-d540710908d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22eb5309-2873-3b8a-906c-98d1252b9c1d" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="1589f52c-baa1-3275-b13c-ca14f3746a9c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36af3d72-5174-3af6-ba8c-2775b6321fa9" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="CODSTA-MCPP-38" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="04fd32ac-a18c-3f39-8cfe-3b29828bbf57" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34179a4c-159b-31f1-a9fe-bdde87e50625" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="NAMING-45" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="16f74a54-b4a7-3ba1-b7bd-d3bc4b91e5e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de144541-4702-3e68-84c1-9b06a682bbad" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="JSF-048" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="378f377f-a89e-3d0e-aa24-11906eddbc73" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ceeb69d5-5cd4-3205-91bc-2c028c15d5c7" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The variable of pointer or array type is declared: point" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="CODSTA-94" lnHash="264435611" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="264435611" unbViolId="d8502027-eef8-3b15-aa80-9efda2180f13" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d7c501a-166c-3466-a596-d07d218bfbc4" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The variable of pointer type is declared: point" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="CODSTA-95" lnHash="264435611" rule.header="Do not declare pointer type" tool="c++test" lineHash="264435611" unbViolId="6d56ec6e-81dd-3dbe-8707-cb270ea5a594" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86d7537c-3be8-3d8e-83b5-e80075bf3330" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRA2008-2_10_1" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="6e3de051-a3b6-3460-bc68-145847ab69d0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2da4eed-6bdb-30ef-9c9a-5b2bd5fa0c48" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="HICPP-2_4_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="98c4b077-08e7-34f8-8fab-e09cfd4d942e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="701d28c2-3f21-359d-8fd4-3a60051910b8" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="AUTOSAR-M2_10_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="2b87c961-7377-3a4c-9ff4-a086eb9f509f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72602073-8969-3afe-abd1-256ea897a9ad" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="NAMING-47" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="2207ee0b-e8cc-3630-a4d3-6dea2e25a4aa" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e2eee26-49f3-3a93-9465-c40f367df2b2" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="MRM-18" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="6a759686-e27e-36d0-ae42-119de224c412" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="551dd68e-edd2-31a0-bc8b-3d529e867bf9" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="1" auth="user" locRef="4" rule="CERT_C-MEM00-a" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="fdca545e-d213-3b51-bbcb-3e1f62728b88" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="720cd006-a2d3-3592-995f-3842d67c01d4" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="JSF-132_a" lnHash="264435611" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="264435611" unbViolId="b31470b0-040b-379c-80ff-490eb903c9c6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2115e4b-795a-3700-8171-91e810fe4e84" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="COMMENT-05" lnHash="264435611" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="264435611" unbViolId="51bcc8c3-7635-387c-8c6e-058a780e1459" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60c1502c-b9e3-38a5-bb64-0e1ca5a75438" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="ebf8eb99-d8e4-3fd5-bba1-372ab83ba347" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc47b3e1-ca1b-3d6d-a6ce-5731fe4894a9" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="user" locRef="4" rule="HICPP-2_5_3-a" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="af6ff0b5-6d1b-3b62-83e3-a8826948e570" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2ff72d8-692e-3178-a3e6-45bceb5b8a49" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="4" auth="user" locRef="4" rule="CODSTA-MCPP-04" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="a095c4f9-a6a3-3b83-b425-01ebb27e6d44" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abf30b48-4e15-37ac-8d3c-43e861a8c7b4" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="042555dd-8b99-316b-88e0-7e27d6d00489" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05d9d189-adf2-399b-af3f-c7cd10224d0d" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="8a507664-5f47-3731-b162-10a6cf2d239a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="408aafad-2260-30fa-bbb1-1c468f48450d" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRA2008-4_10_2" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="6a2608b8-c04d-37a2-b576-0ff6c2ce5199" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2a72810-a040-3e9f-9fce-178c25797e81" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="CODSTA-CPP-63" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="3159ae03-d759-3f3b-8c06-2d8950be280c" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0abc695b-8ba7-3dbc-b2c0-6af86236a447" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="b7b4229f-caf8-3f29-be16-1e0b9271eba9" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="818325e9-2f7c-3d8f-86a7-1c065c627000" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="3" auth="user" locRef="4" rule="CODSTA-131" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="f9d8e37a-a3d8-317f-be3d-6153c66831c2" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="507c417e-2c51-3429-bd30-37d5c726dd5a" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="aae5b770-bb7b-3af1-9e50-22b851b97d12" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f60ffc8-5f19-34d7-bce6-cbb25cb92fd1" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="7" sev="2" auth="user" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="95046ffd-99f1-3671-80a7-3a6552d0c4d4" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fac91d0-3bfa-3d99-9102-430132cd91ea" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="JSF-061" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="4e190f1f-a054-3940-bc53-892d9c352678" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1669f54c-b084-316b-a07d-d108bd517dd1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="FORMAT-42" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="bfc35de4-dfeb-3b56-97f3-d37857539303" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df854c18-6dde-386d-bc0e-3b6fcf169e00" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="JSF-060_a" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="e0501315-ef1d-3551-befe-bf440ac03235" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bae86a71-c905-3347-8748-f19f7798d08c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="FORMAT-43" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="9c142e28-eb3b-33ac-b560-56942b2b0c5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4745be76-c163-3e19-99a3-c84c1eceff4f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="JSF-060_b" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="97625e20-c973-3ff8-ad98-4466df07313e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="214d50ab-b8e6-39ed-aaac-c33829563312" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="-620226472" rule.header="Tabs should be avoided" tool="c++test" lineHash="-620226472" unbViolId="61e4281f-1d84-3f0f-9178-5be601e3c027" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82b58cd7-ae53-3f60-b62f-6f6395bb1db7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="c3ed56da-380e-3961-8462-447199d0b0bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31352ca5-af7e-3c24-8fa3-c2a34b17a9d8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="67d3e199-768f-3042-8904-7989bbba1410" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="116e9e66-bbab-33b6-8fc0-dc67be07632c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="FORMAT-02" lnHash="-620226472" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-620226472" unbViolId="1e1d0124-b5b4-3750-b34f-7a029b5f3e50" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6f67e63-a6a9-3951-9735-a13f7c11cca1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="CODSTA-23" lnHash="-620226472" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-620226472" unbViolId="53f275ed-5a31-372b-bf28-1605a281f4b2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebb149f2-fa2d-3536-a3f6-e3b9b99e2d14" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argc" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="-620226472" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="-620226472" unbViolId="bc99284c-46dc-3398-a442-ea9c36cbf141" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="877ea788-2751-3462-a1f9-ec0e10db8a3a" locEndPos="6" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="JSF-151" lnHash="-620226472" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-620226472" unbViolId="ea8e13d5-8d29-38b3-acf6-438e2ff38de0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="082ea5a6-28c8-339f-82f7-1cf46bf78939" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="CODSTA-26" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="a3eacd8e-c670-3fec-bf8a-85e2441eb2b1" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a29c47e-5a08-39b6-9783-ca6547c44bf3" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="2" auth="user" locRef="4" rule="AUTOSAR-A5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="60e62091-d7b8-39ed-a786-3f7ba438de65" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8ae5dc7-21a9-3657-afba-26fb47f491f4" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="8" sev="3" auth="user" locRef="4" rule="HICPP-5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="93802019-821f-3738-8cb9-29029f0e80b7" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6aa65d7-5c71-31b2-a0a0-2d4229f77e64" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="2205995b-84a3-3394-a6dc-ac1bd32bf621" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d738eed-7d86-3d42-95a3-eca00a3e127a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="94800970-bf67-3237-8fa7-35d9658274cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7903a7ea-5a62-3559-8bf0-6313a8618455" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="31b0c103-a8c0-3a6a-81ed-a16f5f212448" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f84815f-4868-3c3c-9f43-09de55b92256" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="73a209a3-a148-3b99-bf6b-cad770037c13" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04dff5fd-412a-3e6a-b5a2-b724532add11" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="6352fc85-6437-3524-a6ce-c716505c8bb8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcfcf79e-809f-34fa-a950-1661b4a7e1da" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="ae80c5ee-b1fc-327c-817f-c5a2ba35fbb7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d16e15ba-cd51-33c4-9060-aa46f6b2647a" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="7a88fc6f-31fe-3ab0-8f40-94056bd3998e" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb12bfdb-7c3a-3878-b8f1-a98784dbb4a5" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="MRM-34" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="50118b07-d249-388b-8a45-cc80aa2e9f46" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caac97ad-c4d0-3188-b4e0-0164eedcb468" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Check the return value of new" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="1" auth="user" locRef="4" rule="CERT_CPP-MEM52-a" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="d2432525-9ad9-3e99-b75f-5457535daba0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab5c2b53-e039-339a-9f1c-62fad0d668af" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2012-DIR-4_12" lnHash="212456074" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="bbacaf15-2e2b-3c2e-8c6d-2e981c11fffc" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="136ddb57-464b-3ac0-9040-5c5464d52221" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2008-18_4_1" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="1a4ccf23-c2b1-34dd-8c4b-cdb4171b0388" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd058b6f-346c-3b91-a9ed-cf40483c7941" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRAC2012-RULE_21_3-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="2e20136a-e0c2-3578-96a2-d7611ff4d303" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b67476a-88c1-3e52-b83c-a0e0040b43fb" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="AUTOSAR-A18_5_2-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="2242e128-be53-3749-b0d4-9678a7d2b1c8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fe9a4b2-5d83-3f21-91ff-d42e838186be" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="JSF-206" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="6d0eec2f-c8e8-30f7-878b-aef96a1cce0a" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb81c30f-6531-3920-8626-67941e1d9679" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2012-RULE-21_3" lnHash="212456074" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="98cb8c5d-3410-3ddf-8eb0-8a36184491c5" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45ae5413-c530-3e0e-9ee5-11cb53cfdb67" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="MISRA2004-20_4" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="67078494-c51e-3158-936b-68ed1b963b9b" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85959020-38b0-3d83-9e6d-0be5655258e0" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRAC2012-DIR_4_12-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="0ea3943c-2bfe-3a52-880a-fc98a38df3a1" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4702fed7-544c-3919-b7fe-1129fefb73d5" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="03e5d5ee-14ec-3aed-bb7e-16eec99ba73f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50c08844-8698-3569-8736-36b67f4b622b" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="7274ea13-f290-32ed-b913-f1923a98f27b" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d3033f-3394-3b18-82a9-d392f9763733" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="2b00b415-399f-30f5-ac6d-5d752ee3b227" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e33cdfe7-712b-365e-bc86-da72a57380a0" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="5f405119-20c3-398f-a614-3d2c653f4b48" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="146ae66e-2975-3c74-9adc-88fc2e6813be" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="7eb1c0fe-9bff-3bc1-9f67-04c23edf9546" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="783b4163-d842-395a-a84c-1d9453904bef" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="2d63fd31-e8b5-318d-ba78-8edb94f45b57" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f09875a6-33dc-3483-86ef-3f16e6176258" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="48110c2c-c782-3823-b89a-6bdc3794e75d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7ac55be-ba47-3fd5-b9c4-723956e351d2" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="2579da7b-913e-3f2f-ba25-9e5b19dc924f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c3c4a66-30c0-3859-a517-7fa1e1dd6423" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="fbf2e9af-a7e2-3b1a-bc72-690f49bdaf42" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="861fdb98-8952-3c98-b542-7f23619acfb2" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="d57e81f3-fe68-30c6-b179-b4a61fbc6d4b" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6956d077-dd49-3a38-ad75-9124bcc7be43" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="aa02afdb-c7bc-3e4d-8d0f-ba0aa2f79046" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0acb2645-3bc0-37b2-818b-16c0335c539b" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="77a70291-857f-3520-918d-afb2f0d15fb0" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d02f3d26-9e82-3924-8702-26ac945e1ab5" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="b8dd3f9f-6455-35f8-8c27-1c31919b9d3a" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fc4ff99-385a-38a6-a071-f11e2b1920a6" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="ea500f53-676f-3e1a-8e12-05f2c8a9106a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="255027c8-8401-3dd0-98c4-1d9bb6f2f2b1" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="772ef3c5-cbc0-30bb-9059-c088b18a0482" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed2344dc-78cb-355d-97c7-3ff07504918d" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="64a1e676-d03c-37a1-a78e-2a471450df0a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c68dbf90-fb6e-3922-883c-28de2793c995" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="5cf501e3-8beb-3c80-afea-7c81c02ffbc8" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14293cb9-70e2-35ea-aa70-6558d1125399" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="573ae821-bced-33fa-9963-98816376af26" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21583685-df79-3c5d-9b74-c29d3537dbeb" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="c012b0f6-3601-39ca-bff0-899e8df7c389" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8777b3eb-98ee-3c89-bc58-f7ef6528c160" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="48808ff7-c75b-31c7-8547-0f364be9a447" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0aff0ac-cec7-3d2d-9f80-e0bdf31cc3f4" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The 'atof', 'atoi', 'atol' and 'atoll' functions from the 'stdlib.h' or 'cstdlib' library should not be used" tool="c++test" lineHash="212456074" unbViolId="46494fd3-c5ae-3999-85fb-02141d8b78aa" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84324241-6c7b-31c8-a5a1-8bbd4a94210b" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="d97da612-95ac-3cd5-ba92-c4c99fc8c62e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b6cf32a-509e-3324-bb00-0a30fadb8d91" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Do not use the 'atoi' function" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="ab2452d4-9d98-3623-97e1-e23c4329b406" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d77e86b-dc49-30c0-9db6-b9f7922964e8" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="a2553b38-9b75-3b37-87d6-601e0b36a45a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8ac03f-2fc7-3f20-858b-1f1bae2e8ae6" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="7c35da82-c3df-3fee-8c7c-0f1671505e8e" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b8c915c-5243-3209-a18d-a7e4763688d0" locEndPos="41" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="JSF-151" lnHash="212456074" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="212456074" unbViolId="dd7f4b46-39cc-3b5b-b10b-f37cea2135c0" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cf54f12-dba4-36f0-9c7c-432e7cbafda9" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="CODSTA-26" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="542429c9-ceee-3d7b-b4a2-f59c154fa96c" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a03e48f-85fb-3380-965a-ddc7abebfd2a" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="2" auth="user" locRef="4" rule="AUTOSAR-A5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="5c067374-bb36-3edc-97b7-beecf0a6448e" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db70f4f7-452b-3b62-b3a6-48c3464491ad" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="9" sev="3" auth="user" locRef="4" rule="HICPP-5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="8a478754-5a42-3c4a-bd9e-ab3629ee50de" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1d21a7b-69b6-35f4-9bbb-9f908c72f562" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="4f520168-013b-394c-a11e-16bea3912c18" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f4d3444-a85e-3566-99a2-6e86aeb128d7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="6e269a87-85b7-3850-921e-ca74aae85274" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a70049cf-865c-378a-9ddd-b857a3a21dfe" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="10" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="094856bf-aec5-325c-a008-21cafb586aa1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c9912a9-3266-3843-90b8-2da21a77269f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="1178067846" rule.header="Tabs should be avoided" tool="c++test" lineHash="1178067846" unbViolId="85502a6f-64d0-37db-b306-2dd4f0be0fb5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2832aba1-d005-38ba-91d5-d0f8afa1f234" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="af3990c7-9ce8-3071-8471-acd4e87f9ef1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e53c314-8faa-3c78-85d8-1d8a40969c23" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="11" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="759046e3-ae1e-3fcd-b542-be99c23111f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f00cb699-73c4-3463-bc29-a0d078622bbd" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0,"/>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1390236584" lang="cpp" violId="696e7cbc-0cdc-30e8-b954-9a7fae67eda7" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="ab840931-3a46-3565-8e04-bd01f4d36379" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78528533" lang="cpp" violId="3acc866d-1228-30af-a367-e8306bf132c9" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="074c0d10-1cef-3bc8-b3bc-5fe456b23f20" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="476450621" lang="cpp" violId="c6731eab-28fe-36cf-bc40-359f485c883b" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="0269ecb4-4f4c-377e-a47e-b45a0b5999dd" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1982312066" lang="cpp" violId="49ca6d99-05f8-38aa-9b4e-3a38aacd0af3" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="7b028934-5339-3738-94d4-cfdeab9c85ee" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-799733766" lang="cpp" violId="a6ced08e-6acc-3620-b678-f98cd6cfe919" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="3" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="f81c95fd-942d-3afe-aa43-1a43c51c86d8" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1665615379" lang="cpp" violId="d1108450-cf44-3f01-bd23-00fecd8c7335" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="2211586b-3a19-397c-8e8c-0dcb36003ccd" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1747021404" lang="cpp" violId="63eb433a-cadc-39c7-ac3a-176fa1150033" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="2c920dba-5f0c-3284-be5c-9ba1f622a635" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-15090486" lang="cpp" violId="7dab7c52-83a2-344d-bd8c-b1982af9bb37" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="b9b07576-75e7-3f33-888b-846975bba574" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="564686231" lang="cpp" violId="6ae1a728-dcc4-391c-b27c-052f552e41a7" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="5" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="90297a4d-b786-3b30-bdc4-7beb2d3d596c" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2094766674" lang="cpp" violId="6500cd00-0ea3-3418-a3c1-656bb46c5cb1" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="ac523581-14ef-3614-8d53-74ff3c5d2dbc" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="8" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1597100009" lang="cpp" violId="f622d5c4-632f-3bcf-a943-e05037fa73d7" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="4" tool="c++test" lineHash="1178067846" unbViolId="8c54965e-d4e5-37c3-81a2-8746ed390520" locType="sr" hash="-1257393797" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause"/>
            <Ann msg="Null value carrier: point" kind="comment"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment"/>
            <Ann msg="Null pointer dereferencing point" kind="point"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="0" rule.header="Tabs should be avoided" tool="c++test" lineHash="0" unbViolId="9aef99c1-d98a-3719-aa59-5877e694051d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be0f15b3-12aa-306f-97c8-b774baad8a28" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="f1e1fc3c-5f0b-3b9a-b9fe-aa5d27a7f620" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30fbb6ff-94ca-34e9-8e38-cc76cdcd0284" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="12" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="d4398ba7-4a2d-3b50-a20b-95aed4c17bf5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30f61a39-97a0-3e2c-855a-7e789f0251f4" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="4" auth="user" locRef="4" rule="JSF-043" lnHash="1599597842" rule.header="Tabs should be avoided" tool="c++test" lineHash="1599597842" unbViolId="3747d4db-dba8-3b0d-9311-1eb91fcfb1b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25958021-3cfc-35c3-8048-64a481e2cad5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="5" auth="user" locRef="4" rule="FORMAT-01" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="adb7f5c9-eeb5-3fe6-b000-76cd2227a1b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="301fdaa6-73c8-3419-9a72-341f97b2460a" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="5" auth="user" locRef="4" rule="HICPP-2_1_1-a" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="8ec478ba-657e-3561-9587-06c1f277c171" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50145508-897f-35a4-a305-c45884782a9b" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locStartln="13" sev="3" auth="user" locRef="4" rule="FORMAT-25_b" lnHash="1599597842" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1599597842" unbViolId="0b1c4129-5b1e-3954-a2b6-f163548d3370" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da5097e1-8c8c-3cdb-b883-c12dc5e46b48" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="13" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="METRICS-31" lnHash="-573060881" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-573060881" unbViolId="db37b429-1a65-327f-b306-0d8270d6562c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="658c90e0-2051-3947-94e0-8e63d47166f7" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'Point.hpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="NAMING-03" lnHash="-573060881" rule.header="Use lowercase for file names" tool="c++test" lineHash="-573060881" unbViolId="1d8468b4-79d0-3dfd-b8ad-2043f6615ead" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8faacdd-9e8a-3e93-a41d-11b86f51ddcb" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.hh&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="NAMING-37" lnHash="-573060881" rule.header="Include files in C++ always have the file name extension '.hh'" tool="c++test" lineHash="-573060881" unbViolId="046ea20b-ec39-35ce-a973-a6959a9abd2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27106a39-eae8-3eb2-a23f-26cebffe85ab" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="JSF-053" lnHash="-573060881" rule.header="Header files will always have a file name extension of &quot;.h&quot;" tool="c++test" lineHash="-573060881" unbViolId="4d61a35b-1cac-3860-90ab-c72a112ef9fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="771660ce-54a9-3ce8-aa52-ac2f77408111" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Point.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="NAMING-41" lnHash="-573060881" rule.header="Header files will always have a file name extension of '.h'" tool="c++test" lineHash="-573060881" unbViolId="d4744bf1-7849-3630-bb08-aa0e43a798f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c1f2130-288b-3386-9961-c95a2338b711" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="'Point.hpp' filename extension does not adhere to naming conventions" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="NAMING-43" lnHash="-573060881" rule.header="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" tool="c++test" lineHash="-573060881" unbViolId="212277e7-9118-3bef-b16c-34d7604c2607" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42647aca-cdc3-3c25-add0-1004952d60f2" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="POINT_HPP macro name should appear as first #ifndef or #if preprocessor directive" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="PFO-07" lnHash="-573060881" rule.header="Use multiple include guards with pattern based on the header file name" tool="c++test" lineHash="-573060881" unbViolId="882ddfa8-476b-3763-bf3a-1da286a93ecf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfc6fb1-4842-3fba-ad78-f0d9cf6d671f" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Point.hpp'  should have the &quot;.icc&quot; file name extension" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="NAMING-39" lnHash="-573060881" rule.header="Inline definition files always have the file name extension &quot;.icc&quot;" tool="c++test" lineHash="-573060881" unbViolId="fba8791f-497b-3ecd-ac00-81224b06c1bc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51f0fa9f-35b3-343a-9325-c66ec960ac1f" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="COMMENT-02" lnHash="-573060881" rule.header="Provide copyright information" tool="c++test" lineHash="-573060881" unbViolId="0c2911cf-1238-3a39-9322-7d22a39f7960" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a46465f-250d-36a9-bfc6-a3f7aa2a70ed" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="JSF-133_b" lnHash="-573060881" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-573060881" unbViolId="414050c9-362c-38e1-b7e6-cc170d0cbe4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4f322ec-a356-3878-a7ca-ebb17737a421" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="COMMENT-03" lnHash="-573060881" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-573060881" unbViolId="eb354961-7ec7-3b57-9a00-fb2522ac55b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf52648c-bee9-3e71-af19-d5dde8fd48fb" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Point.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="1" sev="3" auth="user" locRef="5" rule="JSF-133_a" lnHash="-573060881" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-573060881" unbViolId="fe5f8404-dcc7-37f9-9195-20ee467d279b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c3b9955-4937-3d89-bc39-6068b7496dd9" locEndPos="1" locType="sr" hash="1950870755" locEndLn="1" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="FORMAT-02" lnHash="-2055333085" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-2055333085" unbViolId="6c55d8ad-a805-38e5-89de-73c16ff296e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6b8ed51-997c-3c6e-a620-a482080e0f72" locEndPos="1" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="FORMAT-34" lnHash="-2055333085" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-2055333085" unbViolId="dfe9e266-89a0-3cb4-b16c-ac72f0493520" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f91e7b3-4ceb-3b67-972e-f13febb5be94" locEndPos="1" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="6c6df16b-8a40-3597-b527-8fbdab5ce183" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26a4586e-6e2e-398a-a331-42af2d18a875" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Shapes.hpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="83d3c2d4-0be9-3092-a194-b731805cf61d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2d04ce7-c379-3569-8100-3a870a9409d3" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="e7dc786c-d7ad-3e9e-a2b7-12aa4071d5f0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65660e9a-7e84-3e6a-897a-ff1861a8d18e" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="32a58201-355c-35ab-bae3-6e3ecfa96972" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9e7fce8-728e-3e67-aac3-316933dc57e4" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="4" auth="user" locRef="5" rule="JSF-098" lnHash="-2055333085" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-2055333085" unbViolId="df94c4ae-2dc3-38b5-8f71-048518698f3d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="101e1487-0a0a-3983-9c38-cb48b074837a" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="2" auth="user" locRef="5" rule="AUTOSAR-M7_3_1-a" lnHash="-2055333085" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-2055333085" unbViolId="fbe747fb-ec8c-3a69-ab6d-489109010d62" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2938b857-4b9c-3777-b0de-83991a74651f" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="CODSTA-CPP-36" lnHash="-2055333085" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-2055333085" unbViolId="7f8de262-c88c-339c-adf7-e4fadb04a1d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58d7843e-af14-3d6d-817f-cc21dcf01a26" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Do not declare the 'Point' type in the global namespace" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="2" auth="user" locRef="5" rule="MISRA2008-7_3_1" lnHash="-2055333085" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-2055333085" unbViolId="34b75fd7-b322-38eb-95f1-324313588713" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb95ad82-10ba-3a7f-b420-f9f75a4ff1df" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-2055333085" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2055333085" unbViolId="f51834a9-6daf-3379-b928-89d123e7d09e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8fdede28-43b6-36b2-a34b-a7fcd4719448" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The declaration of the 'Point' type should be preceded by a comment that contains the '@brief' tag" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-2055333085" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-2055333085" unbViolId="502c8b9a-1f5c-3625-8d98-874654cd3782" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6d27282-5884-356e-b93f-9027b3c60ea0" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="JSF-057_a" lnHash="-2055333085" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="-2055333085" unbViolId="32b907d8-38f5-3fab-9cbf-452cbde47e8f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46e95653-755b-328c-924d-693c7970a72f" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="CODSTA-CPP-46" lnHash="-2055333085" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="-2055333085" unbViolId="c041c942-d448-3177-abca-655f5c04fe2c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c260b2e3-9230-3ef2-933d-4c7b9ee380fc" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' should be final" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="4" auth="user" locRef="5" rule="AUTOSAR-A12_4_2-a" lnHash="-2055333085" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-2055333085" unbViolId="affa2a8d-a800-3963-af35-bf1aa341dbb9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="937f69c9-797e-338e-b60a-52c201d7e8f9" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' should be final" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="CODSTA-MCPP-23" lnHash="-2055333085" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-2055333085" unbViolId="da4d5d22-7e14-3b6d-b1c6-d9a008b72b4a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09fee2d7-7c0a-31ef-920c-34633eb5797c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="d44da3fd-d189-3733-9461-530b1facedf1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11d8291e-80b8-33c6-bda7-dbb9dcaa99b6" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="7f65e776-9f77-38f6-9ada-748b0f4ee558" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94cbd91e-555e-3dfc-9107-4c9959137497" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="9b12915a-055f-39fe-86b0-d65036af89a5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d1d5e20-d49a-3425-8ed4-a50de201cd53" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="bf508287-112f-3cb5-b0cf-c089d8acc561" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b2998a6-74d1-3d00-b718-3f16aa6e633e" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="7d9b191f-940b-38e0-9959-435203f78fe9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e07e9b0e-38a0-3e0f-8f5e-257a348854b8" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Point'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="HICPP-12_5_1-a" lnHash="-2055333085" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-2055333085" unbViolId="9be55e25-c760-364c-8c33-661918b3d79f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bce8efb0-d3ab-3619-977e-32a33ca2bda6" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing assignment operator or special comment" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="MRM-04" lnHash="-2055333085" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="e4a6921c-af64-3011-929c-c7a5f64600b5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27a45fb6-13eb-3df6-ac61-7d1cce9b42fd" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing copy constructor or special comment" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="MRM-05" lnHash="-2055333085" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="75f19d00-923d-386d-a2d5-1da976372958" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69bcf633-8358-3fdb-af2e-20677b761e6c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing assignment operator or special comment" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="MRM-47" lnHash="-2055333085" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="3c00ad2b-8939-3b83-9eee-c4d21f55396e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e019eaf1-9fb4-39fd-b7c1-b42b6c861f7b" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="Class 'Point' missing copy constructor or special comment" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="MRM-48" lnHash="-2055333085" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="-2055333085" unbViolId="0308a464-fb01-30b3-9416-1ae467f3da1d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f275fda8-441a-3263-a82e-41fb86fbaec5" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The 'Point' identifier should have the 'C' prefix" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="NAMING-HN-19" lnHash="-2055333085" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-2055333085" unbViolId="2f84eae0-59f7-318e-8fb4-50b1e9567275" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7cfe9219-a9b5-347f-9d75-d51643ed4c0c" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="37f99c74-032c-3600-94de-ccbcce345716" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10190109-2912-3bfb-a8e1-c8ad1b99f344" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'NullPointer.cpp'" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-2055333085" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-2055333085" unbViolId="96aa893c-a420-35a9-96cc-6aad19070096" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef55fc1f-ebd7-35c4-a591-88172b0bd00f" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The type name 'Point' is not a unique identifier in the testing scope" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="2" auth="user" locRef="5" rule="MISRA2012-RULE-5_7_a" lnHash="-2055333085" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-2055333085" unbViolId="f12bf3a9-8de6-3a69-957e-10e5c68cf949" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="71ec39a4-8241-3fac-b143-abaaa576e8a4" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The type name 'Point' is not a unique identifier in the testing scope" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="4" sev="2" auth="user" locRef="5" rule="MISRAC2012-RULE_5_7-a" lnHash="-2055333085" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-2055333085" unbViolId="419ac0c0-4d22-308b-bd68-b9010aaee15d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="f89f314d-604f-3852-add9-a92dd4d2054e" locEndPos="7" locType="sr" hash="1950870755" locEndLn="4" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="4" auth="user" locRef="5" rule="MISRA2008-3_9_2" lnHash="-487498237" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="c7a1e1ac-3977-3e10-ad2c-527dca3c78f2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7dd416a-0db4-3bd1-94dd-bb541b570815" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="MISRA-013" lnHash="-487498237" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-487498237" unbViolId="a4c2c1fb-5d0a-382c-926c-89930c96d353" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64f0f2ba-5842-3382-a59f-56eb4257bcc2" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="CODSTA-223" lnHash="-487498237" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="d0be2e16-c143-3e29-bcfc-85704d1df630" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29c836cc-1133-30e4-8d26-eee6217d0073" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-487498237" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-487498237" unbViolId="fd1b7277-ec5a-31b2-8579-29bce14baacc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dba65607-858a-305d-9822-0af96bca7799" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="HICPP-7_1_6-b" lnHash="-487498237" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-487498237" unbViolId="f4377d82-be4c-373a-9680-154ec301f554" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af9d7c4e-43f7-3d3f-a6c9-c78a566d715f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="4" auth="user" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="fb607856-a3f3-3213-b7b6-725bcd0f65f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79168203-c2dc-309d-b0b0-f2436f6f65f9" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="JSF-209_b" lnHash="-487498237" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="a252238e-fa86-3c8f-a9b1-64dcab8ba13f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5582710f-2a37-3dfb-8a08-11e1b0399a6d" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="MISRA2004-6_3_b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="d51acbb8-a5f7-3731-9f0c-cfd843114c79" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fb4b771-28df-30b3-b8ae-142e6ed645d1" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="4" auth="user" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="0a37693c-0da9-3663-ad4b-b0d857476e4b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fd86357-df2b-3bc5-a0e5-f2cf37747a78" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="HICPP-3_5_1-b" lnHash="-487498237" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-487498237" unbViolId="9e17f770-ec16-3e0b-af0a-e867174aee70" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb9f1af1-ebb9-3aa5-9715-05af4cb8e92f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_x' differs only by presence/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="25786d20-cb6e-3883-9d43-4cd50c78101f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55db97ca-264b-3e74-b53d-1426257e8aa0" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_x' differs only by presence/absence of the underscore character from identifier 'x' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="88607518-48b6-396b-97d8-2aa0382b8604" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1876b34-5ec0-313f-a1fe-0714f87a2cf6" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="fa4b9270-23de-3f99-9dc5-4842775e6825" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f813172-c736-37d4-911f-a1e3e08452f9" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="5a66b2c2-d619-3c66-8d1c-1bbc588d4fd2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cef8012-d1f2-3299-9713-d768e7d47b62" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="'_x' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="PORT-13" lnHash="-487498237" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-487498237" unbViolId="0bfaf2a8-9f82-3bfd-8527-398c222fb666" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="604b5be6-b84d-34db-8c6c-87c8bc454296" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Member variable '_x' shall begin with a lowercase letter" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-07" lnHash="-487498237" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-487498237" unbViolId="1031d321-64bd-321e-a9d9-3a9f701ae831" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f5ad073-2c5f-3aee-adb3-875aa57291ad" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _x" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-14" lnHash="-487498237" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-487498237" unbViolId="f2c8dc88-0741-3dfd-8d20-3f5b448e8aff" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f19a4c0b-1db5-3dc0-9548-b7a81470a721" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _x" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-19" lnHash="-487498237" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-487498237" unbViolId="63beff7d-b4e1-3369-a31d-2683a3abc816" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51e14a3d-44dc-361b-8dce-502da8515acc" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_x' is not allowed" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-33" lnHash="-487498237" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-487498237" unbViolId="5e5553f9-e430-3eab-be0a-98d11ec2a3e5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea5114d5-3f07-3270-b1a2-26db8b7208ff" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_x' is not allowed" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="JSF-047" lnHash="-487498237" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-487498237" unbViolId="53e64cd0-8bba-3cce-a018-380981662b6d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="839c9edf-734d-38dd-864e-ee3ccaa767a1" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-22" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="f7deb47e-62b1-378a-9f07-538c6109f86c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdb35425-8fd8-3afe-b444-19fae6d3231c" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'm_' prefix" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-29" lnHash="-487498237" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-487498237" unbViolId="8b8b02c8-0892-378a-a170-79579cebf36e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="104978bf-468f-3ad8-ab82-aea72f82a1e4" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-30" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="c8871160-3989-3304-9a5f-88a9cd3727d0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b7fb8fd-7df4-3c3c-85bf-58477c2a06d5" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_x' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-43" lnHash="-487498237" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-487498237" unbViolId="0ca5bf99-7219-3a96-a407-593e424af0bc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84394486-9bda-3258-8e43-02eb7fbf6e73" locEndPos="9" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_y' differs only by presence/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="8e912198-98a8-3978-95a5-372f0f6d1fc6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a13aa78d-b20b-369f-b9c3-d566b2d035d0" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The identifier '_y' differs only by presence/absence of the underscore character from identifier 'y' declared in file 'Point.hpp'" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-487498237" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-487498237" unbViolId="b40f5558-ae1d-3adb-aa06-580495d78019" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fee80cf-60b3-3bad-9218-d002d17f0c2c" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="63f06aa5-3f26-31b4-8ae4-9d5b7984670a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e86ae58-bce8-33cb-a610-701362d62487" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' member variable should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-487498237" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-487498237" unbViolId="bc281fc8-05fb-3a0c-8243-b3453c03b5a9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fca35c6-c240-3a13-b2ab-b76d6a88be00" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="JSF-152" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="088ad309-ac26-3646-ac2d-ee2bb69ed2c9" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="feadeb3f-5a51-38a4-8c41-00b88bf9bc6b" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-A7_1_7-b" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="7c61e14a-855c-32d1-989c-dc2f900c2512" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbf3c763-445e-3e05-9c41-d96c39b75727" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="HICPP-7_1_1-a" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="3cfddb32-9e22-3471-9cdd-98035839c376" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d2af579-6bb5-30b5-a088-74e6595f9b91" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate line" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="FORMAT-29" lnHash="-487498237" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-487498237" unbViolId="7894e3eb-b6e3-36d5-801a-7aad358b89d5" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5782178-0f27-3f8d-bdce-4ba4ee2f44c6" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-A7_1_7-c" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="3a579aa4-7795-39e0-bd5f-4cbf55495d9b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99fdeb53-005f-39d0-8878-4a88e7ae8cd8" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="FORMAT-33" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="ecd77887-4296-343c-8a9a-8883aef498e2" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6c87807-4fc2-3e74-a97d-2992d2165a0e" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="MISRA2008-8_0_1" lnHash="-487498237" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-487498237" unbViolId="b7b1023c-40e2-3bdf-86ea-126eedafb932" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12be0a39-c9fc-3eab-8890-98ede61b3580" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="HICPP-7_1_1-b" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="3b3c277a-44dc-3eae-9152-242e8e9bb03c" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="644ecf72-62d7-3254-ab3e-d0a664570068" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="2" auth="user" locRef="5" rule="AUTOSAR-M8_0_1-a" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="00cc5b4e-645a-3c75-9f8e-d4debbfbf81e" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bf5f9fd-6bb1-362f-ba10-071c31f507e4" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Declare variable '_y' in a separate declaration statement" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="CERT_C-DCL04-a" lnHash="-487498237" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-487498237" unbViolId="4616f7cf-5925-3e98-ac33-d46d0102efe0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9d3a796-4d2a-3e15-90da-1277e8533360" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="'_y' shall be declared as unsigned int or signed int" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="PORT-13" lnHash="-487498237" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-487498237" unbViolId="65b1f179-57c0-31d8-88fa-46d71bdab6ba" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6847015-535c-322c-b870-3aab0cd89fce" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Member variable '_y' shall begin with a lowercase letter" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-07" lnHash="-487498237" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-487498237" unbViolId="fd9a36ce-a51a-3f2e-a070-373aab354656" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae5d9e56-1246-3d3e-8682-0dec1589e35b" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _y" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-14" lnHash="-487498237" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-487498237" unbViolId="ba6a8934-c2f7-3f57-9558-95f23c82d8dd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c65a42c2-6d27-3339-bf1f-b6d15b691d5b" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Naming convention not followed: _y" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-19" lnHash="-487498237" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-487498237" unbViolId="3f35f7b9-2d4e-3ec3-83bb-b6b8583919fd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40355a72-648d-3119-af8b-09d5a8b8e2c2" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_y' is not allowed" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-33" lnHash="-487498237" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-487498237" unbViolId="a3af8a37-e9d4-3fd0-9eb6-3607b67a6e22" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7330deb4-23dc-31d7-9324-be6218e7ddea" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_y' is not allowed" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="JSF-047" lnHash="-487498237" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-487498237" unbViolId="8949d541-9797-36c1-a443-e4705d6fae12" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4151b3f5-8d69-3857-9fa0-3719ca34376a" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-22" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="672962dc-4582-351c-acb1-8d3a756f82c0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6db3c819-6cb1-3282-9773-bbbd5756b86c" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'm_' prefix" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-29" lnHash="-487498237" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-487498237" unbViolId="0ee0219c-ac12-3abc-a53a-d9957f416992" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc49dca-9f77-3895-a10d-e124c1e499a5" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-30" lnHash="-487498237" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-487498237" unbViolId="37110b86-5da1-3a2b-a1cc-bf58999c5767" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5c9359b-d114-3062-b379-d857f8e5f423" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="The '_y' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="5" sev="3" auth="user" locRef="5" rule="NAMING-HN-43" lnHash="-487498237" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-487498237" unbViolId="02229dd9-8a19-36a0-a100-5ef20a7798aa" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d0bae1b-09b9-3ada-8461-81269fd86664" locEndPos="13" locType="sr" hash="1950870755" locEndLn="5" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="METRICS-19" lnHash="-33300074" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-33300074" unbViolId="a43a2957-d9ba-3e36-a86a-c5715d21320d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8299f72-f90b-3fab-97cc-923921eb4382" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-061" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="6a4e6f60-713a-3686-938e-51c69e75b04b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cc9933f-31f7-33b1-bffe-f907277bf775" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="FORMAT-42" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="8a4d70da-3473-3517-a041-57f3f90ad1b6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93c4e874-ddb2-32cb-a61b-8f98329e191d" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-060_a" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="53db7676-d794-356c-b759-1ef27a8ea434" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c74f8e-23eb-36c6-bdf8-529c09335cb7" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="FORMAT-43" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-33300074" unbViolId="802b2266-486b-3cf8-b2e5-3c45e58f4713" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2df547d-a22d-3840-9ba2-76d015cd8a1e" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-060_b" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-33300074" unbViolId="e6ef05aa-8714-3840-a646-188741d16a46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93d475b6-df6d-35dd-a252-9ed2f4029e7d" locEndPos="1" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'Point' function is not preceded by a comment" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="COMMENT-04" lnHash="-33300074" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-33300074" unbViolId="f0a7c73d-8c77-3619-8e41-304ad82fb3f5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04bb4f4c-f353-3e77-b0ac-a2da150f1459" locEndPos="5" locType="sr" urgent="true" hash="1950870755" locEndLn="7" goals="1,"/>
    <StdViol msg="The definition of the 'Point' function is not preceded by a comment" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="JSF-134" lnHash="-33300074" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-33300074" unbViolId="511c6340-6f8c-34d0-ac8a-3c0b8819f534" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52a683d6-36f5-37b2-a0bb-031ad0d5d19d" locEndPos="5" locType="sr" urgent="true" hash="1950870755" locEndLn="7" goals="1,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="2f2380b8-497e-34fc-b8a8-d8e77cb6cc6c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="637846bc-e6ce-3f64-aa09-e053e7058093" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'Point' differs only by case from identifier 'point' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="0ec136df-731e-3133-a68d-96394a554ca4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c40cdc56-7bbe-35f9-8222-126838704226" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-33300074" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-33300074" unbViolId="e2396cc4-d3dd-368a-8059-a5a40a7e70b3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8eb98939-68fd-3ee9-97f7-81f1337a2c32" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-33300074" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-33300074" unbViolId="a08d1ca7-8c98-3010-a58e-5b02601cc154" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2c54626-3867-3ee5-9dc0-49a96dce8c11" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="8de7438e-be04-3d6b-b973-cfca4ccff485" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee9bf56b-fe08-31e7-b118-35cf1c1abb60" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'x' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="COMMENT-14_b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="67496181-2c52-3508-99da-8f466a3636ed" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bb11d7b-a8f7-30cd-ba06-d860e71443c0" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="7cb497ef-ff2b-3065-8f1f-69afc995ee76" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cad74f70-d12f-3f3d-9622-ff46e95910d8" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'y' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="COMMENT-14_b" lnHash="-33300074" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-33300074" unbViolId="8f5e5771-eb29-3f3b-baef-7916159fdc82" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9627e10c-11c4-3992-b28e-71d153a76fcf" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Class 'Point' defines an inline constructor" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="OPT-17" lnHash="-33300074" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="-33300074" unbViolId="f6980b74-9c23-3398-981c-cf5872e3a413" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1e511f1-ec6b-3913-ab50-a35fdfcff096" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be declared 'noexcept'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-33300074" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-33300074" unbViolId="31627163-18af-3dcd-b01b-78cb600b4af4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82d2a314-e4c5-34fe-8a7a-449f71eb20b9" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' function should be declared 'noexcept'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="CODSTA-MCPP-09" lnHash="-33300074" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-33300074" unbViolId="4004bf82-f40b-30aa-98ce-529045e0931b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a789d102-e429-3641-ba2c-a48914a45b1e" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Function 'Point' has Cyclomatic Complexity value: 1" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="5" auth="user" locRef="5" rule="METRICS-29" lnHash="-33300074" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-33300074" unbViolId="e1a0f8ff-617a-352c-89da-1cd39f400655" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="248850ce-392a-3b6b-8137-c06a391f9ab5" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Function 'Point' has Essential Complexity value: 1" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="5" auth="user" locRef="5" rule="METRICS-33" lnHash="-33300074" rule.header="Report Essential Complexity" tool="c++test" lineHash="-33300074" unbViolId="81596080-9c74-3bd8-9f7c-b982d8861370" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1781ffd-b15f-3501-978e-eb83cbd10755" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' identifier is the same as the name of a type defined in the testing scope" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="MISRA2012-RULE-5_7_a" lnHash="-33300074" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-33300074" unbViolId="75f4575f-8ffe-36b7-8cbc-0c6fe4e47804" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4ae2aa5a-12bc-31fd-9589-3328e1f9d932" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The 'Point' identifier is the same as the name of a type defined in the testing scope" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="MISRAC2012-RULE_5_7-a" lnHash="-33300074" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-33300074" unbViolId="f24a89b8-d67a-305d-9352-77a65cb5a3a6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="90e1a89e-3aa1-3ef8-8b31-9955c1a6cc1d" locEndPos="5" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRA2008-3_9_2" lnHash="-33300074" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="333a42e7-8a30-38e8-9391-aaae101ce0e1" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="608bdd1c-a07e-3c06-9cd2-e3e51577a1cc" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="MISRA-013" lnHash="-33300074" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-33300074" unbViolId="b5ad71f4-0656-3402-9b9f-b0621cb87268" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed46d399-1da0-3cfb-84ea-badea6790326" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="CODSTA-223" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="3213d7e0-e226-3e16-b57d-55fad3dcc24c" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08152ba9-bba4-3414-8b13-6b2999c2007f" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="98002d9d-41bf-389a-81c9-93a4bf03d2e8" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcd2f96d-6a82-38aa-a628-9d6449776e67" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-7_1_6-b" lnHash="-33300074" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-33300074" unbViolId="772902f6-6ba7-3faf-a1db-f4a42e0ce9f7" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5c024db-b648-3ebe-9f4b-e73fd5ff9b20" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="7148a5cc-7710-3dc5-9b8d-b8a6f051aff9" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f11c47d-b531-3f1e-98b0-6305ce7fa071" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="JSF-209_b" lnHash="-33300074" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="10ef1cc2-5cfb-3ff1-89d7-0e55067a73ed" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc7ba1c8-2ccd-369a-92d6-79ad21099847" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="MISRA2004-6_3_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="edf77401-6cfd-3da6-80ef-3a08dd52a5c6" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9752649c-0ca8-37b6-b63e-0b0d489d7a47" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="c5702de0-31b1-3bcc-a43b-8570dc509030" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7741e4a-1ce4-36e6-aa1d-f540bd07231f" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-3_5_1-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="b70135f5-c50c-31f6-9efb-de758a0e6492" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcba09d1-eabf-3d53-b794-65e5e7abeff3" locEndPos="11" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'x' differs only by presence/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="96449b0d-429c-3dcb-9f9e-d848edd96bca" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94d92ffb-199e-37e8-8577-4ea57240f1e0" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'x' differs only by presence/absence of the underscore character from identifier '_x' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="d0ef74d0-06ea-3107-a823-cee44828e0f8" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2710d345-bb49-35cf-b753-039dc84e2064" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="MISRA2008-2_10_1" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="66860ac4-e742-35fb-ab35-05f1f8196457" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="445268ea-b3b9-34be-ac5e-0b43af89ff31" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-2_4_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="c5344332-436c-33fd-a6ff-fc1379e8a348" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c531f95-f46d-336e-ab41-15a1fe5ebc59" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="6069c343-8bbb-321f-8e0a-230a04e0f33e" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c0456b4-4c81-364c-972d-a53ebb6df3f8" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'x' differs only by presence/absence of the underscore character from identifier name: '_x' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="NAMING-47" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="b94720da-78ae-3fca-ac14-822149fb97e3" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cb8f4be-e6b2-35f1-a9e5-51f12491f15f" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="'x' shall be declared as unsigned int or signed int" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="PORT-13" lnHash="-33300074" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-33300074" unbViolId="517545a4-ae12-3cc6-9bda-2bbba4f059c8" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1efa4616-6033-3b35-8c1f-d765a178be0f" locEndPos="15" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRA2008-3_9_2" lnHash="-33300074" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="190947b2-3afe-3ba5-8cef-46ca068610f2" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba6ef893-2cd5-38d2-afb7-aeb4d5f45042" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="MISRA-013" lnHash="-33300074" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-33300074" unbViolId="b3577633-efa5-3b2f-b9be-ef502bcfd770" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="775a552d-faa6-3dd2-92af-97070bed7136" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="CODSTA-223" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="c5e1a29c-c6c1-3b79-8157-eaee00879ce6" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa121dc-5dfb-32f1-90db-d999270eb50e" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="-33300074" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-33300074" unbViolId="fe459337-0f36-3830-ad6c-d067ebb3bd50" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3366f8b6-5293-3083-8b0e-14cbc295681f" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-7_1_6-b" lnHash="-33300074" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="-33300074" unbViolId="bee0c221-7488-3561-8772-0c49feb91d20" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="615cbf28-1178-3a56-bf4d-88d609d90513" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="b3ca99df-7719-3d0e-999b-ae9cbc6dc2b8" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a35ffa-8b5c-37f0-8365-5cc8c838e45b" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="JSF-209_b" lnHash="-33300074" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="ba4f5d9d-6ccc-3779-838c-25455e783485" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5778f1c4-790f-300c-a106-03bca257c600" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="MISRA2004-6_3_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="a5dd811e-b07e-351e-bd58-6251ac3ef709" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0e46ebd-1d7d-36c8-bd64-12211cdf66a3" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="4" auth="user" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="4e8909f4-de09-3033-bf0f-2a66650f780e" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1a61541-8e44-3e8b-8353-0b4546d046e9" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-3_5_1-b" lnHash="-33300074" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-33300074" unbViolId="f8d127de-2ff0-3ec6-bf9e-a65d691a5cdd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d334728-8a33-326e-8122-5b02f172e4bd" locEndPos="18" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'y' differs only by presence/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="0cb5c185-da36-33dc-9ce2-a6dc1526c2ac" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1369cd90-bc05-3c55-9219-29272e5b5cc6" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier 'y' differs only by presence/absence of the underscore character from identifier '_y' declared in file 'Point.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="-33300074" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-33300074" unbViolId="9b2bad4e-aa01-3909-bcc5-736ac9edd03e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4be1e505-c4d4-3937-9682-d3a94d1aff4c" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="MISRA2008-2_10_1" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="9555e200-f3d4-3e6b-897f-1d505b947db3" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9107507d-f4f9-3400-8a96-84158d97a6a0" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="HICPP-2_4_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="fbdb3c30-797e-3dce-bd10-2ba1ebc9bc7f" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="831b70cd-b3cf-32f2-9e69-6628f617ff92" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="2" auth="user" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="20e30cb5-df04-38c0-a48f-27f9bf9dde6e" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b4ba24a-f00e-3026-abb4-bf0bd0cf6a34" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Identifier name: 'y' differs only by presence/absence of the underscore character from identifier name: '_y' declared in class" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="NAMING-47" lnHash="-33300074" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-33300074" unbViolId="5a0c0679-1910-3726-bea4-b84456487631" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28a1d65a-e699-3d15-810e-9e0a1c3bb2a3" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="'y' shall be declared as unsigned int or signed int" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="PORT-13" lnHash="-33300074" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-33300074" unbViolId="6dc1aafb-c9ed-3265-b3f3-bb1d4e9939ac" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3c1793a-9919-351b-b541-6783c9434844" locEndPos="22" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-061" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="1ab0ffdc-9d2b-38c5-93cc-c4dfb5671566" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cffc003-6653-3a98-971f-d4613b5106ce" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="FORMAT-42" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="7e03e543-709a-3da4-b2bf-d7014dd518ed" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2620c73-4839-33b7-a055-4f547f3f3cee" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="7" sev="3" auth="user" locRef="5" rule="JSF-060_a" lnHash="-33300074" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-33300074" unbViolId="5604dd43-1467-37d5-91a5-3117d6c2fa18" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7aa7859a-ccfe-3752-aea9-ce90f913e9d9" locEndPos="41" locType="sr" hash="1950870755" locEndLn="7" goals="0,"/>
    <StdViol msg="The definition of the 'reflectAcrossX' function is not preceded by a comment" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="COMMENT-04" lnHash="-1965707959" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1965707959" unbViolId="8db99f8f-4f92-3940-99a4-3c1f7580f9a9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e0d87bf-c1c2-3e6a-89da-ccb20386746e" locEndPos="10" locType="sr" urgent="true" hash="1950870755" locEndLn="8" goals="1,"/>
    <StdViol msg="The definition of the 'reflectAcrossX' function is not preceded by a comment" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="4" auth="user" locRef="5" rule="JSF-134" lnHash="-1965707959" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1965707959" unbViolId="a0eb39e3-183a-39ce-9cc5-d60252c930db" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34fe3e1d-728f-3ed6-9fca-8e46101ed024" locEndPos="10" locType="sr" urgent="true" hash="1950870755" locEndLn="8" goals="1,"/>
    <StdViol msg="The name 'reflectAcrossX' should be composed only of lowercase letters" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="JSF-051" lnHash="-1965707959" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1965707959" unbViolId="5589f176-ad5e-3349-9da2-62bceb658988" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b77dcf8-8ddc-3626-bea5-6704f639a6e0" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The name 'reflectAcrossX' should be composed only of lowercase letters" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="NAMING-44" lnHash="-1965707959" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1965707959" unbViolId="51dd54a3-0a11-3041-84fa-2a2b7b3e56ab" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbe95699-5bb1-3f6d-8661-62d34de45783" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-1965707959" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1965707959" unbViolId="f4efc636-86b3-30fd-904d-1468c8d424b4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="346de92d-024f-3b26-b61e-4dfdb3783a87" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be preceded by a comment that contains the '@brief' tag" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-1965707959" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1965707959" unbViolId="a07693b2-f25d-3c78-a390-7b9b270d2150" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87435dc1-4581-3d83-8288-453a73c52f33" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be declared 'noexcept'" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="2" auth="user" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-1965707959" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1965707959" unbViolId="65245a14-b78c-3285-b772-096fe7e82f0c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2220381f-8163-3258-8af0-437641adb523" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="The 'reflectAcrossX' function should be declared 'noexcept'" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="CODSTA-MCPP-09" lnHash="-1965707959" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1965707959" unbViolId="ccd9caaa-9a8a-3ec2-a4a3-5ecb221606eb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d531aa79-d13f-3d5b-8bc9-bc153c8b5a13" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'reflectAcrossX'" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="FORMAT-28" lnHash="-1965707959" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1965707959" unbViolId="6e1ff935-b044-3856-9106-b8204686eb8e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71406587-b7f6-3c04-b90e-696709177a89" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Function 'reflectAcrossX' has Cyclomatic Complexity value: 1" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="5" auth="user" locRef="5" rule="METRICS-29" lnHash="-1965707959" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1965707959" unbViolId="0478ff9c-d85f-3828-b63a-d596686e00fa" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d4aeb71-c362-3aa2-baf3-4c6c3ba990de" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Function 'reflectAcrossX' has Essential Complexity value: 1" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="5" auth="user" locRef="5" rule="METRICS-33" lnHash="-1965707959" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1965707959" unbViolId="52fac8ae-8712-3c9c-bc5c-e66ce9b94965" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3cc87e7-0246-3d66-a5c3-e02f938cc555" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Naming convention not followed: reflectAcrossX" ln="8" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="8" sev="3" auth="user" locRef="5" rule="NAMING-17" lnHash="-1965707959" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1965707959" unbViolId="3266d535-9be5-35ca-b6b6-f385cf59e518" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93878339-af14-3961-b643-16b0201961e2" locEndPos="10" locType="sr" hash="1950870755" locEndLn="8" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="9" sev="3" auth="user" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="a05c0241-6c2a-3314-827b-1c979e5df4d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f58da25-c65e-393c-9d46-1853ff881b6e" locEndPos="1" locType="sr" hash="1950870755" locEndLn="9" goals="0,"/>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="APSC_DV-002520-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365915470" lang="cpp" violId="e1b6b34b-8f35-31ac-b26e-4f74f8124eae" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="8efa0a24-740b-3a2a-bc8f-5bb9da380159" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="APSC_DV-002530-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365943021" lang="cpp" violId="b9d4da4f-9ab7-3a0e-944e-75b1e8e163d1" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="155cc265-c297-301f-8b19-6f9a6f4d1ddf" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="APSC_DV-002550-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365703211" lang="cpp" violId="6a863596-13eb-317e-86cd-7ebad3b26412" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="8b117f7c-4af0-39b7-93df-d0bcba795f0d" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="APSC_DV-002560-f" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365739978" lang="cpp" violId="c00b3ae9-337d-3ac2-a5dc-b3e60606a0df" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="ee287017-2ded-32f3-8a83-eca12fe29a72" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="APSC_DV-002590-g" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-365036216" lang="cpp" violId="28b6179d-4cb5-3196-a3f0-73b56a0b9c08" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="e64c1f79-ffcb-3327-a382-9cfcb23dd36f" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="CERT_C-INT04-a" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1571687099" lang="cpp" violId="b31b0ab3-11ea-3c16-a1f0-0986d7bfeab7" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="2ebf3dc1-1083-3438-8902-c8e372eab2b2" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="CWE-20-b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="262760584" lang="cpp" violId="12fd9215-fce8-36d4-ad42-8d7469d5a3c1" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="1" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="1f1ab8a0-536d-3359-aa68-2507cd561722" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRA2012-DIR-4_14_b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Protect against integer overflow/underflow from tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-758293474" lang="cpp" violId="fbc6d3d2-5d99-3b36-845d-97873e6a2c3d" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="ee0e9e09-49c3-3e78-a7a8-13dfefbec3d4" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Evaluation of &quot;-this->_y&quot; may result in possible overflow/underflow" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" ruleSAFMsg="Point of possible overflow/underflow" FirstElSrcRngEndPos="0" auth="user" FirstElSrcRngEndLn="6" rule="MISRAC2012-DIR_4_14-b" FirstElSrcRngStartPos="0" lnHash="-796707555" ruleSCSCMsg="Point where value is defined by tainting function" FirstElSrcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" rule.header="Avoid potential integer overflow/underflow on tainted data" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="111760417" lang="cpp" violId="d2a897e8-fe94-3776-a01d-4ea849c2998a" locEndPos="0" locEndLn="11" goals="0," locStartln="10" sev="2" locRef="5" tool="c++test" lineHash="-796707555" unbViolId="4bb919d1-811d-37b3-b7f2-3c90bb0e8b0e" locType="sr" hash="1950870755" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Tainted data"/>
      </Props>
      <ElDescList>
        <ElDesc lineHash="-332596053" ln="5" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="5" srcRngEndLn="6" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="int main(int argc, char* argv[])" ElType=".C" rngLn="5">
          <Props>
            <Prop key="Tracked variables" val="argv[]"/>
          </Props>
          <Anns>
            <Ann msg="Point where value is defined by tainting function" kind="cause"/>
            <Ann msg="Tainted data: argv[]" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="264435611" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point* point = 0;" ElType="." rngLn="7"/>
        <ElDesc lineHash="-620226472" ln="8" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="8" srcRngEndLn="9" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming true)" kind="condEval"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="atoi(...)" ElType="!" rngLn="9"/>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="Point(...)" ElType="!" rngLn="9">
          <ElDescList>
            <ElDesc lineHash="-33300074" ln="7" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="7" srcRngEndLn="8" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="Point(int x, int y) : _x(x), _y(y) {}" ElType="!" rngLn="7">
              <Props>
                <Prop key="Tracked variables" val="y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: y" kind="var"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="atoi(...)"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: atoi(...)" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="212456074" ln="9" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="9" srcRngEndLn="10" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point = new Point(atoi(argv[1]), atoi(argv[2]));" ElType="!" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="new Point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: new Point->_y" kind="var"/>
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" ln="11" srcRngStartPos="0" srcRngEndPos="0" locRef="4" locType="sr" srcRnghash="-1257393797" srcRngStartln="11" srcRngEndLn="12" srcRngFile="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" desc="point->reflectAcrossX();" ElType="!" rngLn="11">
          <ElDescList>
            <ElDesc lineHash="-796707555" ln="10" srcRngStartPos="0" srcRngEndPos="0" locRef="5" locType="sr" srcRnghash="1950870755" srcRngStartln="10" srcRngEndLn="11" srcRngFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" desc="_y = -_y;" ElType=".P" rngLn="10">
              <Props>
                <Prop key="Tracked variables" val="this->_y"/>
              </Props>
              <Anns>
                <Ann msg="Tainted data: this->_y" kind="var"/>
                <Ann msg="Point of possible overflow/underflow" kind="point"/>
              </Anns>
            </ElDesc>
          </ElDescList>
          <Props>
            <Prop key="Tracked variables" val="point->_y"/>
          </Props>
          <Anns>
            <Ann msg="Tainted data: point->_y" kind="var"/>
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The definition of the 'translate' function is not preceded by a comment" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="COMMENT-04" lnHash="-1158187041" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1158187041" unbViolId="a2ce3588-1172-35dc-bc96-7f3f5c16b683" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="025df44a-5b4a-36be-ab47-2c5843197c2f" locEndPos="10" locType="sr" urgent="true" hash="1950870755" locEndLn="13" goals="1,"/>
    <StdViol msg="The definition of the 'translate' function is not preceded by a comment" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="4" auth="user" locRef="5" rule="JSF-134" lnHash="-1158187041" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1158187041" unbViolId="e49d556c-baa6-3ff7-9c54-0cb975e427f9" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2075c56e-d450-3a1e-8b78-ee9a2a2ae977" locEndPos="10" locType="sr" urgent="true" hash="1950870755" locEndLn="13" goals="1,"/>
    <StdViol msg="The 'translate' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="-1158187041" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1158187041" unbViolId="adf17b79-b7af-3829-b454-741f5dc16ccb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44beac50-5205-38a1-b1f8-8692f0881392" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be preceded by a comment that contains the '@brief' tag" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="-1158187041" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1158187041" unbViolId="624cd97d-200f-3471-bd4a-33d017ae59dd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="201a5ec0-7c07-340b-88f1-dc2273e277ed" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="-1158187041" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1158187041" unbViolId="2a1efba3-6ed5-3fd3-8bd7-4498b65d1425" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43b29c72-38de-30df-bd18-8e0f40bbd6ca" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="COMMENT-14_b" lnHash="-1158187041" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1158187041" unbViolId="4c916d42-182f-3691-b44f-26d67d088c1b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48d03b3c-bcbe-335d-8ba2-1dd2cc64b9ea" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be declared 'noexcept'" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="2" auth="user" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="-1158187041" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1158187041" unbViolId="1710b04d-e208-320f-8ae8-b610b680001f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e392ce45-c683-31a7-8c2a-0f7b1a903a68" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'translate' function should be declared 'noexcept'" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="CODSTA-MCPP-09" lnHash="-1158187041" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1158187041" unbViolId="0061c854-8828-34fd-8485-684aab01db0e" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="604d4abc-7791-31e5-bef5-6c5856c4962f" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'translate'" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="FORMAT-28" lnHash="-1158187041" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1158187041" unbViolId="d1dc6ffa-29a7-32df-81f6-bc7f0e4cbc60" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03e6d6ff-74e5-3e05-9d88-44f1b2b5d8d0" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'translate' has Cyclomatic Complexity value: 1" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="5" auth="user" locRef="5" rule="METRICS-29" lnHash="-1158187041" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1158187041" unbViolId="f7b20395-ffef-3fae-a2db-1cec6a198fe0" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daab49e4-0d6e-305e-992b-410100b2db67" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Function 'translate' has Essential Complexity value: 1" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="5" auth="user" locRef="5" rule="METRICS-33" lnHash="-1158187041" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1158187041" unbViolId="ab300b23-5a9c-377e-9dba-5f1b750071ad" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c3f318b-c1a2-3541-8f05-813f04bbec30" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Naming convention not followed: translate" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="NAMING-17" lnHash="-1158187041" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1158187041" unbViolId="ded3974a-9449-331a-a19f-198a200c1263" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf84cae9-4455-3b4e-b1af-ba05f7359de2" locEndPos="10" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="FORMAT-47_a" lnHash="-1158187041" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="-1158187041" unbViolId="5102e6c9-77a9-3e3a-abe8-c6b7d520f4c8" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac8022e9-e855-3b98-a6f5-0009266d813e" locEndPos="20" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="HICPP-7_1_4-a" lnHash="-1158187041" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="-1158187041" unbViolId="36466872-2324-3906-8f56-a945efc79701" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41fc1eee-a12e-3e34-bec5-646a8cf696c9" locEndPos="20" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Consider passing the 'vector' parameter by value instead of by const reference" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="2" auth="user" locRef="5" rule="AUTOSAR-A8_4_7-a" lnHash="-1158187041" rule.header="A parameter of const reference to a 'cheap to copy' type should be passed by value" tool="c++test" lineHash="-1158187041" unbViolId="839c9691-0b1c-366d-b01c-0e6573b0c5a2" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a41cdaed-1d2b-305d-8641-a891e92da141" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' parameter should be passed by value instead of by const reference" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="HICPP-8_2_3-a" lnHash="-1158187041" rule.header="Pass small objects with a trivial copy constructor by value" tool="c++test" lineHash="-1158187041" unbViolId="1040e20a-e7db-307d-a614-46cc4fa1ddb3" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc60fcdf-9c0d-3dc8-8975-036a9b3f1d46" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Parameter 'vector' is not validated before use" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="CERT_C-API00-a" lnHash="-1158187041" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1158187041" unbViolId="a19d4d4c-8bc5-30d1-b033-a464c301665b" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d770d6b-9f49-3742-82a8-802fcbc4bcc5" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Parameter 'vector' is not validated before use" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="CODSTA-86" lnHash="-1158187041" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1158187041" unbViolId="1c13cc7b-51e0-3114-be2f-c0f95d867b83" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e18adbb-dc36-3d29-893e-e66f8014d1b4" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' identifier should have the 'k' prefix" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="NAMING-HN-11" lnHash="-1158187041" rule.header="Hungarian notation for constant parameters" tool="c++test" lineHash="-1158187041" unbViolId="fc3299a1-393c-33aa-b9f7-ca559c132f8d" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06819971-161f-3441-897f-1091b86d385a" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="The 'vector' identifier should have the 'r' prefix" ln="13" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="13" sev="3" auth="user" locRef="5" rule="NAMING-HN-35" lnHash="-1158187041" rule.header="Hungarian notation for reference parameters" tool="c++test" lineHash="-1158187041" unbViolId="563db9eb-199a-354f-9939-d07654db2166" locStartPos="32" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cecc0abc-17e0-330d-a13f-37bec4d43a97" locEndPos="33" locType="sr" hash="1950870755" locEndLn="13" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="14" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="14" sev="3" auth="user" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="14374875-b5f7-3a4e-8e2e-48f4706fee4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37a68b48-bbd9-3f51-a4f2-512a483bd69d" locEndPos="1" locType="sr" hash="1950870755" locEndLn="14" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="15" sev="4" auth="user" locRef="5" rule="JSF-043" lnHash="931387847" rule.header="Tabs should be avoided" tool="c++test" lineHash="931387847" unbViolId="34fbd1f2-0103-308c-a38b-1e3c6a98b884" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f40b597-fec4-360a-979e-d3847acf6199" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="15" sev="5" auth="user" locRef="5" rule="FORMAT-01" lnHash="931387847" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="931387847" unbViolId="335f27ea-07ee-3731-a3af-f658b2ca3687" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="317bff98-367e-31a7-ba43-2cd4f9acc135" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="15" sev="5" auth="user" locRef="5" rule="HICPP-2_1_1-a" lnHash="931387847" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="931387847" unbViolId="a30d4550-1d89-3256-9bf3-7696f82f2248" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7148ecf-2023-307e-a2b9-21d7d09403b7" locEndPos="5" locType="sr" hash="1950870755" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="16" sev="4" auth="user" locRef="5" rule="JSF-043" lnHash="-1856027609" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1856027609" unbViolId="855d5c3b-b1e6-3a2a-8a28-334e502025cb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67135a85-f13c-3559-a42e-70b12aefe12f" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="16" sev="5" auth="user" locRef="5" rule="FORMAT-01" lnHash="-1856027609" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1856027609" unbViolId="48964aef-2506-328c-adf3-d8d2e22bd453" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="333c6569-7b81-341e-8dd8-0f649fcc7c61" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="16" sev="5" auth="user" locRef="5" rule="HICPP-2_1_1-a" lnHash="-1856027609" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1856027609" unbViolId="9a267dfe-7e4b-31d7-ad58-9347e99b0ecf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca757dbb-7099-3fcc-bf37-d389029e2b79" locEndPos="5" locType="sr" hash="1950870755" locEndLn="16" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="4" auth="user" locRef="5" rule="MISRA2008-3_9_2" lnHash="905451388" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="66386084-5dff-3300-ae31-e2a8d1b45834" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90f32eb6-2290-3399-a443-013ae8150240" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="MISRA-013" lnHash="905451388" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="905451388" unbViolId="bfc52062-7b6c-3db2-8248-df897daff2ec" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5da7c07-4e31-3914-90cd-4625beb73914" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CODSTA-223" lnHash="905451388" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="23d74040-62a5-396d-9868-db7e4e30c7d5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edd546eb-ec51-3776-be49-f009a0c3d645" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A3_9_1-b" lnHash="905451388" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="905451388" unbViolId="cc47f092-1969-3c86-a899-2fa82a34bfe9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e277400-bba0-3849-a3d3-4ee14438f6e8" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-7_1_6-b" lnHash="905451388" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="905451388" unbViolId="c9471aea-19ec-3e6c-a513-71ce6fcde618" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3410009b-39a8-353e-bd32-a0a575a7148b" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="4" auth="user" locRef="5" rule="MISRAC2012-DIR_4_6-b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="bfd7e6a3-9cbe-3861-a33a-a42f52aff956" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75971da6-c5fa-3ff4-a8f1-40cde5e56dc3" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="JSF-209_b" lnHash="905451388" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="58eb2436-d194-37a7-afdb-117b23375501" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c088d6c5-8164-3412-9757-01dcd5adfe69" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="MISRA2004-6_3_b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="d1239fe5-507a-3024-9b0e-4f2c6ff1e717" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e40db36d-954a-36f4-846b-5134bcc937dc" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="4" auth="user" locRef="5" rule="MISRA2012-DIR-4_6_b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="1d3f329d-c055-3104-b194-c3663b072146" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5248719f-0654-38ee-bd71-c6a92b503300" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-3_5_1-b" lnHash="905451388" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="905451388" unbViolId="330ae605-e03a-3990-994e-b32fb4e8f154" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698f3b65-14b9-35f0-892c-7dc9f903566c" locEndPos="5" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The return type of the 'squareDistanceTo' function should be declared as 'auto'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="CODSTA-MCPP-08_b" lnHash="905451388" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="905451388" unbViolId="1b73d4ae-d733-3aba-88d2-f512050c4e5c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71dd8a5e-0ae8-3fb1-b785-1270ece9c6c8" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'squareDistanceTo' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="COMMENT-04" lnHash="905451388" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="905451388" unbViolId="28d45994-28a0-3f2c-9059-2c8448af7ff3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab62fcfb-0b92-38e0-89d2-e75d40c405a3" locEndPos="9" locType="sr" urgent="true" hash="1950870755" locEndLn="19" goals="1,"/>
    <StdViol msg="The definition of the 'squareDistanceTo' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="4" auth="user" locRef="5" rule="JSF-134" lnHash="905451388" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="905451388" unbViolId="2047db7a-1862-3921-9e15-4e7107937718" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3db67ae-52db-3af5-8c16-1af21a287b99" locEndPos="9" locType="sr" urgent="true" hash="1950870755" locEndLn="19" goals="1,"/>
    <StdViol msg="The name 'squareDistanceTo' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="JSF-051" lnHash="905451388" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="905451388" unbViolId="5d947241-8b9a-319a-9a15-686b14fcfd48" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7693e9e6-de9a-35f0-98bb-5847e5a18b02" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'squareDistanceTo' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-44" lnHash="905451388" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="905451388" unbViolId="080e7f41-6ceb-3300-ac65-7e7ecd8fc7cf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ff29117-76e8-3357-b5e7-f3effe31f08e" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="COMMENT-14" lnHash="905451388" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="905451388" unbViolId="29680a56-188b-31ae-90c9-110adea45d82" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3939a781-cc66-34f6-a651-459a1298c5e9" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-a" lnHash="905451388" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="905451388" unbViolId="18d5f9d4-9ca5-3036-881c-05e5af928804" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe260d57-f5fb-3ec0-b12b-1ba2cbab9f04" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="7bc49a8f-faf2-3f04-be96-d7c02139202e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acb3ded3-02d7-34d6-9717-5a6c38a9bc59" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="COMMENT-14_b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="7b460a4f-4c17-34b0-8a7a-7f225cdfa774" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6737050-3420-3f49-aecc-ca8d4bffcbf2" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A2_7_3-b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="cc8b91d5-0017-35e3-92cd-12a5e63bee2a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8631108d-78be-3d33-a9f7-e851fb3bc10d" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="COMMENT-14_b" lnHash="905451388" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="905451388" unbViolId="ed3ac3ce-90f5-370c-91e9-6224c33c8c95" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9be77dcb-ab26-3d9e-874e-124c140661e9" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="'squareDistanceTo' shall be declared as unsigned int or signed int" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="PORT-13" lnHash="905451388" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="905451388" unbViolId="e682575c-0e58-3abb-8c21-13b0c68f129a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c907735-d819-3b7a-ae83-23c0faf5a245" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CODSTA-CPP-54" lnHash="905451388" rule.header="Member functions shall be declared const whenever possible" tool="c++test" lineHash="905451388" unbViolId="e7371295-5a79-33f5-8dee-7868691b24a5" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="854fb24d-418a-33d8-a4e1-89afdff93083" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="JSF-069" lnHash="905451388" rule.header="A member function that does not affect the state of an object will be declared const" tool="c++test" lineHash="905451388" unbViolId="9e2f8657-056c-35ee-8fcc-deecc71f72e6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c77b285-b79e-3a98-bef7-a28c5639b8d0" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-9_1_1-a" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="70d794a1-ae42-3287-9939-4b7601cd6731" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55bc8c93-2626-3dfa-8005-45ca2264502f" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-M9_3_3-a" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="dfb16902-549f-3629-81a4-525c4e959a2b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6b4fde0-6cb8-3f05-8e99-b7484889db2c" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CODSTA-CPP-78" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="7ba9835d-beb2-38c3-ba73-9d22e17d9e53" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9637949-9a4f-35e3-8efd-3518e4032b8d" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Member function 'squareDistanceTo' should be declared as const" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="MISRA2008-9_3_3" lnHash="905451388" rule.header="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" tool="c++test" lineHash="905451388" unbViolId="3aaba3ca-0d68-3740-98fc-a8d892c0cc72" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d23c7be1-5173-30a4-9f4b-ca6267b7c30a" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be declared 'noexcept'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A15_4_4-a" lnHash="905451388" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="905451388" unbViolId="d8d99bad-61a2-38e3-a156-1685cced3c56" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb694c00-6b3a-3bc2-bc16-97eb5e47a97f" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'squareDistanceTo' function should be declared 'noexcept'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CODSTA-MCPP-09" lnHash="905451388" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="905451388" unbViolId="b33d6b77-a28c-36c4-86d6-4924ae59b158" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7322cb50-62ce-3e7d-aa10-a89b1393f54b" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'squareDistanceTo'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="FORMAT-28" lnHash="905451388" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="905451388" unbViolId="2ca23f95-74ee-3b74-b7ef-ea32c7085ec1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf38af15-9906-3e2a-91c4-be385b393848" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'squareDistanceTo' has Cyclomatic Complexity value: 1" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="5" auth="user" locRef="5" rule="METRICS-29" lnHash="905451388" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="905451388" unbViolId="11970bf1-2a75-390e-9715-30f5ad948711" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="696a69a5-0556-3895-a5bb-271a0b154b2a" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'squareDistanceTo' has Essential Complexity value: 1" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="5" auth="user" locRef="5" rule="METRICS-33" lnHash="905451388" rule.header="Report Essential Complexity" tool="c++test" lineHash="905451388" unbViolId="2b1e37ec-75be-3baa-be3f-00fe0c341a53" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5c08d99-0fa2-31d1-87a9-a87868e56e5b" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Naming convention not followed: squareDistanceTo" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-17" lnHash="905451388" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="905451388" unbViolId="0006528f-33a7-3804-b316-efe4f8152ba3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9402b0a-206f-3c23-aaf5-e8a01498fcee" locEndPos="9" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="FORMAT-47_a" lnHash="905451388" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="905451388" unbViolId="6f006fb7-508e-3cad-88e1-4408191384fc" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d144a4cf-f3d5-3431-b0ec-81d9c5939778" locEndPos="26" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-7_1_4-a" lnHash="905451388" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="905451388" unbViolId="f23723b2-f14a-3767-b417-1c3154de00d8" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dfb2e0d-6694-3c0e-bb0f-925950a6221c" locEndPos="26" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-45" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="7f470a80-652d-34cc-b720-bda4a9e10925" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58fefdf1-848f-3701-8573-1f729bdfa69d" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="JSF-048" lnHash="905451388" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="905451388" unbViolId="ed117640-74db-326e-b7e0-ec449cb6d5c7" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a53739e-72ba-3d9e-b855-adb09cf7c46f" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="97434c3b-72cc-3ea4-a615-5230e7db01a4" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15c7f3c2-c57d-3af8-8159-cd4234956f07" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="81013261-bb20-36c3-9fb3-66fb9c510134" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3eebb645-89a4-3948-938a-2f247bd769eb" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="2112b957-9bb4-391a-8ec2-a341a5bf8c5b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9ea3605-f4f7-36b3-8072-f0b9a19eeeda" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' ( line: '4')" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="daacb122-9618-31f6-931e-76603db2efb3" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a0f8b29-896a-3a88-b2ea-5401ffbc8d65" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="88eb625a-15ba-34e8-8491-df8ef30527ef" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="594b67fb-9a2d-3e61-a589-7f7ec2892628" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="d4522170-a4fc-3fe6-85aa-e9e4e0adc118" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad418adc-152b-310d-af73-524e1a20f484" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="7d15c23f-0c46-34c4-afd2-e5926a2c8a1d" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96372056-6502-3b7b-81c3-a6a417a18d48" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from identifier name: 'Point' declared in class" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="548bb000-9a0d-3b10-a5b9-ae1d46b6269c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a371d3fa-6077-3e30-a88d-47e9d3b015cf" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="MISRA2008-2_10_1" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="2ae692b2-3af1-3667-b0c8-f6f6a70456b4" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2daec073-a4da-3ac2-9146-2f51f2fe489d" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-2_4_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="b0d90008-0524-326c-bf35-9c5ecea208e2" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cff69ec8-328e-3cf8-be2d-4c2a037b81b8" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-M2_10_1-a" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="51ccef75-e1cf-35f7-82eb-852f8ce83c3f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5a84e48-c9f3-33a7-bd1c-cdf523601cd2" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-47" lnHash="905451388" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="905451388" unbViolId="ab745c4e-b6c3-3db6-a905-2b56a8c05037" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="860a7ffc-831a-3254-984e-9ab0c884bd25" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Consider passing the 'point' parameter by value instead of by const reference" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="2" auth="user" locRef="5" rule="AUTOSAR-A8_4_7-a" lnHash="905451388" rule.header="A parameter of const reference to a 'cheap to copy' type should be passed by value" tool="c++test" lineHash="905451388" unbViolId="96226aec-55c9-3e40-a6c9-cfd2ed000cb3" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e23c790f-8ad9-345e-bad7-b8e70f7700a4" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' parameter should be passed by value instead of by const reference" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="HICPP-8_2_3-a" lnHash="905451388" rule.header="Pass small objects with a trivial copy constructor by value" tool="c++test" lineHash="905451388" unbViolId="5981a416-376c-3e1c-bd82-68edf0589d10" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65323b8d-3e04-33fb-ad67-da64e248b24b" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CERT_C-API00-a" lnHash="905451388" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="905451388" unbViolId="95cda53f-5d72-3f01-b033-a11fa1b0fa19" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ef4dc43-1776-3257-85cf-4ebccd3f544f" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="CODSTA-86" lnHash="905451388" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="905451388" unbViolId="c9ee9c31-d88b-3ed4-8fbc-acf46a82aca5" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03634bfc-7929-3407-bc7a-5070c71ffe0f" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' identifier should have the 'k' prefix" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-HN-11" lnHash="905451388" rule.header="Hungarian notation for constant parameters" tool="c++test" lineHash="905451388" unbViolId="42a07fa8-1545-397e-91a1-ab62326674a8" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="decdb25b-98a5-3633-b755-f25973d983f8" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'point' identifier should have the 'r' prefix" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="19" sev="3" auth="user" locRef="5" rule="NAMING-HN-35" lnHash="905451388" rule.header="Hungarian notation for reference parameters" tool="c++test" lineHash="905451388" unbViolId="b7429df7-ee85-34ba-870c-c7d37ae7ee60" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b5c8a96-e31c-3087-bf0c-50c54357f55c" locEndPos="39" locType="sr" hash="1950870755" locEndLn="19" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="20" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="20" sev="3" auth="user" locRef="5" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="84104753-9152-33e9-b8cb-35087427299b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a3e3740-73c6-34c5-ba4e-6b16cfe1c1c2" locEndPos="1" locType="sr" hash="1950870755" locEndLn="20" goals="0,"/>
    <StdViol msg="Line has over 79 characters" ln="21" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="21" sev="3" auth="user" locRef="5" rule="FORMAT-04" lnHash="150478121" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="150478121" unbViolId="d1384222-6611-37e1-bf34-b27a48b9b2e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5dee7bf-6013-3638-8af4-01c4877c1f1b" locEndPos="1" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="21" sev="4" auth="user" locRef="5" rule="JSF-043" lnHash="150478121" rule.header="Tabs should be avoided" tool="c++test" lineHash="150478121" unbViolId="cb046013-1326-3c93-9b53-26f6fc595e25" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0156c4c9-6ff7-3495-814a-ec9fec1f3f2d" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="21" sev="5" auth="user" locRef="5" rule="FORMAT-01" lnHash="150478121" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="150478121" unbViolId="97049249-acc4-30fb-8f2a-f88923613242" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4ad8b7c-67ab-3cd5-9812-9f095d820246" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="21" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="21" sev="5" auth="user" locRef="5" rule="HICPP-2_1_1-a" lnHash="150478121" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="150478121" unbViolId="30557597-024d-3994-b2cc-20aa2f99e0a5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="005592e4-95e8-3394-bcb3-a7d01456bdbc" locEndPos="5" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="21" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="21" sev="3" auth="user" locRef="5" rule="FORMAT-25_b" lnHash="150478121" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="150478121" unbViolId="2a212037-2b4f-3951-a06e-45a5b3ebbadb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4660f5d2-15d1-3738-97ae-8d907f33ede0" locEndPos="6" locType="sr" hash="1950870755" locEndLn="21" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="25" sev="3" auth="user" locRef="5" rule="HICPP-2_3_1-a" lnHash="1963129393" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1963129393" unbViolId="535f86bd-5a3a-3fd0-ab8f-81068fdab2dd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d48dc1a2-ca1a-3eca-8a2b-4f1908a5c1b8" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="25" sev="2" auth="user" locRef="5" rule="JSF-126" lnHash="1963129393" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="1963129393" unbViolId="43aa12da-7aac-3cd3-ad64-b69b8ebbe65e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="072ddb87-85fd-3a0f-a22a-2113da2f813b" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="Use // comments only" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locStartln="25" sev="3" auth="user" locRef="5" rule="COMMENT-01" lnHash="1963129393" rule.header="Prefer C++ style comment" tool="c++test" lineHash="1963129393" unbViolId="a8256079-f3a0-3929-bc8c-072b6360dc73" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="878bafe7-9737-37df-b7ff-de889ac0685b" locEndPos="8" locType="sr" hash="1950870755" locEndLn="25" goals="0,"/>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="METRICS-31" lnHash="-290124037" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-290124037" unbViolId="1b1661e2-ff00-3574-998f-3d38ca280c7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="151651e6-2a68-39b5-a691-2134cf644e20" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="The filename 'Shapes.hpp' should be in lowercase" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="NAMING-03" lnHash="-290124037" rule.header="Use lowercase for file names" tool="c++test" lineHash="-290124037" unbViolId="99da7dbb-7f24-3a66-b5cc-0c0d607647ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71ddb305-876a-307f-96af-615fbe897104" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.hh&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="NAMING-37" lnHash="-290124037" rule.header="Include files in C++ always have the file name extension '.hh'" tool="c++test" lineHash="-290124037" unbViolId="621a5e32-18f0-33ab-8673-11a60bd1c609" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a8923bd-8fe1-3232-8072-dbb2bef98b9d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="JSF-053" lnHash="-290124037" rule.header="Header files will always have a file name extension of &quot;.h&quot;" tool="c++test" lineHash="-290124037" unbViolId="a9408dc8-034a-3d03-b6f2-b5f617fdf274" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fa6e882-e2d0-31ff-ace5-aca1a82ac549" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' should have the file name extension &quot;.h&quot;" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="NAMING-41" lnHash="-290124037" rule.header="Header files will always have a file name extension of '.h'" tool="c++test" lineHash="-290124037" unbViolId="e160d1db-7b79-32cb-b7cf-912a4a4fff19" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a2fc1d-b6d4-35a3-a701-6a32e5ec22c1" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="'Shapes.hpp' filename extension does not adhere to naming conventions" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="NAMING-43" lnHash="-290124037" rule.header="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" tool="c++test" lineHash="-290124037" unbViolId="6b39ae8c-8b7d-35a0-91f6-77c6cc60d937" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd4cad3d-b8bc-3fa0-8a3c-28bc83240b17" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Shapes.hpp' contains more than one class definition" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="PFO-03" lnHash="-290124037" rule.header="An include file should not contain more than one class definition" tool="c++test" lineHash="-290124037" unbViolId="cc2f3f11-8edf-3bbd-a4bd-07f64c81ab74" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3689131-59b4-3484-8768-8d98d73b7bcd" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="SHAPES_HPP macro name should appear as first #ifndef or #if preprocessor directive" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="PFO-07" lnHash="-290124037" rule.header="Use multiple include guards with pattern based on the header file name" tool="c++test" lineHash="-290124037" unbViolId="16f9f3d1-bf89-3898-bf57-25a4e298ecd2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d9ed3e1-e756-3b56-a709-d15dfadcb840" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Header file 'Shapes.hpp' contains more than one class declaration: 'Shape, LineSegment, Circle'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="PFO-10" lnHash="-290124037" rule.header="Do not define more than on class in a header file" tool="c++test" lineHash="-290124037" unbViolId="5b8f5606-3c83-32e7-9435-9f4d1ed09786" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bc60ae6-019c-3c26-8543-f5df277a0d94" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="File 'Shapes.hpp'  should have the &quot;.icc&quot; file name extension" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="NAMING-39" lnHash="-290124037" rule.header="Inline definition files always have the file name extension &quot;.icc&quot;" tool="c++test" lineHash="-290124037" unbViolId="8cab1095-45e3-3e36-920e-b3a795b4f469" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fd98c8c-15d2-3ebf-90d1-1134aee84162" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="COMMENT-02" lnHash="-290124037" rule.header="Provide copyright information" tool="c++test" lineHash="-290124037" unbViolId="df06ea03-7ede-3ef8-9aa4-0574730ee876" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6e77466-a689-3fe9-83b6-7e021e8a84fe" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the copyright information at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="JSF-133_b" lnHash="-290124037" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-290124037" unbViolId="8b42a9fe-c783-34e0-92cb-c4a89716caa2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9328047-af0d-3cfd-b9d7-807f14550fc9" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="COMMENT-03" lnHash="-290124037" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-290124037" unbViolId="e316e97c-60d5-348e-89ea-4c688fd71c86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6b0e231-12aa-3f40-bc0c-0e07633160da" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Add comment containing the information on the file at the begin of file 'Shapes.hpp'" ln="1" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="1" sev="3" auth="user" locRef="6" rule="JSF-133_a" lnHash="-290124037" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-290124037" unbViolId="2d5c7a25-a703-341c-a8cc-643decda5a03" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9c86190-f3f0-336d-a917-bdb5f5289697" locEndPos="1" locType="sr" hash="1537905639" locEndLn="1" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="4" sev="3" auth="user" locRef="6" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="772c0a27-5d22-3f85-a6ae-89e51cd80ca2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afab1301-2700-37d9-a1df-fe914bbab841" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="4" sev="3" auth="user" locRef="6" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="0e1b6903-6469-393c-b560-a380156650e1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbe0e90e-d0fe-3b0d-ad77-0243a09183c6" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="4" sev="2" auth="user" locRef="6" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="149209fa-0749-3cf1-880e-53085bb6ea02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be78d2d2-313b-3807-ad5f-8cef75987f3f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="4" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="4" sev="2" auth="user" locRef="6" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="c2f44497-163e-324f-a054-d65b9f8ffae2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a13ab039-64ec-3a9e-b1ca-0cb1f8a0df95" locEndPos="1" locType="sr" hash="1537905639" locEndLn="4" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="399430900" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="399430900" unbViolId="29657f8f-770b-34d9-b8f6-6b9fd102ea1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75d8b5d7-d851-3869-b650-4db63961ac23" locEndPos="1" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="399430900" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="399430900" unbViolId="a25c4b07-9796-3818-ae34-7020c8783d6a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e20ff844-fe9c-31a5-8279-364a4a703fd0" locEndPos="1" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="4" auth="user" locRef="6" rule="JSF-098" lnHash="399430900" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="399430900" unbViolId="169c5dbf-71bf-35c5-a51d-104c7f866589" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e897c92c-4833-3bf8-8437-09f3f449ba19" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="399430900" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="399430900" unbViolId="81185672-bb4e-3b49-a63c-2d2df5745d30" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c6575a5-2979-37f5-ba04-038f481e9e56" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-36" lnHash="399430900" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="399430900" unbViolId="42fe8f16-f4f6-3a0e-86a0-967c770392e1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55a5eafd-97aa-3080-86ad-5d0587244f16" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Do not declare the 'Shape' type in the global namespace" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="MISRA2008-7_3_1" lnHash="399430900" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="399430900" unbViolId="2cffe0ac-6d01-3e32-8447-df602f308b53" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3c67da6-d40b-3b23-a154-7b07a91a43d1" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="399430900" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="399430900" unbViolId="f574bbb6-5b4c-38d2-b0b6-e18c8aac4dd8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aef684d4-e914-36a2-a534-2034dfdaacf9" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The declaration of the 'Shape' type should be preceded by a comment that contains the '@brief' tag" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="399430900" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="399430900" unbViolId="b19c5262-ea1f-328c-9aec-67805b8475fa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02def3bb-0ced-35b3-89cb-0d7929f58cc1" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="JSF-057_a" lnHash="399430900" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="399430900" unbViolId="8a748acc-893d-38ba-b753-62bb8c284593" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94b025a1-526a-3ccb-b564-f8f76a861f58" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-46" lnHash="399430900" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="399430900" unbViolId="13bbbeaa-c5a8-3b81-8c73-3c94bb00663e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50da250e-ecfb-35a7-89ca-0a66f8eff595" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Protected section must be before private section" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="JSF-057_b" lnHash="399430900" rule.header="The protected section of a class will be declared before the private section" tool="c++test" lineHash="399430900" unbViolId="8f673b33-ef00-3d4f-befe-d0dc1aea3b83" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce2f8a6a-3436-3494-8f17-d26142f39e93" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Protected section must be before private section" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-47" lnHash="399430900" rule.header="Order of scopes in classes: protected before private" tool="c++test" lineHash="399430900" unbViolId="3f8d2fc3-b84a-3f46-b1b7-d6666bf4f6f1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93144f7a-31e3-360d-8e80-a6818ea9ac43" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' should be final" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="4" auth="user" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="399430900" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="399430900" unbViolId="ab1a8f19-40f0-33d0-abff-74a117a69397" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="584a5a81-e4cf-3e1f-8425-a1c65fabf5ca" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' should be final" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-23" lnHash="399430900" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="399430900" unbViolId="a163b58e-0db8-3034-8d2a-1d3c677fda3b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92954123-6263-358d-807a-ad8a7b3e860b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="85a5115f-9566-3daf-ae09-138824285d4e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09f2e7ee-6f1b-3e0f-95c7-d2b7b474d0b3" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="754f1044-a786-3960-b424-569867eeb193" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17bf2abd-3f74-3165-a319-1b0cfbecaa56" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="3711984f-3473-3a37-a77f-9ad9c64d84ad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ac25f6a-6e2f-31e9-a371-1c31f6cf54d0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="eb39f360-f716-3d62-9617-996d0165cc40" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6120dc7e-c706-3af3-a058-3fc543f21ab2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="e28a148e-6fa9-3975-aab5-9298ef5fb02c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e041db67-ea00-3bae-9080-e6da0038853a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Shape'" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="399430900" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="399430900" unbViolId="826be034-5d09-3787-8e83-55ebe5a6ff4f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="524b9afb-b370-311e-96a7-5ddf60724c46" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing assignment operator or special comment" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="MRM-04" lnHash="399430900" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="399430900" unbViolId="c95246e6-440e-353b-b767-c2425d18b4f5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce80e14f-65cf-314b-9c8c-113918e7ec8d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing copy constructor or special comment" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="MRM-05" lnHash="399430900" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="399430900" unbViolId="5831c729-7d95-3fcb-bc6c-3b659506de39" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11a679d5-9ceb-37f8-ab7a-34f32e0144c7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing assignment operator or special comment" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="MRM-47" lnHash="399430900" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="399430900" unbViolId="b1c08a42-0e5f-33fa-9480-4a7ad3cf496b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81c6c731-f9ff-3f1e-8596-1a65ee9fb2bf" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' missing copy constructor or special comment" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="MRM-48" lnHash="399430900" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="399430900" unbViolId="1781fdb9-394e-3a0b-8abf-ce40897d309c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad3acd8a-248c-3748-a321-7b6c619c15c9" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The 'Shape' identifier should have the 'C' prefix" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="NAMING-HN-19" lnHash="399430900" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="399430900" unbViolId="7bb1bb0a-1878-3f1e-a78c-c32ee1c5e2c7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b42aa8c1-d522-3b91-a84a-d92c83e084c1" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' has virtual functions without a virtual destructor" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="OOP-23" lnHash="399430900" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="399430900" unbViolId="4681bb1e-5e52-362d-ba5f-244d4521ca49" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34747258-e655-3ce8-8717-ac5b8007fc4d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="In a class 'Shape' number of accessor functions (2) exceeds number of member variables (1)" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="4" auth="user" locRef="6" rule="OPT-27" lnHash="399430900" rule.header="The number of accessor and mutator functions should be minimized" tool="c++test" lineHash="399430900" unbViolId="4cddac5a-e0b3-3fca-bcdf-3d83f6a938c0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd781dfc-b938-31f6-a9fb-dbaf5fbcc424" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Put base class 'Shape' into separate file" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-12" lnHash="399430900" rule.header="Put classes that are used as base classes and classes that are used as member variables into separate include files" tool="c++test" lineHash="399430900" unbViolId="c574cd4e-94ed-3ae6-a46a-31e0a54f998c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dc42e1e-f078-3198-90de-97d87a38c080" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="1" auth="user" locRef="6" rule="OOP-22" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="b06f6c37-2ff2-3d6d-ae97-febaee785bb7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4660726c-451b-3fc4-9831-87b539298db0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="1" auth="user" locRef="6" rule="CWE-772-b" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="2598f66c-5134-341b-8249-f6a6aae7cbbb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81f81cba-053b-3a03-88a2-dbdde46e1dab" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="CERT_CPP-OOP52-a" lnHash="399430900" rule.header="Define a virtual destructor in classes used as base classes which have virtual functions" tool="c++test" lineHash="399430900" unbViolId="e2ba3516-ddd3-3051-a34e-3a35cca3ff99" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89dc2cbd-b579-3a17-ac1d-ab328cc80502" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Class 'Shape' must define a virtual destructor" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="JSF-078" lnHash="399430900" rule.header="All base classes with a virtual function shall define a virtual destructor" tool="c++test" lineHash="399430900" unbViolId="7c6f3158-113e-3253-a845-6d38da1f9c71" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6d65ff-642f-36b7-bc38-ca7382f59bbf" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The type name 'Shape' is not a unique identifier in the testing scope" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="399430900" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="399430900" unbViolId="82769edf-4d4a-305d-bcbf-4594dc1906ca" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6c8e3984-cc8d-3b28-a58f-b72a3fe67730" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="The type name 'Shape' is not a unique identifier in the testing scope" ln="6" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="6" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="399430900" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="399430900" unbViolId="96428e84-aeff-3189-9e41-4e5612d42ffd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="106726b8-78cc-3fc7-947b-d64469cb1ca9" locEndPos="7" locType="sr" hash="1537905639" locEndLn="6" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="4" auth="user" locRef="6" rule="JSF-043" lnHash="-1878228628" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1878228628" unbViolId="746ec3a2-0605-3f09-9cc8-895f004a699c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac9792f4-b1e6-3d4d-a7e8-30f8de2625dd" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="5" auth="user" locRef="6" rule="FORMAT-01" lnHash="-1878228628" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1878228628" unbViolId="ee383f39-937d-3b7c-be38-094305fe90c3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7737826e-95de-3545-9042-95f0b8c2c1b6" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="5" auth="user" locRef="6" rule="HICPP-2_1_1-a" lnHash="-1878228628" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1878228628" unbViolId="b14a8f83-1750-32af-9d89-20285046e8f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8b965f-0fc8-33c8-8fde-2f9b60ec1f64" locEndPos="1" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier '_position' differs only by presence/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="-1878228628" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1878228628" unbViolId="ed2acc09-11d5-30dd-a2b6-f721b2f53d84" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a265dfed-573a-3011-82d3-bd7a4b1cf769" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The identifier '_position' differs only by presence/absence of the underscore character from identifier 'position' declared in file 'Shapes.hpp'" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="-1878228628" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1878228628" unbViolId="83041096-c0f5-38bc-9029-27ab0d9a1e41" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59239a8f-3e9c-3b47-97f5-8f8b8de9bb1c" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' member variable should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="-1878228628" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1878228628" unbViolId="e5b14da6-c266-38c4-a58b-2297fd3479b1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="385118cc-28b0-3a73-813e-55557a9d86d9" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' member variable should be preceded by a comment that contains the '@brief' tag" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-1878228628" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1878228628" unbViolId="6f7f4929-2da7-33b6-b4d6-512f711a2d9f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec03032e-a946-365f-8a10-c2d88933808e" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Member variable '_position' shall begin with a lowercase letter" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="NAMING-07" lnHash="-1878228628" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="-1878228628" unbViolId="396a8656-5ee0-3d8a-925d-ece024053833" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a97e677-bbbe-3eeb-a896-6eb808c22f0c" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Naming convention not followed: _position" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="NAMING-14" lnHash="-1878228628" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="-1878228628" unbViolId="c0378af8-7634-39d7-91bb-d26f59e84088" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="341d14d5-102e-3c28-801f-632b58d7b8bc" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_position' is not allowed" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="NAMING-33" lnHash="-1878228628" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="-1878228628" unbViolId="33c1de6c-a6ac-343e-977e-6d57617adcf4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3a3ffea-5102-3688-af12-ca8f8b6b020c" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_position' is not allowed" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="JSF-047" lnHash="-1878228628" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="-1878228628" unbViolId="35d8c65d-994d-39f9-87d4-ed02df4fe83d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9efea15-b29d-3632-9143-18c81747450a" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The '_position' identifier should have the 'm_' prefix" ln="7" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="7" sev="3" auth="user" locRef="6" rule="NAMING-HN-29" lnHash="-1878228628" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="-1878228628" unbViolId="96ddb8a0-559c-34b8-8ffe-9c83601fddd8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb6ad476-b505-34f3-996a-12389a895577" locEndPos="8" locType="sr" hash="1537905639" locEndLn="7" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="1257077025" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1257077025" unbViolId="126a2207-fac2-3e59-94de-907ddf3ab41b" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfcd920c-846e-3da9-baa5-2d00a41e0e5d" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="1257077025" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1257077025" unbViolId="33b1486a-1980-37c2-9121-0918aaee4f6a" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0e6cd55-c240-3ce8-82f1-286c3f97f2b8" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="0881fbbc-7715-3421-a352-488fdc478b6f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0381aaef-a447-38a5-9627-f6cd34f580a6" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="1257077025" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="c83c0709-0673-389b-9e15-74e8b336e242" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0a45676-d68f-36eb-ac57-b3b56307688e" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="85552c2b-89e0-39a5-b13d-a0fe5af5e6b0" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="399c0b74-242c-37bd-9c35-ea5be3d61149" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="67b7995c-fbdb-38fe-b32b-e766bd6760b4" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2b52a3c-552c-3184-98bd-03a6e90c25e9" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="1257077025" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1257077025" unbViolId="b396a27d-6728-3dc0-bd46-20d4073cd4e6" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ad39cd4-54b6-3bdd-a865-5affcc25443b" locEndPos="13" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="JSF-051" lnHash="1257077025" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="1257077025" unbViolId="6c439926-d1fa-3afa-99a1-bc39b2da0099" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46060bb9-e5c6-33ba-8bae-0a35344f3904" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="NAMING-44" lnHash="1257077025" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="1257077025" unbViolId="e5c4a8a7-d181-3f6c-b08a-63cd7be42d60" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b5dddfb-5cdb-3d67-8a38-a8063d09b21a" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The declaration of the 'getArea' function is not preceded by a comment" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="4" auth="user" locRef="6" rule="JSF-134_b" lnHash="1257077025" rule.header="Document functions in comments that precede function declarations" tool="c++test" lineHash="1257077025" unbViolId="f57eb60d-a254-3800-822e-122f31e47754" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2667e304-03fd-3c3b-915b-2585b6508a41" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The declaration of the 'getArea' function is not preceded by a comment" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="COMMENT-04_b" lnHash="1257077025" rule.header="Document functions in comments that precede function declarations" tool="c++test" lineHash="1257077025" unbViolId="ea680064-0276-310a-acae-7844c9446ee0" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f670dd39-c14b-344c-a3d8-4921d7e2028b" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="1257077025" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1257077025" unbViolId="57774968-a206-3774-8f9d-eb327f235392" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deaa7ca6-b91f-3a25-b7f3-f027b57066c2" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1257077025" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1257077025" unbViolId="0f56ff02-1732-315c-8302-1007fb3d4603" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5fc5ea8-dffa-359d-8d61-449c01652012" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1257077025" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1257077025" unbViolId="e75293d4-ac78-32bc-a0fd-7cd8d2e72c8c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b58ea062-99b2-366f-b0e7-a93525ff2824" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="1257077025" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1257077025" unbViolId="eb9add9b-db58-32ac-a324-bd9fd5e6ac68" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1f77342-bd51-3c8c-8c45-8d1283f76591" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-25" lnHash="1257077025" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="1257077025" unbViolId="cb40f316-81a3-3013-8c84-b414a540e497" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05f63aef-98f7-3d5a-89a5-77ff74b34e51" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="9" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="9" sev="3" auth="user" locRef="6" rule="NAMING-17" lnHash="1257077025" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1257077025" unbViolId="e6e3a432-1a67-30a7-be9d-cce73a833b81" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd8553fa-e656-3627-8b37-8c30911e6f39" locEndPos="20" locType="sr" hash="1537905639" locEndLn="9" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="-1486716559" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-1486716559" unbViolId="7106b2f2-a0e6-3e58-9bf9-7857d2c864e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e466d304-3890-38ab-a0d1-c471ccc6268d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="6ebc4ae6-4ec0-39fb-8a56-5ea17cd9c44a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b1f0e3d-ddd9-3706-b4fb-26b16cebd137" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="141eaccc-86ed-3183-8b8f-84c9859debec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adc19aca-e366-32ef-ac6e-5388f4b5c7a3" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="e218f47c-8c8a-3cf0-be06-74795ad9ecf4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91f51c9e-9784-355b-a660-9ac982f399b8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="f91c1be3-6b7e-3f1f-9581-2490dbf99835" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d7ca7f3-9fcf-3b96-9aa9-d41a143d023c" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="e1958709-f401-3efc-92b7-453a91899fcc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f0329d9-226c-390d-ab6c-8a442803d715" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="-1486716559" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1486716559" unbViolId="ddf73521-872b-3a2b-ac22-505d58452fa2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bf4e492-b638-35f7-b030-821fbf3300e8" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="-1486716559" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-1486716559" unbViolId="2e7b332e-7583-3354-8e71-107e9cc89c08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3652b7de-5721-3330-a506-7bd84ac114c3" locEndPos="1" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The return type of the 'getPosition' function should be declared as 'auto&amp;'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="CODSTA-MCPP-08_b" lnHash="-1486716559" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1486716559" unbViolId="2f572748-a65d-3614-891e-feff7677ef6f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa764af7-00c5-378d-8fda-706b67fb883b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The definition of the 'getPosition' function is not preceded by a comment" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="-1486716559" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1486716559" unbViolId="06ed9f30-83ce-3a49-b97c-e3b9614c150f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99cd9ac7-ca95-3516-8d0e-015adc867b9f" locEndPos="12" locType="sr" urgent="true" hash="1537905639" locEndLn="10" goals="1,"/>
    <StdViol msg="The definition of the 'getPosition' function is not preceded by a comment" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="-1486716559" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1486716559" unbViolId="750469c7-49b4-3b86-a704-381ea6e8cb84" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d51e2ea-d8bc-35fb-b786-b64fc02cad7a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The name 'getPosition' should be composed only of lowercase letters" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-051" lnHash="-1486716559" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1486716559" unbViolId="36797277-d69b-392d-bb9d-ea05786d695f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a40526e4-f858-3c8e-ace6-ddf060b2f4db" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The name 'getPosition' should be composed only of lowercase letters" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="NAMING-44" lnHash="-1486716559" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1486716559" unbViolId="c87c89b7-801e-3a16-9b0c-5560c1007e89" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5529b83-c879-306b-9baf-6b22ab720194" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@brief' tag" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="-1486716559" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1486716559" unbViolId="81822dee-a897-3222-b0a7-3318669f7f60" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e6a06b2-4c64-37a6-9306-4b19c4c0e2f2" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@brief' tag" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-1486716559" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1486716559" unbViolId="d5b46b7f-98d1-38c4-8305-59be6bd432f4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb8fc247-28b2-361e-b8f7-bd8a8b16f3f0" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@return' tag" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-1486716559" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1486716559" unbViolId="2e925d26-219a-3d68-8831-17d6196bd16d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ac772e1-06ef-3ba7-80b0-4c92b40991bc" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be preceded by a comment that contains the '@return' tag" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="-1486716559" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1486716559" unbViolId="54e59886-9a7a-36d7-95b1-bd2ca7c772a7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53b5b2d0-d9b1-33ca-9518-0d0b390dfd13" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be declared 'noexcept'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="AUTOSAR-A15_4_4-a" lnHash="-1486716559" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1486716559" unbViolId="29dcd4ed-6dfa-3848-96ee-4710f914d5b8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63bf7d8b-b9c9-3461-9c3a-3dbd52ff387b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="The 'getPosition' function should be declared 'noexcept'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-09" lnHash="-1486716559" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-1486716559" unbViolId="e6e0edcb-ef44-30b6-b543-ae11d8280fe0" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25a6e9ba-fc22-3d54-84a2-330a17f042c3" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getPosition'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-28" lnHash="-1486716559" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1486716559" unbViolId="ad190f2c-ce07-3588-9955-c65de86728fa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ba80b3e-5b43-3f1b-bd71-eb18f0eeb5cf" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Function 'getPosition' has Cyclomatic Complexity value: 1" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="-1486716559" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1486716559" unbViolId="e29a3a78-690f-38ec-a6d1-711a2a3c8cde" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd93f469-d28c-3bcb-814b-637e8b0495d9" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Function 'getPosition' has Essential Complexity value: 1" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="-1486716559" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1486716559" unbViolId="36a735e5-007c-31c9-a2c0-9afc11a4d3a4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a530bb36-2ab5-36cf-8021-031eda27f895" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Naming convention not followed: getPosition" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="NAMING-17" lnHash="-1486716559" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1486716559" unbViolId="90ae4e93-15f4-3b4e-ba2d-42af2eefbe23" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="884961d6-bcbe-3787-bb8b-28c503952f1b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Member function 'getPosition' returns handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-06" lnHash="-1486716559" rule.header="Avoid returning handles to class data from member functions" tool="c++test" lineHash="-1486716559" unbViolId="2dbd6e39-7888-3789-b273-09519232af39" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf7e08ce-84ad-3e8a-a7a4-c17dce3855cf" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="MISRA2008-9_3_2_b" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to class-data" tool="c++test" lineHash="-1486716559" unbViolId="e8da5cb3-a8fd-3d24-a544-c51f5f63b51b" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="112d1a92-d34e-30cf-90fb-ebd2c414fae1" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="HICPP-9_1_4-a" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="46624a09-a63b-38c5-a982-81947c717e34" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="239ce877-81d1-3be1-91be-9e286a9bb05b" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="2" auth="user" locRef="6" rule="AUTOSAR-A9_3_1-a" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="f4da53a5-8f94-340f-9ef5-ea1eae215355" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eaa18ec4-4a85-37d2-9388-fb4417171533" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Public member function 'getPosition' returns non-const handles to member data: '_position'" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="OOP-36" lnHash="-1486716559" rule.header="Public member functions shall not return non-const handles to private/protected class-data" tool="c++test" lineHash="-1486716559" unbViolId="8f06ccb3-abfb-3bc4-8ba9-e1c5fd0ead85" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="165dee2f-640b-3264-8358-a6d7ab3861d9" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-25_b" lnHash="-1486716559" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1486716559" unbViolId="0ef51933-5d6a-3fdb-bebb-a87479243baf" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="725f649c-6a27-35f1-9094-292e0c864761" locEndPos="28" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="45ced668-63c0-35c2-b63e-0987534562e8" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b56025cc-5d7e-34d2-937d-62863b68b12d" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="dd9a7547-e932-3f47-a6de-8243142b3e9f" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e1641c7-5347-3b6c-b110-d43c681282e4" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-1486716559" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1486716559" unbViolId="67039d57-c2c0-3e9b-8ba5-d228be5b1a4a" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adb18a72-2675-3047-abfc-64653afbe225" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="10" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="10" sev="3" auth="user" locRef="6" rule="FORMAT-03" lnHash="-1486716559" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-1486716559" unbViolId="2ed06b23-82fb-3693-8e4d-51e00d96c0c6" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9664455a-482a-3805-bbd3-1773e51f18be" locEndPos="46" locType="sr" hash="1537905639" locEndLn="10" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="469057311" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="469057311" unbViolId="1d3de210-1efe-3f94-bb48-22b74b9d7678" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d9c431c-3fd7-3aef-81a5-1841fce56e00" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="37a38867-57d4-344f-96ef-a893ab84c023" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="263271cd-9c48-32ea-aae6-d2c6df2e59b7" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="8c3f5c00-ee30-3a0c-be28-fd86ffd37b40" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6131ccf-272e-3518-9f91-e0e59fa5fde5" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="a3020c1b-47c7-33ec-b969-1e3420b3fc17" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a51baa51-4e25-36e7-b917-e79423eb573d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="469057311" unbViolId="f84ab3f3-4d65-3d13-bd18-d91f8e268f76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="273c5d60-2591-39e7-9cb6-1eb184c51021" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="469057311" unbViolId="7bdc82c6-40cd-3588-be4b-f9e328e7bf5a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="915ca6df-94f5-34f7-88b0-b71349841dc0" locEndPos="1" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The definition of the 'Shape' function is not preceded by a comment" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="469057311" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="469057311" unbViolId="1482de85-97d6-3d5f-bfb0-35f523524d53" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d941ad5-3831-38be-9d5a-1d37553f224a" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The definition of the 'Shape' function is not preceded by a comment" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="469057311" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="469057311" unbViolId="69056115-478a-3b59-8387-8c5495e9ddd4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="314519ce-ec61-3fa8-9a4b-42d9ed98123b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' function should be preceded by a comment that contains the '@brief' tag" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="469057311" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="469057311" unbViolId="c23b9ad1-1ac1-3d17-b372-b783ffb6c673" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0e33af8-66fd-37cc-98fb-37c4a4f1c89b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' function should be preceded by a comment that contains the '@brief' tag" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="469057311" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="469057311" unbViolId="bee745a2-0c89-386d-81f5-6b806decbcd4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49cdd72f-6d04-3e98-8f8d-050f1cc14209" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="469057311" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="469057311" unbViolId="2d8aefda-5bfc-392a-9b69-35498cb902e9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e913769-c8ed-3f3d-826f-ca37ec49de68" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="469057311" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="469057311" unbViolId="a823fdae-6877-3bef-b7de-4a3138aafa0a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e9758cf-018b-3fc4-83c0-fd85e6f8bd18" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Class 'Shape' defines an inline constructor" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="OPT-17" lnHash="469057311" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="469057311" unbViolId="1cb0b3d8-27f1-39e0-9268-418a8933a9f9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94527c95-b67d-3480-9cea-59ed0c7f173c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="4" auth="user" locRef="6" rule="JSF-177_b" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="a27ab4bd-963f-38f9-9847-c23cab11dc6e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="387431a3-d1a0-3c19-b191-994b01ac3f52" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="1" auth="user" locRef="6" rule="CODSTA-CPP-04" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="b561611c-a05e-3147-8bbb-5f6f7d9140a3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="811b5b7f-b2bf-321d-a8c4-894210d49d83" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Constructor 'Shape' allowing conversion should be made explicit" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="1" auth="user" locRef="6" rule="HICPP-12_1_1-a" lnHash="469057311" rule.header="Constructors allowing for conversion should be made explicit" tool="c++test" lineHash="469057311" unbViolId="68ad3d4b-a074-3b27-97f6-3105758f6e26" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="045cdcbe-9fc9-3c1c-b0b6-c1d8eb346926" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Function 'Shape' has Cyclomatic Complexity value: 1" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="469057311" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="469057311" unbViolId="f94fcfea-1b76-3f01-a536-5983038694b0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56135cd2-47dd-34e1-bcf8-18d60dfaaeea" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Function 'Shape' has Essential Complexity value: 1" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="469057311" rule.header="Report Essential Complexity" tool="c++test" lineHash="469057311" unbViolId="7362bc9e-b0d2-369b-8c3a-035c6f9773fe" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37265a82-47b3-3da2-a454-611477cd1787" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' identifier is the same as the name of a type defined in the testing scope" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="469057311" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="469057311" unbViolId="8bbbfcaa-fff7-3abc-ba72-f3b762b835c5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="eb03e42a-30d3-3a4b-a597-b3e9b482ff9e" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The 'Shape' identifier is the same as the name of a type defined in the testing scope" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="469057311" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="469057311" unbViolId="a315ee46-f96b-356d-af39-2eb887fe4ff7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="042b0031-3c6c-3f43-bf9a-e5674cdaa309" locEndPos="5" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="469057311" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="469057311" unbViolId="087e2b81-1c52-30c5-8344-1465bbeec4ab" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b27a0b14-a7d3-3194-8ee8-49ee294605e3" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="469057311" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="469057311" unbViolId="1954add2-8f5f-31e9-84f9-b8509ab05841" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d659504-f676-3be9-929c-aa8eecd3edbf" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="751b92e5-bf2a-3fa0-970b-9136e9f1a04c" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5270c570-99f1-3ff0-8403-2d53300d4cf9" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="fe186676-38cc-3d9c-8bff-e5c78aefa75c" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d89f77c4-8359-360d-8e56-5695261abf43" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="c18a17a1-575d-399b-8cca-6cfc31c8bafd" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a88abfc6-0572-378b-940d-052eee3f3856" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in class" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="469057311" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="469057311" unbViolId="6e0f98a0-4708-39df-b100-683b33e4826a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa38df52-4fc7-3f82-8c4f-1876f53581f6" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="OPT-14" lnHash="469057311" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="469057311" unbViolId="b0e5e415-25f3-325d-a727-a970a7413b33" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f93d01a-8454-3c38-a8c3-824a934469d4" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="4" auth="user" locRef="6" rule="JSF-125_a" lnHash="469057311" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="469057311" unbViolId="cb232613-6ed4-3896-a77c-cf708279647a" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86103ce6-8a63-31a1-b360-c5d7812978be" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Shape' is passed by value" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="4" auth="user" locRef="6" rule="JSF-117" lnHash="469057311" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="469057311" unbViolId="ee970f79-70fa-38a2-bad4-3f7411575f43" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ba36100-0e58-3240-a82b-750747207da5" locEndPos="17" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="73d492f9-92ed-30ee-b64a-479a7003e176" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="029fd0fd-0cd7-3c71-bb96-3a8a5c598b01" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="18e61cdc-6a75-35b8-aa65-d95f7fa8e2db" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c52308a5-2aef-3a42-a276-c7b7c983f7c2" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="12" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="12" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="469057311" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="469057311" unbViolId="2b3732eb-41da-3d58-88f1-cead602129d3" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f09c7ef3-a6e6-3fe6-b09b-d256f55db48e" locEndPos="50" locType="sr" hash="1537905639" locEndLn="12" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="-769770316" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-769770316" unbViolId="80d2de92-f02b-3711-80a8-478d8f92f567" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7ab2b0d-8c3d-3437-9370-f9f59da9f89c" locEndPos="1" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="-769770316" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-769770316" unbViolId="d75de1d4-a7a2-3de1-9d46-c35938deb1c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="468533ea-a03e-320f-8870-691082fd09d7" locEndPos="1" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="4" auth="user" locRef="6" rule="JSF-098" lnHash="-769770316" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-769770316" unbViolId="0c2e9fd3-ca5f-3363-9738-8d698940f9cd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3625023b-727f-3f9f-bf46-febebef580b6" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="-769770316" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-769770316" unbViolId="1ec88c18-59ca-3881-a768-36a97c443ea2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa274023-0eb4-3011-b3ea-b0184547427a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-36" lnHash="-769770316" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-769770316" unbViolId="bb255561-5b51-3283-874d-ae0d72af8ea9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5acdc49-f29c-3497-8ec6-0da1c6e16892" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Do not declare the 'LineSegment' type in the global namespace" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="MISRA2008-7_3_1" lnHash="-769770316" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-769770316" unbViolId="52dd74b6-6261-35a5-b0ee-f94cc1ef5ed7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccc7d9ea-d52d-3d6a-b9bd-8978daabbccc" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="-769770316" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-769770316" unbViolId="406c86d8-8e24-3a8e-b44b-111256c090f1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f46fc668-9162-3373-8c30-988d46286807" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The declaration of the 'LineSegment' type should be preceded by a comment that contains the '@brief' tag" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-769770316" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-769770316" unbViolId="a5d51726-82aa-37c3-9292-509352ad4855" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ae78748-855b-3d83-abcc-c0db2d5a68c5" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="JSF-057_a" lnHash="-769770316" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="-769770316" unbViolId="3fc7740d-445f-3e56-ac0c-3953473c6f5b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6321b218-577f-365c-9101-9272f8144f9d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-46" lnHash="-769770316" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="-769770316" unbViolId="decd64cc-cdd1-3406-82b2-e18671278e03" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9a06fbf-1d0a-3007-adec-61ccce5e08e3" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' should be final" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="4" auth="user" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="-769770316" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-769770316" unbViolId="9c12b731-ce0a-3e9e-be23-d798840aed48" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b16987c4-4249-36f0-9f22-9252768276d7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' should be final" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-23" lnHash="-769770316" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-769770316" unbViolId="6550452e-8208-3f3c-97c4-04c2af9b14f0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4423e8a-4558-3a1e-90b0-4bac70cbca1d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="a94d4a08-92a3-3b25-beca-ac5fc1f80c10" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b9890d7-ab3a-370c-88c0-d2cc01af4cd7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="7fcb41a1-645e-3341-acdf-e7baf2dda793" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f791588-916c-3ea3-a6d0-66d2591e9bc0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="ad8246a5-51fa-3b72-b41b-cf8ade5cc852" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f824700-db73-3826-ae1c-c3588712f5d3" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="3ce889a6-ec86-351f-80f1-41b39a30737b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4706db7-f06b-39ca-b0b5-51d8edbf0ced" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="03e304f7-5cd4-3792-8a72-13d798120de7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="413894cd-481d-306f-831c-1452147c4d36" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'LineSegment'" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="-769770316" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-769770316" unbViolId="071a153a-e72c-3249-b47b-0304d1d3c1f9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e9a5c0c-e913-36e1-a004-ab6a937082bf" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing assignment operator or special comment" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="MRM-04" lnHash="-769770316" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="5c5e7ab1-8545-3e89-9765-3d1f234e4b33" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e745d4fa-fe75-3b91-b7cf-91ba4ed38e0d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing copy constructor or special comment" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="MRM-05" lnHash="-769770316" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="73253361-9010-3c18-b29b-764ad4b86fcb" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ad914a0-a92c-35f3-b643-a393155f5607" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing assignment operator or special comment" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="MRM-47" lnHash="-769770316" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="4b548deb-b086-30a5-8c2d-e314ce57f206" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="687402b2-5b87-3436-9503-db7d250b043b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' missing copy constructor or special comment" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="MRM-48" lnHash="-769770316" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="-769770316" unbViolId="6d6d45cb-6b51-3709-af44-5de2c7ceb036" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0098bbff-9cc4-38bc-8901-609c15c495b2" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="All letters beside the first one in name 'LineSegment' should be lowercase" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="NAMING-40" lnHash="-769770316" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-769770316" unbViolId="68e9ffe3-192f-3809-a67e-d1bca4fe9652" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30006273-3fad-3601-b872-88bd97684e48" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier should have the 'C' prefix" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="NAMING-HN-19" lnHash="-769770316" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-769770316" unbViolId="633e1ffb-0e28-3023-8f80-b22e39f24dc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="021d8e10-3230-39a4-886f-daa8cbc6c41b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Class 'LineSegment' has virtual functions without a virtual destructor" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="OOP-23" lnHash="-769770316" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="-769770316" unbViolId="89814d35-53f3-31ee-aa6a-2d59321a120f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6ec14bb-6a4b-36b4-b096-5fc5748e96db" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The type name 'LineSegment' is not a unique identifier in the testing scope" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="-769770316" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-769770316" unbViolId="3920f1e0-8640-3dff-a577-70b053e22c5a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e8aae359-928b-385f-bc75-fe0727dc1f13" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="The type name 'LineSegment' is not a unique identifier in the testing scope" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="-769770316" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="-769770316" unbViolId="294789a4-620c-3720-9492-610876acec8c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c3a7517e-736d-3d39-8eb7-3992ef9e534b" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="4" auth="user" locRef="6" rule="AUTOSAR-A0_1_6-a" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="ee4e4903-1744-398c-9ab9-4830d0907d49" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6212236a-6c01-3947-b88c-c2851be8872c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="3" auth="user" locRef="6" rule="GLOBAL-UNUSEDTYPE" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="5c52b6e1-6d7b-3f5d-8f29-5de460dac0af" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bb5e9ef4-f4a0-3d0d-a780-8f5246e33cc6" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="A declaration of the 'LineSegment' type which is not used has been found" ln="15" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="15" sev="2" auth="user" locRef="6" rule="MISRA2008-0_1_5" lnHash="-769770316" rule.header="A project shall not contain unused type declarations" tool="c++test" lineHash="-769770316" unbViolId="56638789-fca1-3f64-af5c-d5d5b51549a2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="d286b56d-e267-3ab2-9f63-6b1b4af9efb6" locEndPos="7" locType="sr" hash="1537905639" locEndLn="15" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="4" auth="user" locRef="6" rule="JSF-043" lnHash="1606009158" rule.header="Tabs should be avoided" tool="c++test" lineHash="1606009158" unbViolId="66d094c8-3900-3e24-a7be-86378ed2c3f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="264d8622-92cf-3531-ad76-0561fba00b87" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="5" auth="user" locRef="6" rule="FORMAT-01" lnHash="1606009158" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1606009158" unbViolId="f6acba3a-8ccb-3f80-81e8-3fbd0c4b63fc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c4b6e55-6f6b-35bc-a2c2-8d3111285def" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="5" auth="user" locRef="6" rule="HICPP-2_1_1-a" lnHash="1606009158" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1606009158" unbViolId="41a0a7c2-27a0-36f5-bad4-c076bdc1439b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f0e1fbf-9ec3-307d-82b4-df1de4d13e1e" locEndPos="1" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The identifier '_end' differs only by presence/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="1606009158" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1606009158" unbViolId="ffc20488-3559-3618-b9d2-5e863f3120b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f2f1c8d-6d00-3ced-8907-422f6c1e8b58" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The identifier '_end' differs only by presence/absence of the underscore character from identifier 'end' declared in file 'Shapes.hpp'" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="1606009158" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1606009158" unbViolId="b76ac6c5-2e0d-3667-85d5-2965920d3774" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9e5cc8d-dd05-3a72-868c-2e8b46f88d80" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="OPT-05" lnHash="1606009158" rule.header="Avoid unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="c21040be-cf8f-3b66-8d3a-cbc7e19fcb74" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94335679-fd6b-39b3-a4fa-cb462c55a9d9" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="2" auth="user" locRef="6" rule="AUTOSAR-M0_1_3-c" lnHash="1606009158" rule.header="Avoid unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="44161e51-9ddf-3753-8be4-6f3856cbcbf8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c05993cf-20e1-3a21-bb28-5473c5f8cf60" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Private member variable '_end' is declared but not used" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="2" auth="user" locRef="6" rule="MISRA2008-0_1_3_c" lnHash="1606009158" rule.header="Eliminate unused private member variables" tool="c++test" lineHash="1606009158" unbViolId="8af7ce29-dd68-3691-8857-bd1387efc499" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="331ac225-1949-3a6c-bbb3-7a360044065d" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' member variable should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="1606009158" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1606009158" unbViolId="25a73682-0262-33a4-8f31-49cdd66c02a4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="450a0ffd-ef54-399c-9950-3d6f263f971f" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' member variable should be preceded by a comment that contains the '@brief' tag" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1606009158" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1606009158" unbViolId="5cf37349-c93e-3e69-8eda-7259db0a36d5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a8d3b0b-e068-30e8-850b-01efff10ed36" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Member variable '_end' shall begin with a lowercase letter" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="NAMING-07" lnHash="1606009158" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="1606009158" unbViolId="fa9964fd-d4ca-3251-ab4d-d22025d11db5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeade0f4-b33d-32ac-8ea9-ee1c6f47d850" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Naming convention not followed: _end" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="NAMING-14" lnHash="1606009158" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="1606009158" unbViolId="9208de3e-b2ef-35db-b470-6891f6a0a581" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a161f627-c5cb-320d-8cbf-c84cee46d94a" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_end' is not allowed" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="NAMING-33" lnHash="1606009158" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="1606009158" unbViolId="0df6e812-3987-37be-a2be-471f62183b3c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a99f87e-3aa0-3ef8-ae89-4b2ca552f6fb" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_end' is not allowed" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="JSF-047" lnHash="1606009158" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="1606009158" unbViolId="cfd958b0-0af9-3bb5-9665-a8c3f6b9fc2f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a9c4429-48c5-37c3-b065-45609c593bf3" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="The '_end' identifier should have the 'm_' prefix" ln="16" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="16" sev="3" auth="user" locRef="6" rule="NAMING-HN-29" lnHash="1606009158" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="1606009158" unbViolId="7ebb8707-3693-3584-b736-ad5271f41869" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37f7d991-1b37-3556-8db2-aa26fe430d9a" locEndPos="8" locType="sr" hash="1537905639" locEndLn="16" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="460467427" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="460467427" unbViolId="d1776885-8846-3480-91ed-ebe9b11f3bcf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f656897-e826-3c28-96f7-a539177b6b9d" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="90c1c35f-1013-37ce-a052-223ca346e51c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93646b4f-e24d-3d5e-895a-5146ad4165fe" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="5b7d9003-7257-3109-866c-8acaccbe0b5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd11aa4f-93bd-3a08-b817-bb94389433e5" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="4bc136f8-e9d9-314e-ae28-d4673ffa1fd7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="846a2c71-5461-3290-af88-8a2612cac1ea" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="460467427" unbViolId="81f21332-60f9-35ef-89f2-8167affffbc9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d12bd5a-4b7b-3477-ba98-4393ef4de420" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="460467427" unbViolId="a1a9d2b0-c652-3955-8d01-96e9baef8708" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee0d161b-982b-359c-87ed-af82de197609" locEndPos="1" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The definition of the 'LineSegment' function is not preceded by a comment" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="460467427" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="460467427" unbViolId="e0d65eea-cd55-3531-be52-d1c1e2cc6a69" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ebe2e3a-303d-3e8a-a451-e2a3d247f131" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The definition of the 'LineSegment' function is not preceded by a comment" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="460467427" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="460467427" unbViolId="27eea76b-c016-3116-aae7-6ad74ebece83" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95a23ef5-8aa4-3255-832a-8fe1f9ff804f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="460467427" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="460467427" unbViolId="c8d44565-3731-379c-a67d-6d4fdda3b441" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30f74f0e-35e1-3a88-9d34-6d189f350329" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function should be preceded by a comment that contains the '@brief' tag" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="460467427" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="460467427" unbViolId="0f1c465d-032d-325a-b262-44741b95d239" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c980bbfa-3195-322e-a40a-2bcdffb7b666" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="1ea7fe8a-b45c-397d-8a03-3c96341d6cab" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f874e2e-6b3c-3a83-a9d5-79d92ffb34e2" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="67c190dc-bcbd-31bc-9721-937089dfeb87" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a16c57e-614c-3de5-bf86-10b230334412" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="14654ca0-ee46-3b5f-9a9b-2b4092f6ba84" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6cc1eb21-5945-31b2-861a-96e869e8f561" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'end' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="460467427" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="460467427" unbViolId="ff77c9b1-f2ff-3725-882d-c1e2c0b85472" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa8d2d3c-5382-338e-bd7f-0a658a0add78" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Class 'LineSegment' defines an inline constructor" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="OPT-17" lnHash="460467427" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="460467427" unbViolId="c54b9f21-dcc6-33ec-9658-c520083ac099" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f817055-40c5-3856-8229-ce02a21e6659" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'LineSegment' has Cyclomatic Complexity value: 1" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="460467427" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="460467427" unbViolId="451c279d-291c-37fd-ab02-c44ec8f3b733" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff3a09b5-e822-36aa-867f-265b95f79e1f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Function 'LineSegment' has Essential Complexity value: 1" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="460467427" rule.header="Report Essential Complexity" tool="c++test" lineHash="460467427" unbViolId="f07a42d5-be93-35e6-a49a-8d339ddf4610" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56731d57-db8d-3d53-90ff-c341d670ef9d" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier is the same as the name of a type defined in the testing scope" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="460467427" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="460467427" unbViolId="ea0c8331-3090-34a2-98dc-735aaac56911" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b2a58a21-4e53-3fc0-85b0-29d4d3801ac5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' identifier is the same as the name of a type defined in the testing scope" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="460467427" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="460467427" unbViolId="c5556f51-fca6-380d-8b65-e9649943f3c8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="035915a1-aa69-342a-9cff-faf6109fd534" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="GLOBAL-UNUSEDFUNC" lnHash="460467427" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="460467427" unbViolId="1fc1902c-13f4-3f5b-96cf-c0ff9fdfb187" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="86ee7ced-32e9-315d-b249-baeebec71e17" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="AUTOSAR-M0_1_10-a" lnHash="460467427" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="460467427" unbViolId="bcb1f883-46a6-32a0-9297-b26f1902595f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fdd18488-1007-3b43-92b7-c542f4bc3947" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The 'LineSegment' function is not used in the testing scope" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="MISRA2008-0_1_10_b" lnHash="460467427" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="460467427" unbViolId="995a4ac2-3450-371a-9546-9c3bd3daeec5" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e4a0ae9d-68e7-3e7a-80b1-1219014e60fa" locEndPos="5" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="9e5fb71c-a367-385c-98c7-3d6a5da80068" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5ffe49b-d934-3fdb-8b3a-4fa6e7f0fe37" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="66a9da7b-5aee-32dc-8b24-f98be9c05496" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7834872-648b-3422-b4de-b6bb50dafddc" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="1cad702e-a3e3-3ee3-ba4b-3193da80b26a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80327cac-db51-3a34-976f-1f56460089af" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="f9fa068f-3203-3b2a-9255-3886d7e72bc8" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c68462d-6a18-3c0c-9783-dac3b8e918c1" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="9a8a7dfa-8b56-3cbd-a3ed-992558eb2ada" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a4d50ec-1006-3442-989b-8f07dcdd4e3c" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="fccad6f4-82bb-31cf-ac0d-1a803f95cf72" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83d7f8de-03f1-3b61-877f-7312da37b45f" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="OPT-14" lnHash="460467427" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="460467427" unbViolId="12bbf2f6-c258-39e2-8ac8-3cb9ef0a2602" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7d80475-7a91-35d5-8646-eca335627c11" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="JSF-125_a" lnHash="460467427" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="460467427" unbViolId="5cba6b78-9b94-36ea-bbe5-fc32b03f62fb" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecf54811-aa3d-3170-a13e-03f0f6a5468a" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="JSF-117" lnHash="460467427" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="460467427" unbViolId="4d5e6de2-5c09-342e-a2bd-e79db739f17a" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d08f15f1-444f-333d-96d1-677168c98ed2" locEndPos="23" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'end' differs only by presence/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="fcbc09de-d1b9-3e66-8a4c-d0e32005dfe2" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3041d455-46fa-39a7-967b-fcc2e277f3eb" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The identifier 'end' differs only by presence/absence of the underscore character from identifier '_end' declared in file 'Shapes.hpp'" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="460467427" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="460467427" unbViolId="35bdeb54-714c-33c1-854b-83651a663d03" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c8d5ea0-65b3-3d92-b9dc-a713191919fd" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="d907a690-1b4b-343a-9740-7d7e7c2a0a57" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b0e05a6-eba3-3f03-83cc-d432d951bb63" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="a9253846-e6a6-31a9-b807-55346f81b6d9" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e45c9bb-0a69-3bc0-9c6f-7dc1f9ad689b" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="452a95f6-221e-3cce-9b98-4d28ece42ce4" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a2ed52c4-0c75-33bc-8cfa-b96daf2fcb43" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Identifier name: 'end' differs only by presence/absence of the underscore character from identifier name: '_end' declared in class" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="460467427" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="460467427" unbViolId="a7ca8290-3988-3a5f-bc65-641cbc4f1ad1" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52ce4640-9637-3dc0-a154-b2bdcf2bfc63" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="OPT-14" lnHash="460467427" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="460467427" unbViolId="c0c2c002-bb9c-3622-9fdd-79c05f2db612" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99f32687-9e82-3d90-a080-5f649bd4e37c" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="JSF-125_a" lnHash="460467427" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="460467427" unbViolId="60f23378-f0a2-3f97-a56f-0f360b26bd25" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86fcbe89-8b5b-3e2c-a570-21b45de58ddd" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="The parameter 'end' of function 'LineSegment' is passed by value" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="4" auth="user" locRef="6" rule="JSF-117" lnHash="460467427" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="460467427" unbViolId="0d3efd6f-d3dd-39a6-a037-460e122c7d2c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8f1e72f-ad0e-3dec-a961-585809f14a2c" locEndPos="39" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="b01185c6-6b22-390e-b300-9bc74f707e19" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="924747ca-4db5-3ec8-9e26-f42e2b1e014a" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="9d25a33e-5543-35a9-9b13-55858d744f27" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2d8ef00-b858-38dd-b5f0-8efca1486592" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="18" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="18" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="460467427" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="460467427" unbViolId="5fc78301-0363-3062-b29a-d73327f7a6fb" locStartPos="73" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb0e2469-872f-34fb-bd47-07f9d696ca72" locEndPos="74" locType="sr" hash="1537905639" locEndLn="18" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="-392957557" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-392957557" unbViolId="58c4f738-6a3c-338c-937a-9f61f2cfde81" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c4a6920-e220-332c-bbd2-ef547112e01e" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="388c5041-1179-3f63-851f-44d755ba62dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e053bc73-7141-3d47-a279-e688afb2fb61" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="b57b6b1f-e049-3263-ab6d-38469b2f9f03" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03f0e6d4-c148-3177-9085-289a5e8f3d7f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="be9aab62-c11c-3bb9-8bdf-a2dbea9c2e23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fe5dfd4-42c4-35c6-a5f4-191faf422686" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="40a7e129-d922-36d5-b149-810b8e947e7d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa22f8e2-0d19-3aae-8e97-09cf9c6bb160" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="bd307e11-0cbb-3cb2-a51e-9b1022da460c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a6a4db0-f178-319b-9de2-d37e77402cea" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="-392957557" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-392957557" unbViolId="1c1f608b-c187-3d7c-ad99-79524ff30e21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bbe1a2b-dcc4-3cb2-9d33-3a7e9f9d6bb0" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="-392957557" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-392957557" unbViolId="b75c7393-466b-3423-9026-d47a0ba760f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a27319d-fb62-3d79-b6e7-975e5dd49477" locEndPos="1" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="-392957557" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-392957557" unbViolId="377d51a3-4bec-3bab-a4d0-fd8faf567ed6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0546fef0-6ed5-315b-8170-a6fa23a42a54" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="-392957557" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-392957557" unbViolId="6880b27c-758c-3d50-8a3c-8e1a93cc5d7c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71d19a88-4d0e-3960-a55d-e03d8283912b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="148ea6a9-4939-34bc-ba3a-fe2ac7eb929b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1718707-bb64-33a1-8444-11f1f560cafa" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="-392957557" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="a37978d9-7c52-3646-abf2-91d3886a5f6a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aab5536e-cab9-349e-a872-349262e0224c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="d297635d-092e-3e57-bff5-79188e2f9c3a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="630b0457-7a25-3f21-acbe-4dacc4267b03" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="00498598-2f95-3952-bd0b-d84d116f9068" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60f233ec-63f6-3016-8639-a8f548674c30" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="-392957557" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-392957557" unbViolId="5673946f-bb15-3b0c-bc9a-2db2c6a27f3d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="887c5207-2777-3e4c-b6f0-ffdc0b9c076b" locEndPos="5" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="-392957557" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-392957557" unbViolId="7a33bddc-a0b7-3bd4-a56f-59580ae932fb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b582a612-a2e6-3c0a-9ca2-cb2accf39808" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="-392957557" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-392957557" unbViolId="2d3e0c1c-fc71-3d37-9170-d1e4760862e5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbfb70f3-07ee-3f51-b6cb-7d415bc8363d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-051" lnHash="-392957557" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-392957557" unbViolId="abf110eb-344a-3f8e-871c-3e8d7e368baf" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32023a89-12e2-379a-8ac8-a5aad91ff1db" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="NAMING-44" lnHash="-392957557" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-392957557" unbViolId="a19f6dfa-fd8c-34e8-bb59-15640a5ec490" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="801ca2ea-9483-3bb7-b227-1e5d38c8939d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="-392957557" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-392957557" unbViolId="f06581a1-91e3-30b0-a19c-7c0814c96f27" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51dcfcb1-be21-3cf6-b97f-7eac1d63a4eb" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-392957557" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-392957557" unbViolId="69d833dd-001b-32d7-89c1-632e7a2a4407" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7dedda2-cad3-376b-a0ff-7f3a69e6e020" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-392957557" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-392957557" unbViolId="6e727f0e-591d-3a30-8735-9dee60481c29" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="060820ea-a713-3f1f-9daa-ec6530de62f5" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="-392957557" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-392957557" unbViolId="ce1e24b6-10c8-30d5-aab6-3ad3780c698d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47a26dc6-912a-3a8e-a8fb-afbd758a4e46" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-25" lnHash="-392957557" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="-392957557" unbViolId="3f1af7cb-9c1a-3fc6-aff1-3111410e299e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="700b4ac8-5d66-3647-909d-036621a28960" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-05" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="7dc3f884-7165-3c87-aa67-b86d10ea3d2d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b738763-7cf6-316d-a730-e7850cbb199b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="AUTOSAR-A10_3_2-a" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="741313b5-d04d-3528-876c-71f025b6157c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d984927b-7719-3b9b-8072-9179893f6f34" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="HICPP-10_2_1-a" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-392957557" unbViolId="33291f2c-9d13-3342-9a02-2753585b7000" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fd15aa2-d04f-3433-add2-1b980a4cf42a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-24" lnHash="-392957557" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-392957557" unbViolId="b53ad0f5-b828-3887-b82a-45928148f762" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="638dfb31-8f96-3b48-a4fd-f5176a7c5be5" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="AUTOSAR-A10_3_1-a" lnHash="-392957557" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-392957557" unbViolId="d778bc63-3eb5-3818-83d9-46b2a64f868d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a0a641-7da6-3f82-bad3-42009780ec6a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getArea'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-28" lnHash="-392957557" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-392957557" unbViolId="886fcfcc-6708-3d2c-97a7-834431a35cba" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff43aad5-054a-32a8-92cb-42092dd25d98" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has Cyclomatic Complexity value: 1" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="-392957557" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-392957557" unbViolId="0a6422a9-f49a-3446-b412-206b7b7241f3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="673e7d27-2f42-3b5a-be17-b181735114a4" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has Essential Complexity value: 1" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="-392957557" rule.header="Report Essential Complexity" tool="c++test" lineHash="-392957557" unbViolId="37404e66-4722-3302-a4ee-110120e3fe69" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66b47806-13a4-303b-840c-3e72f01470c7" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="NAMING-17" lnHash="-392957557" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-392957557" unbViolId="52abf7fa-8c4c-346f-8f3a-abfd0ce659dc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acab7e18-7361-3225-81ce-725d3e1382be" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="OOP-21" lnHash="-392957557" rule.header="Use the virtual keyword if a subclass implements a virtual function" tool="c++test" lineHash="-392957557" unbViolId="f8c75bd1-7231-3595-b8a5-23d950df974e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="740d3481-37ac-39a7-9bb1-5231405c89c6" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="MISRA2008-10_3_2" lnHash="-392957557" rule.header="Each overriding virtual function shall be declared with the virtual keyword" tool="c++test" lineHash="-392957557" unbViolId="cdabebdd-9e38-3f59-b433-71436fede36b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3722474-acc9-357d-9213-a34f7b97a2d5" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' is both virtual and inline" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="OOP-25" lnHash="-392957557" rule.header="Avoid declaring virtual functions inline" tool="c++test" lineHash="-392957557" unbViolId="59c8e137-b87e-3161-8879-0f084f9329d9" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="574ee9b1-85a8-3f14-b3ce-4583b135cfe7" locEndPos="12" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="MISRA2008-5_0_5_b" lnHash="-392957557" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="-392957557" unbViolId="f98aa1b8-f2c1-357a-b455-030800b87952" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="490d6e08-7e56-343f-bb7c-e6928345be0c" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="CERT_C-EXP39-a" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="604b153c-5d79-3835-bcf2-42e8432ee6ee" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da8de939-6529-321f-9f38-cd36c5114858" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="2" auth="user" locRef="6" rule="AUTOSAR-M5_0_5-a" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="69c79f84-cab0-3f0b-83a1-5c4452fb2823" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2999fe7-2c68-392b-b8c5-4b9283d4dc2a" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in function's return" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="MISRA2004-10_1_b" lnHash="-392957557" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="-392957557" unbViolId="0fd33db1-49a6-3448-b8b3-5f8cfe2776b2" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caf454f8-0edd-3058-ad77-7885699189bf" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Function 'getArea' has declared return type 'double' but returns value of type 'int'" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="PB-05" lnHash="-392957557" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="-392957557" unbViolId="abfa88e4-c669-3c11-b346-b4f64711e197" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63e0302d-3807-3149-9d7f-4881c2c466e4" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-25_b" lnHash="-392957557" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-392957557" unbViolId="442c8fa0-f379-3f3b-bc9f-aa208ca1077e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb40465e-b975-37eb-904f-c3956c2c45ac" locEndPos="30" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="042f77a7-8662-33fe-adfb-a584cb8fe1f2" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a92fa67-d408-371a-aa15-a89a8a92e340" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="6f90f4ce-7bb9-3450-885d-5beae432b7e2" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8f5b04d-d47c-3216-8388-9de6aeda6e73" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-392957557" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-392957557" unbViolId="da426207-548e-3bd4-b8cd-b0178e14adab" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a6b2c30-d5b4-38ce-91c8-d9a3f77b7657" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="19" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="19" sev="3" auth="user" locRef="6" rule="FORMAT-03" lnHash="-392957557" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-392957557" unbViolId="87f902f9-5bd0-387a-9bc7-4b3b939fc759" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8611aaa9-c531-3a84-9817-34bfdf06a0e6" locEndPos="40" locType="sr" hash="1537905639" locEndLn="19" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="2093521939" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="2093521939" unbViolId="e8a536c7-7af3-3602-aa51-ce1cf2d02082" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="859297ec-d8f6-3805-b5cf-2639d6264e73" locEndPos="1" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="2093521939" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="2093521939" unbViolId="0f35af01-90a6-3337-a96e-a9a76d493311" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ccc071c-102e-30ae-b0af-584795e9f7ad" locEndPos="1" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="4" auth="user" locRef="6" rule="JSF-098" lnHash="2093521939" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="2093521939" unbViolId="ff66e714-0052-3b98-822c-bdf430bd47b2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fdcba65-5493-31e0-84a2-7194c9d2ccaf" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="AUTOSAR-M7_3_1-a" lnHash="2093521939" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="2093521939" unbViolId="a374eb68-7f87-3d2d-8a16-c4bc77e97722" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1639e1b0-2f4e-370c-894a-4694c7ffcffb" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-36" lnHash="2093521939" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="2093521939" unbViolId="45ea7a24-02e8-3601-a6d5-004166389f4f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7269d8ae-9b8a-3474-b6a4-f12adec4f64d" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Do not declare the 'Circle' type in the global namespace" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="MISRA2008-7_3_1" lnHash="2093521939" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="2093521939" unbViolId="fd601832-b4f1-3f35-8770-c9b8c1b63dd7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dffc6767-e341-34e4-b101-0e32783a60fe" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="2093521939" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093521939" unbViolId="ca744534-22cb-33f6-b51f-29077fbb0fe1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2d138ed-dc2f-3ba2-84fc-ddc54d247967" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The declaration of the 'Circle' type should be preceded by a comment that contains the '@brief' tag" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="2093521939" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2093521939" unbViolId="f570ad32-cda9-3c94-9bf7-4c6cdc36d5dd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d86b9f9-ee33-3d8f-af61-46e3ce37fd45" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="JSF-057_a" lnHash="2093521939" rule.header="The public section of a class will be declared before the protected section and before the private section" tool="c++test" lineHash="2093521939" unbViolId="fe63b469-fafa-3a5a-bec5-505b78174377" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6aa8ab55-0bfb-3a4f-bc17-4993c09749d1" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Public section must be before protected and private sections" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-46" lnHash="2093521939" rule.header="Order of scopes in class: public before all others" tool="c++test" lineHash="2093521939" unbViolId="28d1fb2c-32b2-3552-bd0d-b1a49eaf66df" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="435ab857-5203-3161-84eb-11c4e19d7e7c" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' should be final" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="4" auth="user" locRef="6" rule="AUTOSAR-A12_4_2-a" lnHash="2093521939" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="2093521939" unbViolId="43556de1-3b18-320e-a763-93ee41b48dbf" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b41f652-1c38-30fb-84c4-4e8148b3182a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' should be final" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-23" lnHash="2093521939" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="2093521939" unbViolId="946c6412-eedc-3157-8dea-5c6c03ed13f8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6ec6d55-50f0-399f-b23f-95d9d8fedafd" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare default constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="048e3bac-34ae-3580-834b-0cd5ef45af56" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ba34884-d15b-399e-9481-65a509b663ba" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare destructor in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="4f470321-1d49-3507-bd0c-3e035356aff2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26aacac0-a9b2-370b-bdd9-8eb3bfe1ed76" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare copy assignment operator in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="01561bac-685a-3a1e-897e-e563088d439a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43cc322d-af06-3769-bdd0-351a2a5f5db0" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare move assignment operator in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="897ad4cf-a296-325f-9e83-9209da39e04d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d2d66e0-b613-3d93-bd25-87d7e313b6a8" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare copy constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="84880d79-0e32-3a51-92d2-7bf2833a3df9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42d56f44-0d1a-3095-9edf-6c4e273e3610" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Explicitly declare move constructor in 'Circle'" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="HICPP-12_5_1-a" lnHash="2093521939" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="2093521939" unbViolId="2695060d-7eaf-3130-baa6-caccdb5f42b4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6211a652-240b-37f3-82a5-eb2a2d5efe0f" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing assignment operator or special comment" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="MRM-04" lnHash="2093521939" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="98d0f2d1-7dd2-3310-90f0-f1ec5fcbcb13" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0abce593-79e8-330a-9711-f07e94534daa" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing copy constructor or special comment" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="MRM-05" lnHash="2093521939" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="18a0f2d4-3c7a-3567-a658-5aea39761514" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f1daa30-fd20-341d-9bcf-6abeafd96499" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing assignment operator or special comment" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="MRM-47" lnHash="2093521939" rule.header="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="c783a5d1-f161-332d-9c07-0938857ad414" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87f3c164-0e1f-32a1-ad50-7373a22bbda6" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' missing copy constructor or special comment" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="3" auth="user" locRef="6" rule="MRM-48" lnHash="2093521939" rule.header="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" tool="c++test" lineHash="2093521939" unbViolId="7acd8a07-ac41-39df-a987-65d8ddd79d03" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63776e66-a465-3ce8-ae69-9eef007fe56a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Class 'Circle' has virtual functions without a virtual destructor" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="OOP-23" lnHash="2093521939" rule.header="If a class has virtual functions it shall have a virtual destructor" tool="c++test" lineHash="2093521939" unbViolId="f507ba5e-3f19-32bd-8592-2c2ba06aa080" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c6ce638-96bc-3b74-bc01-b0b623fdd7b7" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The type name 'Circle' is not a unique identifier in the testing scope" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="2093521939" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="2093521939" unbViolId="a5fa65e6-791f-36dd-8fc8-e0675d23d4e6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3b9ba275-256c-3651-aeb2-489bc8a61a85" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="The type name 'Circle' is not a unique identifier in the testing scope" ln="22" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="22" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="2093521939" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="2093521939" unbViolId="9087185b-40f9-3567-9843-4eef4b4571ee" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c59e5b21-833d-3edf-a7a7-c21441b4f17a" locEndPos="7" locType="sr" hash="1537905639" locEndLn="22" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="4" auth="user" locRef="6" rule="JSF-043" lnHash="1798682864" rule.header="Tabs should be avoided" tool="c++test" lineHash="1798682864" unbViolId="7eb9770f-8700-34f1-8577-7e812a8fc7b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0858bce3-9e0e-346f-a783-08ae516f83ab" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="5" auth="user" locRef="6" rule="FORMAT-01" lnHash="1798682864" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1798682864" unbViolId="2d2504ca-247c-33a9-b238-787082cf3bf1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19707a61-35c5-3e2a-9a7b-4b49be4af817" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="5" auth="user" locRef="6" rule="HICPP-2_1_1-a" lnHash="1798682864" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1798682864" unbViolId="a501a7df-1f7c-30ac-8cfe-1a2593ed8a8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63828090-082d-3f72-9c4a-707dc185569a" locEndPos="1" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="1798682864" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1798682864" unbViolId="17a28e37-c8f0-3fdb-af96-2eb647777eec" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c56758e-f780-365f-8407-15b40f482231" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="1798682864" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1798682864" unbViolId="76140126-36f6-3b1a-90a0-ed651791f155" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bc5b1b4-21ba-3752-a209-7b3cf753f550" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="7509863b-bd36-3231-90c7-a76a3547498c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d8ef58-8ed0-353b-acea-e1ec5a44bf5c" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="1798682864" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="a9fd90ad-038a-30e7-9797-71a37e50b42e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b83dac90-05f7-3783-902e-c5d08691ff0b" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="bbfdf631-776d-3ff6-b674-413933f2c4bf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a408350-8ef6-326b-ac42-5a461bc7db83" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="ab40f2ac-91e5-34d0-9a72-4132b485afdb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b8202d2-217b-3e11-8995-f0e859960ca6" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="1798682864" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1798682864" unbViolId="56e2745e-665a-3f01-8b0c-27e1d2f04ff3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce220e36-2572-37c7-b476-9495860f3b24" locEndPos="2" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The identifier '_radius' differs only by presence/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="1798682864" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1798682864" unbViolId="01f385fc-ca59-3a15-9ab1-82565d101c81" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b355970-4349-3af9-a70d-2338188bc0ba" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The identifier '_radius' differs only by presence/absence of the underscore character from identifier 'radius' declared in file 'Shapes.hpp'" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="1798682864" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1798682864" unbViolId="9893a8e3-3943-3436-9cd8-73e6e2e546df" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="426c1858-e7b0-3fee-83b7-98e153f1e604" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' member variable should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="1798682864" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1798682864" unbViolId="0fa32a6c-60e0-307e-b4c5-0e0ee49657af" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51b0acbe-7852-3b20-bd77-6726a3e524bb" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' member variable should be preceded by a comment that contains the '@brief' tag" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1798682864" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1798682864" unbViolId="f458b355-9fe1-3dc0-ba59-9b1165a0481b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c969a0d-0065-33f5-bbcb-188fecc69fd6" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Member variable '_radius' shall begin with a lowercase letter" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-07" lnHash="1798682864" rule.header="Begin member variable names with a lowercase letters" tool="c++test" lineHash="1798682864" unbViolId="17e4e9d7-4928-36f2-ae59-36dd761cc479" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f0bf25-f116-374d-80f6-a333c4de3b7b" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Naming convention not followed: _radius" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-14" lnHash="1798682864" rule.header="Begin class data member names with 'its'" tool="c++test" lineHash="1798682864" unbViolId="95fe9a00-752e-3fa3-9c17-873c5764ac48" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99d8cf86-e990-3d26-9dce-2683f9aa9203" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Naming convention not followed: _radius" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-15" lnHash="1798682864" rule.header="Begin all double type variable with 'd'" tool="c++test" lineHash="1798682864" unbViolId="c9a5730e-5031-353d-b7f9-c549d17168fa" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81674880-af52-367a-8d53-ec9d5cf5d2a4" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_radius' is not allowed" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-33" lnHash="1798682864" rule.header="Do not use identifiers which begin with one or two underscores (`_' or `__')" tool="c++test" lineHash="1798682864" unbViolId="d97d4bd5-d51c-3635-9df1-64a5224a75c2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d168ed6d-48d7-3fc4-bbdf-8b8908f9c4af" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Using underscore at the beginning of the name '_radius' is not allowed" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="JSF-047" lnHash="1798682864" rule.header="Identifiers will not begin with the underscore character &quot;_&quot;" tool="c++test" lineHash="1798682864" unbViolId="4d45bf66-9d04-3d25-95d3-7a4c051ca59f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0acd7378-f49b-3e41-9099-84c49f82c877" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' identifier should have the 'd' prefix followed by a capital letter or an underscore" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-HN-12" lnHash="1798682864" rule.header="Hungarian notation for double-precision floating point types" tool="c++test" lineHash="1798682864" unbViolId="f1dea1f8-eaaa-3dbe-bc0f-924a7c610ef3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9624e081-c343-34c3-8310-78a2e89aa335" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="The '_radius' identifier should have the 'm_' prefix" ln="23" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="23" sev="3" auth="user" locRef="6" rule="NAMING-HN-29" lnHash="1798682864" rule.header="Hungarian notation for member variables" tool="c++test" lineHash="1798682864" unbViolId="83e7c063-ff6f-3147-93b2-277a369547e1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c9464de-6a39-347d-bc6e-f88d7b3884c6" locEndPos="9" locType="sr" hash="1537905639" locEndLn="23" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="1689459350" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="1689459350" unbViolId="dba38c5d-3e46-3033-83c1-3b7f232445d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dea2839-471f-3242-ad93-c6459c6a833a" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="ce877488-2f0a-3b31-aa8b-23e5ba4236fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb5a6427-4195-3ea8-ae6f-f0bf61d7d983" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="d5d7d17e-ee76-3278-b3ff-ad489ec9dff1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ab1e9ed-748b-39ae-b848-52295c916b42" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="ccb64748-0173-335b-b3d8-ac5b8a587cc7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b0cfa2e-4f36-3e9c-9572-3dfce952da77" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1689459350" unbViolId="e75a7c32-e229-35af-9cb4-7c263406018b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86bf4cbd-662c-387e-8add-3383a0615396" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1689459350" unbViolId="128e44a6-fb17-3117-8062-fbaba409e072" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa47cf9a-ad72-3a74-b1e5-6796c2c17381" locEndPos="1" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The definition of the 'Circle' function is not preceded by a comment" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="1689459350" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1689459350" unbViolId="89662892-f5f2-3764-b1f7-b7407bd7d6f8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dec7dd75-dc43-3bae-8988-7fbf8a707fa1" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The definition of the 'Circle' function is not preceded by a comment" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="1689459350" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1689459350" unbViolId="9af2427c-9890-3c73-a90e-b0bff2fe7914" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9a35844-6b17-361f-a110-1c35f4774cc5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="1689459350" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1689459350" unbViolId="6214dcfe-7d57-3ff1-a895-58e59bcf6f5c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="378c7cf3-54bf-3b0a-b0da-d0e10bc1d3b4" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' function should be preceded by a comment that contains the '@brief' tag" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="1689459350" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1689459350" unbViolId="0cedf945-d5f4-365d-815f-4fe32ad7cbfd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="203e4a54-5a75-347d-a1d2-3ed17415b4d3" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="77dc6268-b3f0-38f8-bc7a-a9a8ba7e22b6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f989d9a3-92c4-378f-a3e7-6cc7556702c8" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'position' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="d35236f0-44da-3286-8890-c76904d11983" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fed837a2-3318-30db-8413-f5f72299b8ac" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="8cedc954-1bb1-3c05-a851-e08fb412c4aa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f621846-1543-3dfb-8b12-2335b22b96bb" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="1689459350" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1689459350" unbViolId="d78bfce7-62c0-370e-9896-57ce75f51356" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10bec42f-1ec4-3aee-9322-0bfff010e4b1" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Class 'Circle' defines an inline constructor" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="OPT-17" lnHash="1689459350" rule.header="Avoid inline constructors and destructors" tool="c++test" lineHash="1689459350" unbViolId="e4d0a4aa-3976-30f3-9176-21fe4ab3ae8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d9303d3-e471-33fb-97c1-34cfa54eebff" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'Circle' has Cyclomatic Complexity value: 1" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="1689459350" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1689459350" unbViolId="7c9e9d92-0789-39bd-a817-f6ae993a3869" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e833373f-67cc-380f-bc19-d36ef4842264" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Function 'Circle' has Essential Complexity value: 1" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="1689459350" rule.header="Report Essential Complexity" tool="c++test" lineHash="1689459350" unbViolId="2f60313d-40e3-3667-a8df-b4d7bc820a88" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3872205b-67d5-3fd3-90f1-2b4eef84d62c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' identifier is the same as the name of a type defined in the testing scope" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="MISRA2012-RULE-5_7_a" lnHash="1689459350" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="1689459350" unbViolId="88247940-1078-3b4a-a1fb-cc7b055de932" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="3d26e7ba-b27c-34e6-8f80-5b4980c08be9" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'Circle' identifier is the same as the name of a type defined in the testing scope" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="MISRAC2012-RULE_5_7-a" lnHash="1689459350" rule.header="A tag name shall be a unique identifier" tool="c++test" lineHash="1689459350" unbViolId="d250e9f3-b337-3267-b99a-0dd1f711b7c7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="65d38267-a576-3cae-a41c-9ad2824712b5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/><StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="7b95e98d-2811-3637-a0f3-09788e7200bd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2100107b-da30-35d2-a8b6-345f37c9c3fe" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'position' differs only by presence/absence of the underscore character from identifier '_position' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="36ede6c3-8fb1-3483-81ec-5e557a9b7822" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e86d3c26-50d2-33a9-8c4c-8b326cd535c4" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="a36566e9-99bb-3f78-bc45-7f07d29a7594" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe83b706-1cdf-33fe-8d63-cec4536353c3" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="0f2d1219-19a3-325e-8cb0-f4b20ff76577" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d13ca1b-629f-3426-83a5-ad948f36e916" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="b0cac06d-81b0-36c6-a59d-8c7808fa88d9" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb87969e-83ee-3838-8d43-e62b1e496694" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'position' differs only by presence/absence of the underscore character from identifier name: '_position' declared in base class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="1fd3ad69-bae1-32a6-8cf8-c99c70c17ea4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="385212ad-cecd-31b8-bd44-5205fd93375b" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="OPT-14" lnHash="1689459350" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="1689459350" unbViolId="8d93682b-da61-3dae-9d9b-8ac4221394b4" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c45a9df0-799b-39c5-bf99-11f884cf918a" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="JSF-125_a" lnHash="1689459350" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="1689459350" unbViolId="05839481-3f44-35cf-9682-799b76c89345" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e64f154c-053f-3d55-9e5d-536370fb89c9" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The parameter 'position' of function 'Circle' is passed by value" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="JSF-117" lnHash="1689459350" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="1689459350" unbViolId="08d49ccd-33d8-3062-b4fc-254f9c682b08" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af6eba79-3281-3106-97fa-faee710278c8" locEndPos="18" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="1689459350" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1689459350" unbViolId="0ea61706-3917-3880-9956-3be652ee712d" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca90e094-1c03-3201-997c-07ccf5fea22f" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="1689459350" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1689459350" unbViolId="064213bb-c0b2-3d24-b287-e3d0dc66d49e" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7faeaf1-8e52-353c-aaa1-3599390cfe3b" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="07327ab3-a365-3d03-80b9-710c81fab368" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="222d4f63-9390-3324-99b8-bd90d6cdf9f7" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="1689459350" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="b8f9bd51-5387-36d0-9fc5-84b930e118d1" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0551a25b-046c-380e-8587-834943e86240" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="32fff5a1-95f1-34d7-93b3-548d033378b4" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c356855a-242e-374d-953f-98bb62cbe4d5" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="504b93ec-c61e-303c-9af8-073ec78b6981" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82dc91d7-6bf0-32db-8fcf-dfd89e03fa73" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="1689459350" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1689459350" unbViolId="7eee04e1-c383-35d3-b4c0-0cacc947d105" locStartPos="27" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13dbefb4-d52e-3a32-a36e-9757367c0c2c" locEndPos="28" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'radius' differs only by presence/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="6338c86b-a897-354e-aa3b-2bd08b77d6f6" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="993d8875-2cc8-3523-a0c7-0aec5e1e0f4d" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The identifier 'radius' differs only by presence/absence of the underscore character from identifier '_radius' declared in file 'Shapes.hpp'" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="1689459350" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="1689459350" unbViolId="e1a0f063-89be-3f62-9b92-9c600a256be3" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2536af40-fcbf-3e2b-a8fe-c68c12c63c87" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="f5471b1b-f6d7-30f2-9427-e45d4c3f63a3" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5be8f92e-4ced-350d-83d8-2a3f4e677e97" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="556deff1-9133-302c-a0b7-4ad618e3d509" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b542c14-d9b1-320d-b9d1-a71b2c9ba132" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="a05689bd-22b3-3572-b995-3012ddb72554" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcbe6ac9-e81b-3d70-bdf3-0d6498b0a9fd" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Identifier name: 'radius' differs only by presence/absence of the underscore character from identifier name: '_radius' declared in class" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="1689459350" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="1689459350" unbViolId="de73275c-f2c3-3d45-93fd-97a1b8a73b7c" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b8f2f4-b56a-32f1-990c-7a8c64081b94" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="The 'radius' identifier should have the 'd' prefix followed by a capital letter or an underscore" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="NAMING-HN-12" lnHash="1689459350" rule.header="Hungarian notation for double-precision floating point types" tool="c++test" lineHash="1689459350" unbViolId="a329c47a-b6d1-3b8e-9dc6-56955e616433" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d51f440b-b4e5-36d6-ba52-45c9c8bed3fd" locEndPos="35" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="6032e762-3f0c-399c-9ebe-8eb7229dbbb9" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b755015d-1bd5-3cc9-aa2a-ce7d4c8a6d4e" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="ae262775-34e0-35a5-9862-12e6d09c27c6" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31756614-20b2-3a22-9774-a932aa2ebdd6" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="25" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="25" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="1689459350" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1689459350" unbViolId="0e1de870-9f65-3169-99ca-2e3b94907196" locStartPos="78" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a00ed4b-f944-32a6-a1c3-2d1ce000fed1" locEndPos="79" locType="sr" hash="1537905639" locEndLn="25" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="-535658836" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="-535658836" unbViolId="e86bbd18-08d2-3cec-8054-6985dc991ef8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="939ea29a-1ef2-3d88-bbb9-49713ee6d615" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="8094eaa4-8cb7-3a58-ad6a-e3916ec3b36b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5e5ba8b-fed1-3c0a-81a0-5977c3488d6c" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="cd09716c-03e7-3b37-9542-59619c446ef6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36382a08-f324-3a70-8daa-fb21c8878aab" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="8ab272ca-b3a2-3236-9369-c79b4496441a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69f02e9c-ea8d-3426-9a6f-357be4b81957" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-43" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="4b5af99d-a80d-385e-87d5-b12054a3f589" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf8b1b1d-4c7b-3400-b1a4-22506bfd4b0f" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-060_b" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="01314af8-91d9-3c82-bc9e-6e1f639047c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95e9836a-f90d-3939-8438-64fa3c796b55" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the opening brace '{' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-02" lnHash="-535658836" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-535658836" unbViolId="4546b312-ac33-35b0-af32-ed2e5ec0efe9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b30d487-f164-33f5-baff-4e4847638664" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Opening '{' and closing '}' should be in the same column" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-34" lnHash="-535658836" rule.header="Braces &quot;{}&quot; which enclose a block should be placed in the same column" tool="c++test" lineHash="-535658836" unbViolId="248ca29e-d4de-34bf-a247-8412ea426448" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="345e3b37-584e-3023-9c41-b5ebeadcdbff" locEndPos="1" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="-535658836" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-535658836" unbViolId="f8037a9c-2710-3912-aff8-c52b76eb8073" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="884be94c-8a2e-369d-a1af-554c8edf77a9" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="-535658836" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-535658836" unbViolId="e656d59b-c03c-35ef-8b70-99226432d06f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9363b0ae-dafe-31ac-983f-f74f24bef9c5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="7f833331-344f-35ec-ab33-b2b8d46abbbf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36c71cf0-95ea-3264-83c2-c68ae442ba80" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="-535658836" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="2af8fb87-7dad-32df-a79a-e6e287e74f81" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f12f641-585e-3070-95a2-085d9ad14eff" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="4f1c36a3-0451-3779-9a32-7b78f6d81b2b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72f45662-260b-33f6-ab4a-393995e7f39e" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="58f0d3bf-0d67-312c-9abc-b435dbfe3777" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="930ac9df-a294-3621-b405-6cb892119fdd" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'double' should not be used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="-535658836" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-535658836" unbViolId="c9f31294-1830-3d0f-80c1-ee4a662b70ec" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36aa9c46-7dd4-3a28-888c-c3d76ff4404e" locEndPos="5" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="-535658836" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-535658836" unbViolId="03e821f2-f9c2-31ec-ae50-eac836d40794" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc4ba59f-1100-37a6-8de2-15b17e820809" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The definition of the 'getArea' function is not preceded by a comment" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="-535658836" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-535658836" unbViolId="a04f362c-31b1-3aa4-93d4-d964fda08c2b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84725f84-1347-3ce6-9bb1-27dce488a40f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-051" lnHash="-535658836" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-535658836" unbViolId="9ec3285a-8d3c-3d41-a1dd-d0fb8228cf34" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c06eb4a-ea84-3070-a70c-bb767654448f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The name 'getArea' should be composed only of lowercase letters" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="NAMING-44" lnHash="-535658836" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-535658836" unbViolId="bbb38207-a5e4-38f1-990a-fd478b185f22" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a930ca9-bf59-3b7d-b7e1-ff5ba2ecc33a" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="-535658836" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-535658836" unbViolId="f527207f-6aa5-3ade-bc0b-3432d6f54fd7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="427d501d-a956-36e8-8c7f-5be3e8da17a6" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@brief' tag" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="-535658836" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-535658836" unbViolId="b96aa911-04d2-3119-aa36-ef166fd3db68" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20d417af-42af-3bd1-82d6-3538e15c45af" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="-535658836" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-535658836" unbViolId="7a16a4c6-92d1-33c9-9165-2f387ee1bafc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8b8cdf4-64f1-3010-9388-ba6ecbff940f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be preceded by a comment that contains the '@return' tag" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="-535658836" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-535658836" unbViolId="b4f5c2d5-36fc-3da9-93d3-f8e45eb58724" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb345395-d6b6-34c3-a4db-f09c91e7f725" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Make virtual functions nonpublic, and public functions nonvirtual: getArea" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-25" lnHash="-535658836" rule.header="Consider making virtual functions nonpublic, and public functions nonvirtual" tool="c++test" lineHash="-535658836" unbViolId="4a0e3f88-e54c-346a-94d8-163757c6d9c4" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff04c8d7-4ec9-3c6a-bd39-79c47483a2e6" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-05" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="14b7b101-3aac-3155-bb2e-b6367b683ef8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c443d7ac-e412-3e06-9dc6-532fc66d2596" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-A10_3_2-a" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="820dc310-235e-314b-9a68-d7cc9d6cde0d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc30bf9a-c78f-3b8b-a3c6-067f3d2aaf5f" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The 'getArea' function should be declared with the 'override' specifier" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="HICPP-10_2_1-a" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the override or final specifier" tool="c++test" lineHash="-535658836" unbViolId="93fac617-bd46-34f7-af52-a6875c68d273" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61fff00c-94d5-35bc-9c86-5024b32f2926" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="CODSTA-MCPP-24" lnHash="-535658836" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-535658836" unbViolId="75ae88ff-1994-3bcd-a7d3-42acba819b1c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68c0832c-ad4c-38a0-8cf7-0e25fc5e565d" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Declaration of virtual function 'getArea' should have 'override' or 'final' specifier" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-A10_3_1-a" lnHash="-535658836" rule.header="Only one of virtual, override or final should be specified in a member function declaration" tool="c++test" lineHash="-535658836" unbViolId="8c2616e8-f178-38b2-afca-6f298e4a7343" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c2df5d2-fc88-375e-ac6d-27f91c53522e" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'getArea'" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-28" lnHash="-535658836" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-535658836" unbViolId="1ff1134c-900b-31df-a590-3e823ccea04e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="948cd98a-c1cb-3b1b-b7b8-0bf9ec33d5a2" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' has Cyclomatic Complexity value: 1" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="-535658836" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-535658836" unbViolId="295f507d-080b-3e31-8674-9a688df69e21" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="709119a5-7d81-3211-8583-bf71bd7f3914" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' has Essential Complexity value: 1" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="-535658836" rule.header="Report Essential Complexity" tool="c++test" lineHash="-535658836" unbViolId="a50c5f30-5386-3cc9-be37-c5b18e5be012" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575d33ac-d5f5-32d2-8cdd-7d984edc1047" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Naming convention not followed: getArea" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="NAMING-17" lnHash="-535658836" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-535658836" unbViolId="94cc2077-f694-3d9f-bb6c-d8e027a7f643" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1c8f9be-5b50-3fa9-b975-5bcc6bd6b1e1" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="OOP-21" lnHash="-535658836" rule.header="Use the virtual keyword if a subclass implements a virtual function" tool="c++test" lineHash="-535658836" unbViolId="14e70ad8-b15f-3901-955b-398e129f4056" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87e6d5f6-58b7-395a-927f-68e21dc5a567" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Use the virtual keyword for 'getArea' function" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="MISRA2008-10_3_2" lnHash="-535658836" rule.header="Each overriding virtual function shall be declared with the virtual keyword" tool="c++test" lineHash="-535658836" unbViolId="42039253-e314-354f-95e5-c0c8bdac483a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e22c163f-f01b-36bb-a327-ab954b10126b" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Function 'getArea' is both virtual and inline" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="OOP-25" lnHash="-535658836" rule.header="Avoid declaring virtual functions inline" tool="c++test" lineHash="-535658836" unbViolId="007ea9db-6d36-3cc4-a1e1-dc24dda9e2d5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0f6fda5-d1a5-3e60-8f07-e0ef2cbc8745" locEndPos="12" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-25_b" lnHash="-535658836" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-535658836" unbViolId="b2a61595-3a29-376e-8726-15167f83356a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c709788e-d1dd-3295-bcc0-62b60fa1d596" locEndPos="30" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-151" lnHash="-535658836" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-535658836" unbViolId="818dafd6-7833-3a6a-b57b-b7f8067939ed" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84d092ad-bcdf-3811-bff4-7ad58d3dd48f" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="CODSTA-26" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="65d90b47-5a73-3372-a8a3-e4e2fc8f825a" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a19821e-0ff8-301a-91fd-6d1bbd0ba997" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-A5_1_1-a" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="41a9b19b-078d-38b6-8ab9-aa1a16bea609" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77ea4042-9bcd-3b1b-82a3-af4be8d567ca" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Literal constant '3.141592653' is used" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="HICPP-5_1_1-a" lnHash="-535658836" rule.header="Avoid magic numbers" tool="c++test" lineHash="-535658836" unbViolId="a96b6cd9-fbb6-39ea-b959-1599953d6e30" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16aa1b57-049a-30ef-8978-c8cfc0fadce4" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="5" auth="user" locRef="6" rule="MISRA2008-0_4_2" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="e1a78288-8ee5-3e64-bbd4-a229a48a0f50" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7aed0b4-0fcd-3d41-9dd0-d079c5369d06" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="OWASP2019-API9-d" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="f361d790-bb09-3f16-b55d-c37d83586f0b" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edbf0160-8683-32ca-a58a-374120fcabee" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="2" auth="user" locRef="6" rule="AUTOSAR-M0_4_2-a" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="597d86c7-2d7f-3973-be25-f622d6fff300" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78c1a600-e338-34ad-b1bd-57431ec03f8d" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="COMMENT-10" lnHash="-535658836" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="-535658836" unbViolId="83b642c2-62f3-3592-bd13-e79d576b2339" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7cdb30e-ed59-3964-a3e1-593c1a03ffe7" locEndPos="37" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-061" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="762b374c-df99-3692-bf7d-030b24e88850" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0aafd16b-e6e5-3a52-9642-f595a6b86bb7" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-42" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="d1f6319e-b278-3e5c-b749-49c55beaee0f" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62054b76-413d-348e-ac72-f33ad5dc30b0" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="JSF-060_a" lnHash="-535658836" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-535658836" unbViolId="16afd6c8-b3b9-3eab-942d-e6a79a601075" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb8270dd-74c1-35c2-bb2f-ae86f5d20acb" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="Put the closing brace '}' on its own line" ln="26" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="26" sev="3" auth="user" locRef="6" rule="FORMAT-03" lnHash="-535658836" rule.header="Place a closing brace '}' on its own line" tool="c++test" lineHash="-535658836" unbViolId="50215894-bf1f-3829-a7c1-52de94dd08cc" locStartPos="69" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6861ab56-7164-3122-803f-a91a8b30ef6d" locEndPos="70" locType="sr" hash="1537905639" locEndLn="26" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="MISRA2008-3_9_2" lnHash="398250049" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="df540ee1-14ee-3a39-ab0d-918245e7ec4a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="789e8f1c-5718-3b10-9088-3ad56371753f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="MISRA-013" lnHash="398250049" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="398250049" unbViolId="661ee7ca-608c-317a-a750-7536c09cba02" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca5d9482-07cb-3710-bb51-4fd40347bf5f" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="CODSTA-223" lnHash="398250049" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="7429c91b-ee16-3082-aa5b-2eda8a595643" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2c5333f-dbfb-315c-a6ff-4ad4c96ce16e" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="AUTOSAR-A3_9_1-b" lnHash="398250049" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="398250049" unbViolId="8d322560-c2d6-3051-a614-e95f898704de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3931048f-859c-334d-9bd4-800bb5d4f005" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Do not use the 'int' standard integer type" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="HICPP-7_1_6-b" lnHash="398250049" rule.header="The names of the standard signed integer types and standard unsigned integer types should not be used" tool="c++test" lineHash="398250049" unbViolId="50256bfd-81f7-3144-846f-9ed7ac05a4e3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9eb71e2e-7192-3d85-a731-a49f1fe1bf6c" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="MISRAC2012-DIR_4_6-b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="22c5ea3e-d621-3ba6-8e57-4f691a5f4ca9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3c54b12-739f-321b-b54e-b109092a9dc7" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="JSF-209_b" lnHash="398250049" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="ff7e656e-66d7-398d-9e4d-2c1d0e9edecb" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5106d19-e3b1-39a5-b630-63c045294a8a" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="MISRA2004-6_3_b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="897e240f-ed54-33c3-b1a1-05418375e023" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58d4acb7-fed0-3a17-8daa-2959db44bece" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="MISRA2012-DIR-4_6_b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="2360016e-af44-3265-93d2-c51b331a7394" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99e08bd3-aefd-380e-ad53-5b691d5b61e5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="HICPP-3_5_1-b" lnHash="398250049" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="398250049" unbViolId="5f336691-4d8a-3b40-be79-a620c2937875" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fece6a3e-6dee-3be8-8a4a-58a95269a869" locEndPos="5" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The definition of the 'contains' function is not preceded by a comment" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="COMMENT-04" lnHash="398250049" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="398250049" unbViolId="eaecf1c7-39c9-3299-94a1-8d1c8e9b3833" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c9ce5b0-9180-3e19-8128-8e6e7e21669f" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The definition of the 'contains' function is not preceded by a comment" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="JSF-134" lnHash="398250049" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="398250049" unbViolId="b2b0d6db-02ab-3b1b-a9b4-ac75ac01e9fc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd9cc672-1536-339c-b30f-077ee1ccc30f" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="COMMENT-14" lnHash="398250049" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="398250049" unbViolId="0e9d0827-c697-37b5-9dc1-77af2f330dbc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28c9209a-6cfe-35ae-ab34-30e75da207b4" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@brief' tag" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-a" lnHash="398250049" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="398250049" unbViolId="9d5de590-15e0-33f0-82d4-af5d834279a0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f97ef8d4-73ff-3446-8ddc-4b08ed487b6d" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="a0565cc1-bd29-3b7b-9350-5edfbf32723f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae5a4186-078f-36b8-8c7b-7187269436ae" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'point' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="7e56d6b6-a90d-3bc7-a7dd-32874e39f5f3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bbfe4b5-d228-3168-aefb-5a064642c274" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@return' tag" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="AUTOSAR-A2_7_3-b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="91ef37fd-0d34-3a62-aa07-9a0f31961c04" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db580005-45c6-3cee-98ae-996e3ec10efb" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The 'contains' function should be preceded by a comment that contains the '@return' tag" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="COMMENT-14_b" lnHash="398250049" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="398250049" unbViolId="7bb13fd7-4a87-3b5c-bf79-2a53bd9768ad" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02437fdb-28ec-30ce-b859-a5df798f546d" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="'contains' shall be declared as unsigned int or signed int" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="PORT-13" lnHash="398250049" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="398250049" unbViolId="26346b85-d0ec-3f54-aa89-ce96bc42d3b3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32802671-7d37-3db5-879d-7ea81dafab14" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Return type is not placed in line before function 'contains'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="FORMAT-28" lnHash="398250049" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="398250049" unbViolId="6adaf60c-7034-3761-8581-1a7676a8493f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eea49dd8-db6a-3586-828e-d5856db45802" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Function 'contains' has Cyclomatic Complexity value: 1" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="5" auth="user" locRef="6" rule="METRICS-29" lnHash="398250049" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="398250049" unbViolId="a4dc9050-16e0-3db3-8c4c-364807a203b8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3d15ab1-7fe0-3107-b5b3-cbe9970de156" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Function 'contains' has Essential Complexity value: 1" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="5" auth="user" locRef="6" rule="METRICS-33" lnHash="398250049" rule.header="Report Essential Complexity" tool="c++test" lineHash="398250049" unbViolId="103ded33-2c18-3d4c-a140-3b9e08a01470" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3db45203-be1b-3d54-88ed-e3eaa140c18d" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Naming convention not followed: contains" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="NAMING-17" lnHash="398250049" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="398250049" unbViolId="2531181e-b7b0-35e4-a929-a258c11fc4e6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed1f2c0c-35e6-3f93-bfe3-76ce4402c0fc" locEndPos="9" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="NAMING-45" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="a55f3582-7d1e-3687-83a8-6ca9af7c55da" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c44c052b-076c-36a3-9694-cf0217fd62a1" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="JSF-048" lnHash="398250049" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="398250049" unbViolId="a5c12393-94ee-3106-a7a5-b392251e741d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="491a55c2-dcd7-32c9-88a6-520826040844" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="MISRA2008-2_10_1" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="e947681b-789b-3601-815a-2a7263ba2d76" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="212568bf-ea4c-3a02-bf5a-3d1a4dc89854" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="HICPP-2_4_1-a" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="314961ac-0eb9-3b52-af1d-185610213e3a" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd9f5f6a-6798-3278-bcde-7bba7ae8ae18" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="2" auth="user" locRef="6" rule="AUTOSAR-M2_10_1-a" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="95b0f90b-079e-3ea5-b7a8-b75aed1a7ed6" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3eee664-924c-3af9-bb19-9d687ee7cc8d" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="NAMING-47" lnHash="398250049" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="398250049" unbViolId="cb4c26bb-b2db-39f2-bd3f-d48583e365df" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="930b7a69-d6cc-3add-8b8b-2d7ce2b134aa" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="OPT-14" lnHash="398250049" rule.header="Pass objects by reference instead of by value" tool="c++test" lineHash="398250049" unbViolId="80890e55-f703-35b7-8851-364fd2cb70fd" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76d01209-41f3-3189-8620-e38a5da8a2fc" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="JSF-125_a" lnHash="398250049" rule.header="Pass and return by reference when possible" tool="c++test" lineHash="398250049" unbViolId="030a0a04-1a7f-38e4-85da-c4069c3ee75e" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b170c0cc-a14a-33c2-82ca-2f443160b90f" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="The parameter 'point' of function 'contains' is passed by value" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="4" auth="user" locRef="6" rule="JSF-117" lnHash="398250049" rule.header="Arguments should be passed by reference" tool="c++test" lineHash="398250049" unbViolId="2e423a80-f9b5-3412-8723-6fb0ebf114eb" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdfeb4b2-71b5-36e5-9d8f-abfebe0b82df" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="CERT_C-API00-a" lnHash="398250049" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="398250049" unbViolId="d0da6f1f-17ad-36d0-9de0-fd72636057d6" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="147903d6-d741-38b7-b75e-57e4b6268d7d" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Parameter 'point' is not validated before use" ln="27" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="27" sev="3" auth="user" locRef="6" rule="CODSTA-86" lnHash="398250049" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="398250049" unbViolId="046973f2-b6ef-3f81-97c9-dba8a7f0d7c4" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc5f4bfe-cad7-34cb-8d89-8cebff38c4aa" locEndPos="24" locType="sr" hash="1537905639" locEndLn="27" goals="0,"/>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="28" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="28" sev="3" auth="user" locRef="6" rule="METRICS-19" lnHash="30537851" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="30537851" unbViolId="87c1ddbb-0fc2-3b04-bf30-c3adeb009683" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd60dbb5-0515-380a-b8b2-b45324235476" locEndPos="1" locType="sr" hash="1537905639" locEndLn="28" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="4" auth="user" locRef="6" rule="JSF-043" lnHash="538754804" rule.header="Tabs should be avoided" tool="c++test" lineHash="538754804" unbViolId="02f5d6eb-0f93-3cb6-9685-5f99d728ed35" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f270e14c-8f61-3047-b99e-7471dc412324" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="5" auth="user" locRef="6" rule="FORMAT-01" lnHash="538754804" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="538754804" unbViolId="fc7673cd-34f2-3024-86db-41cf3b5e2199" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6395f5bc-7ce4-339f-9984-74dabb900bd5" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Non-ascii tab found" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="5" auth="user" locRef="6" rule="HICPP-2_1_1-a" lnHash="538754804" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="538754804" unbViolId="e07c5aea-78fe-3861-b91c-4b4ca4495af6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d585a526-3c18-323b-9262-9f5162662eec" locEndPos="5" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Function 'contains' has declared return type 'int' but returns value of type 'bool'" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="PB-05" lnHash="538754804" rule.header="Return value of a function must match declared return type" tool="c++test" lineHash="538754804" unbViolId="a2277c98-b8fa-371f-b2b8-b220a360c8bb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ed7ecb9-57f9-305d-93c4-67a631e2612e" locEndPos="6" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="'return' statement should be used with parenthesis" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="FORMAT-25_b" lnHash="538754804" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="538754804" unbViolId="064389de-8eb3-3a60-809c-730f4da3cb4c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91a7d07c-f218-3155-90ae-5337037e594a" locEndPos="6" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="2" auth="user" locRef="6" rule="MISRA2008-5_0_5_b" lnHash="538754804" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="538754804" unbViolId="0bfca8e6-6cc8-3ef8-97c7-4cce3aa64697" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dac3d91f-5b39-304d-b1a8-402da473c636" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="CERT_C-EXP39-a" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="abe5d723-0b0d-3909-a364-4304115189ba" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a15ed753-8076-300f-8cd1-99d4a291a74f" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="2" auth="user" locRef="6" rule="AUTOSAR-M5_0_5-a" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="7ddf3829-2552-3132-959a-0c87dc5c3cfd" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21d0d09d-fa40-3dd9-b55f-fb404b357b50" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Implicit conversion from integral to floating type in comparison expression" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="MISRA2004-10_1_b" lnHash="538754804" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="538754804" unbViolId="9f0b81a5-91dd-3451-8c7a-733e2fe03919" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd3e4e45-e7fa-3ac6-9f97-830e31eb21ed" locEndPos="13" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Put function 'getPosition' that are used in the body of inline member function into separate file" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="CODSTA-CPP-15" lnHash="538754804" rule.header="Put functions that are used in the body of inline member function into separate include file" tool="c++test" lineHash="538754804" unbViolId="7a3b042b-db60-3f0f-9ea2-f5d29118339a" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b8394c1-6bda-3d7f-9bdb-9e9a34e8793a" locEndPos="36" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="5" auth="user" locRef="6" rule="MISRA2008-0_4_2" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="a4cc08d6-df76-335e-bdd1-0e171fcaaa8e" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc693568-13a1-3752-87b6-fe7a7af24772" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="OWASP2019-API9-d" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="663fe175-5410-3bc0-99b7-e21d3f7b0b03" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c7015a5-d0a2-3ccf-8d87-d42ce3b16aab" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="2" auth="user" locRef="6" rule="AUTOSAR-M0_4_2-a" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="4342c4f8-95a1-3237-b35b-9ca6037b74bc" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44126be2-dac6-3d6d-962d-4477c99e05f7" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="floating-point arithmetic is not documented" ln="29" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="29" sev="3" auth="user" locRef="6" rule="COMMENT-10" lnHash="538754804" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="538754804" unbViolId="7668b57d-b2cc-31cc-a844-06188ec1ea81" locStartPos="54" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c7f6967-fae7-3265-b40b-39f5ab295e44" locEndPos="55" locType="sr" hash="1537905639" locEndLn="29" goals="0,"/>
    <StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="33" sev="3" auth="user" locRef="6" rule="HICPP-2_3_1-a" lnHash="652807523" rule.header="Prefer C++ style comment" tool="c++test" lineHash="652807523" unbViolId="403708ad-5eee-3411-862f-3c8555273772" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48c0f0af-2a67-3540-9283-fb4bb0286b01" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/>
    <StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="33" sev="2" auth="user" locRef="6" rule="JSF-126" lnHash="652807523" rule.header="Only valid C++ style comments (//) shall be used" tool="c++test" lineHash="652807523" unbViolId="2fe86f29-95f8-3191-b65c-df0ebd8021cf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9072594a-a898-3494-a7c3-0e0a18096bbf" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/>
    <StdViol msg="Use // comments only" ln="33" locFile="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locStartln="33" sev="3" auth="user" locRef="6" rule="COMMENT-01" lnHash="652807523" rule.header="Prefer C++ style comment" tool="c++test" lineHash="652807523" unbViolId="c868a3bc-dec7-3c10-9b03-12fe833e6552" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61053b21-b478-3bce-be8c-91498e13a9c5" locEndPos="8" locType="sr" hash="1537905639" locEndLn="33" goals="0,"/></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="1538">
            <Project id="flowanalysiscpp" name="flowanalysiscpp" supp="0" total="1538">
               <Res name="flowanalysiscpp" supp="0" total="1538">
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/DeadLock.cpp" locRef="1" locType="sr" name="DeadLock.cpp" supp="0" total="218"/>
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/DivisionByZero.cpp" locRef="2" locType="sr" name="DivisionByZero.cpp" supp="0" total="98"/>
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/MemoryLeak.cpp" locRef="3" locType="sr" name="MemoryLeak.cpp" supp="0" total="318"/>
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/NullPointer.cpp" locRef="4" locType="sr" name="NullPointer.cpp" supp="0" total="167"/>
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/Point.hpp" locRef="5" locType="sr" name="Point.hpp" supp="0" total="265"/>
                  <Res loc="/flowanalysiscpp/flowanalysiscpp/Shapes.hpp" locRef="6" locType="sr" name="Shapes.hpp" supp="0" total="472"/>
               </Res>
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>